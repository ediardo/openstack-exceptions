{"cinder": [{"msg": "Error while requesting %(service)s API.", "code": 500, "name": "APIException"}, {"msg": "Timeout while requesting %(service)s API.", "code": 500, "name": "APITimeout"}, {"msg": "User does not have admin privileges", "code": 403, "name": "AdminRequired"}, {"msg": "Backup driver reported an error: %(message)s", "code": 500, "name": "BackupDriverException"}, {"msg": "Failed to identify volume backend.", "code": 404, "name": "BackupFailedToGetVolumeBackend"}, {"msg": "Invalid Ceph args provided for backup rbd operation", "code": 500, "name": "BackupInvalidCephArgs"}, {"msg": "Maximum number of backups allowed (%(allowed)d) exceeded", "code": 413, "name": "BackupLimitExceeded"}, {"msg": "Unsupported backup metadata version requested", "code": 500, "name": "BackupMetadataUnsupportedVersion"}, {"msg": "Backup %(backup_id)s could not be found.", "code": 404, "name": "BackupNotFound"}, {"msg": "An error has occurred during backup operation", "code": 400, "name": "BackupOperationError"}, {"msg": "Backup RBD operation failed", "code": 500, "name": "BackupRBDOperationFailed"}, {"msg": "Unsupported backup verify driver", "code": 500, "name": "BackupVerifyUnsupportedDriver"}, {"msg": "Bad HTTP response status %(status)s", "code": 500, "name": "BadHTTPResponseStatus"}, {"msg": "Brocade Fibre Channel Zoning CLI error: %(reason)s", "code": 500, "name": "BrocadeZoningCliException"}, {"msg": "Brocade Fibre Channel Zoning HTTP error: %(reason)s", "code": 500, "name": "BrocadeZoningHttpException"}, {"msg": "Unrecoverable Error: Versioned Objects in DB are capped to unknown version %(version)s.", "code": 500, "name": "CappedVersionUnknown"}, {"msg": "CgSnapshot %(cgsnapshot_id)s could not be found.", "code": 404, "name": "CgSnapshotNotFound"}, {"msg": "An unknown exception occurred.", "code": 500, "name": "CinderException"}, {"msg": "Cisco Fibre Channel Zoning CLI error: %(reason)s", "code": 500, "name": "CiscoZoningCliException"}, {"msg": "Cluster %(name)s already exists.", "code": 500, "name": "ClusterExists"}, {"msg": "Cluster %(id)s still has hosts.", "code": 400, "name": "ClusterHasHosts"}, {"msg": "Cluster %(id)s could not be found.", "code": 404, "name": "ClusterNotFound"}, {"msg": "Coho Data Cinder driver failure: %(message)s", "code": 500, "name": "CohoException"}, {"msg": "Could not find config at %(path)s", "code": 404, "name": "ConfigNotFound"}, {"msg": "ConsistencyGroup %(consistencygroup_id)s could not be found.", "code": 404, "name": "ConsistencyGroupNotFound"}, {"msg": "Bad response from Datera API", "code": 500, "name": "DateraAPIException"}, {"msg": "Retryable Dell Exception encountered", "code": 500, "name": "DellDriverRetryableException"}, {"msg": "The device in the path %(path)s is unavailable: %(reason)s", "code": 400, "name": "DeviceUnavailable"}, {"msg": "%(message)s", "code": 500, "name": "DotHillAuthenticationError"}, {"msg": "%(message)s", "code": 500, "name": "DotHillConnectionError"}, {"msg": "Backend doesn't exist (%(backend)s)", "code": 500, "name": "DotHillInvalidBackend"}, {"msg": "Not enough space on backend (%(backend)s)", "code": 500, "name": "DotHillNotEnoughSpace"}, {"msg": "No active iSCSI portals with supplied iSCSI IPs", "code": 500, "name": "DotHillNotTargetPortal"}, {"msg": "%(message)s", "code": 500, "name": "DotHillRequestError"}, {"msg": "Volume driver not ready.", "code": 500, "name": "DriverNotInitialized"}, {"msg": "An unknown exception occurred.", "code": 500, "name": "Duplicate"}, {"msg": "Detected more than one volume with name %(vol_name)s", "code": 500, "name": "DuplicateSfVolumeNames"}, {"msg": "EMC VNX Cinder Driver SPUnavailableException: %(cmd)s (Return Code: %(rc)s) (Output: %(out)s).", "code": 500, "name": "EMCSPUnavailableException"}, {"msg": "EMC VNX Cinder Driver CLI exception: %(cmd)s (Return Code: %(rc)s) (Output: %(out)s).", "code": 500, "name": "EMCVnxCLICmdError"}, {"msg": "Backup operation of an encrypted volume failed.", "code": 500, "name": "EncryptedBackupOperationFailed"}, {"msg": "Failed to export for volume: %(reason)s", "code": 400, "name": "ExportFailure"}, {"msg": "Error extending volume: %(reason)s", "code": 500, "name": "ExtendVolumeError"}, {"msg": "Fibre Channel SAN Lookup failure: %(reason)s", "code": 500, "name": "FCSanLookupServiceException"}, {"msg": "Fibre Channel Zone operation failed: %(reason)s", "code": 500, "name": "FCZoneDriverException"}, {"msg": "Operation failed with status=%(status)s. Full dump: %(data)s", "code": 500, "name": "FailedCmdWithDump"}, {"msg": "File %(file_path)s could not be found.", "code": 404, "name": "FileNotFound"}, {"msg": "Google Cloud Storage api failure: %(reason)s", "code": 500, "name": "GCSApiFailure"}, {"msg": "Google Cloud Storage connection failure: %(reason)s", "code": 500, "name": "GCSConnectionFailure"}, {"msg": "Google Cloud Storage oauth2 failure: %(reason)s", "code": 500, "name": "GCSOAuth2Failure"}, {"msg": "Connection to glance failed: %(reason)s", "code": 500, "name": "GlanceConnectionFailed"}, {"msg": "Glance metadata cannot be updated, key %(key)s exists for volume id %(volume_id)s", "code": 400, "name": "GlanceMetadataExists"}, {"msg": "Glance metadata for volume/snapshot %(id)s cannot be found.", "code": 404, "name": "GlanceMetadataNotFound"}, {"msg": "Unknown Gluster exception", "code": 500, "name": "GlusterfsException"}, {"msg": "No mounted Gluster shares found", "code": 500, "name": "GlusterfsNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG", "code": 500, "name": "GlusterfsNoSuitableShareFound"}, {"msg": "Group %(group_id)s could not be found.", "code": 404, "name": "GroupNotFound"}, {"msg": "Group type access for %(group_type_id)s / %(project_id)s combination already exists.", "code": 500, "name": "GroupTypeAccessExists"}, {"msg": "Group type access not found for %(group_type_id)s / %(project_id)s combination.", "code": 404, "name": "GroupTypeAccessNotFound"}, {"msg": "Cannot create group_type with name %(name)s and specs %(group_specs)s", "code": 500, "name": "GroupTypeCreateFailed"}, {"msg": "Group type encryption for type %(type_id)s already exists.", "code": 400, "name": "GroupTypeEncryptionExists"}, {"msg": "Group type encryption for type %(type_id)s does not exist.", "code": 404, "name": "GroupTypeEncryptionNotFound"}, {"msg": "Group Type %(id)s already exists.", "code": 500, "name": "GroupTypeExists"}, {"msg": "Group Type %(group_type_id)s deletion is not allowed with groups present with the type.", "code": 500, "name": "GroupTypeInUse"}, {"msg": "Group type %(group_type_id)s could not be found.", "code": 404, "name": "GroupTypeNotFound"}, {"msg": "Group type with name %(group_type_name)s could not be found.", "code": 404, "name": "GroupTypeNotFoundByName"}, {"msg": "Group Type %(group_type_id)s has no specs with key %(group_specs_key)s.", "code": 404, "name": "GroupTypeSpecsNotFound"}, {"msg": "Cannot update group_type %(id)s", "code": 500, "name": "GroupTypeUpdateFailed"}, {"msg": "Device or resource is busy.", "code": 500, "name": "HBSDBusy"}, {"msg": "HBSD error occurs.", "code": 500, "name": "HBSDCmdError"}, {"msg": "HBSD error occurs.", "code": 500, "name": "HBSDError"}, {"msg": "Storage resource could not be found.", "code": 404, "name": "HBSDNotFound"}, {"msg": "Volume %(volume_name)s is busy.", "code": 500, "name": "HBSDVolumeIsBusy"}, {"msg": "%(message)s", "code": 500, "name": "HNASConnError"}, {"msg": "Host %(host)s could not be found.", "code": 404, "name": "HostNotFound"}, {"msg": "Failed to attach iSCSI target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetAttachFailed"}, {"msg": "Failed to create iscsi target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetCreateFailed"}, {"msg": "Failed to detach iSCSI target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetDetachFailed"}, {"msg": "%(error_message)s", "code": 500, "name": "ISCSITargetHelperCommandFailed"}, {"msg": "No target id found for volume %(volume_id)s.", "code": 404, "name": "ISCSITargetNotFoundForVolume"}, {"msg": "Failed to remove iscsi target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetRemoveFailed"}, {"msg": "Failed to copy image to volume: %(reason)s", "code": 400, "name": "ImageCopyFailure"}, {"msg": "Image quota exceeded", "code": 413, "name": "ImageLimitExceeded"}, {"msg": "Not authorized for image %(image_id)s.", "code": 500, "name": "ImageNotAuthorized"}, {"msg": "Image %(image_id)s could not be found.", "code": 404, "name": "ImageNotFound"}, {"msg": "Image %(image_id)s is unacceptable: %(reason)s", "code": 400, "name": "ImageUnacceptable"}, {"msg": "Infortrend CLI exception: %(err)s Param: %(param)s (Return Code: %(rc)s) (Output: %(out)s)", "code": 500, "name": "InfortrendCliException"}, {"msg": "Unacceptable parameters.", "code": 400, "name": "Invalid"}, {"msg": "Invalid 3PAR Domain: %(err)s", "code": 500, "name": "Invalid3PARDomain"}, {"msg": "API Version String %(version)s is of invalid format. Must be of format MajorNum.MinorNum.", "code": 400, "name": "InvalidAPIVersionString"}, {"msg": "Invalid auth key: %(reason)s", "code": 400, "name": "InvalidAuthKey"}, {"msg": "Invalid backup: %(reason)s", "code": 400, "name": "InvalidBackup"}, {"msg": "Invalid CgSnapshot: %(reason)s", "code": 400, "name": "InvalidCgSnapshot"}, {"msg": "Value \"%(value)s\" is not valid for configuration option \"%(option)s\"", "code": 400, "name": "InvalidConfigurationValue"}, {"msg": "Connector doesn't have required information: %(missing)s", "code": 500, "name": "InvalidConnectorException"}, {"msg": "Invalid ConsistencyGroup: %(reason)s", "code": 400, "name": "InvalidConsistencyGroup"}, {"msg": "Invalid content type %(content_type)s.", "code": 400, "name": "InvalidContentType"}, {"msg": "Version %(req_ver)s is not supported by the API. Minimum is %(min_ver)s and maximum is %(max_ver)s.", "code": 400, "name": "InvalidGlobalAPIVersion"}, {"msg": "Invalid Group: %(reason)s", "code": 400, "name": "InvalidGroup"}, {"msg": "Invalid group type: %(reason)s", "code": 400, "name": "InvalidGroupType"}, {"msg": "Invalid host: %(reason)s", "code": 400, "name": "InvalidHost"}, {"msg": "Invalid image href %(image_href)s.", "code": 400, "name": "InvalidImageRef"}, {"msg": "Invalid input received: %(reason)s", "code": 400, "name": "InvalidInput"}, {"msg": "The type of metadata: %(metadata_type)s for volume/snapshot %(id)s is invalid.", "code": 400, "name": "InvalidMetadataType"}, {"msg": "Project quotas are not properly setup for nested quotas: %(reason)s.", "code": 500, "name": "InvalidNestedQuotaSetup"}, {"msg": "%(err)s", "code": 400, "name": "InvalidParameterValue"}, {"msg": "Invalid qos specs: %(reason)s", "code": 400, "name": "InvalidQoSSpecs"}, {"msg": "Change would make usage less than 0 for the following resources: %(unders)s", "code": 400, "name": "InvalidQuotaValue"}, {"msg": "Invalid Replication Target: %(reason)s", "code": 400, "name": "InvalidReplicationTarget"}, {"msg": "Invalid reservation expiration %(expire)s.", "code": 400, "name": "InvalidReservationExpiration"}, {"msg": "The results are invalid.", "code": 400, "name": "InvalidResults"}, {"msg": "Invalid snapshot: %(reason)s", "code": 400, "name": "InvalidSnapshot"}, {"msg": "Expected a uuid but received %(uuid)s.", "code": 400, "name": "InvalidUUID"}, {"msg": "Invalid volume: %(reason)s", "code": 400, "name": "InvalidVolume"}, {"msg": "Invalid attaching mode '%(mode)s' for volume %(volume_id)s.", "code": 400, "name": "InvalidVolumeAttachMode"}, {"msg": "Invalid metadata: %(reason)s", "code": 400, "name": "InvalidVolumeMetadata"}, {"msg": "Invalid metadata size: %(reason)s", "code": 400, "name": "InvalidVolumeMetadataSize"}, {"msg": "Invalid volume type: %(reason)s", "code": 400, "name": "InvalidVolumeType"}, {"msg": "KaminarioCinderDriver failure: %(reason)s", "code": 500, "name": "KaminarioCinderDriverException"}, {"msg": "Kaminario retryable exception: %(reason)s", "code": 500, "name": "KaminarioRetryableException"}, {"msg": "key manager error: %(reason)s", "code": 500, "name": "KeyManagerError"}, {"msg": "Unable to create lock. Coordination backend not started.", "code": 500, "name": "LockCreationFailed"}, {"msg": "Lock acquisition failed.", "code": 500, "name": "LockingFailed"}, {"msg": "Malformed message body: %(reason)s", "code": 500, "name": "MalformedRequestBody"}, {"msg": "Malformed response to command %(cmd)s: %(reason)s", "code": 500, "name": "MalformedResponse"}, {"msg": "Unable to manage existing volume. Volume %(volume_ref)s already managed.", "code": 500, "name": "ManageExistingAlreadyManaged"}, {"msg": "Manage existing volume failed due to invalid backend reference %(existing_ref)s: %(reason)s", "code": 500, "name": "ManageExistingInvalidReference"}, {"msg": "Manage existing volume failed due to volume type mismatch: %(reason)s", "code": 500, "name": "ManageExistingVolumeTypeMismatch"}, {"msg": "Message %(message_id)s could not be found.", "code": 404, "name": "MessageNotFound"}, {"msg": "There is no metadata in DB object.", "code": 500, "name": "MetadataAbsent"}, {"msg": "Failed to copy metadata to volume: %(reason)s", "code": 400, "name": "MetadataCopyFailure"}, {"msg": "Failed to create metadata for volume: %(reason)s", "code": 400, "name": "MetadataCreateFailure"}, {"msg": "Failed to update metadata for volume: %(reason)s", "code": 400, "name": "MetadataUpdateFailure"}, {"msg": "Missing required element '%(element)s' in request body.", "code": 400, "name": "MissingRequired"}, {"msg": "NetApp Cinder Driver exception.", "code": 500, "name": "NetAppDriverException"}, {"msg": "%(message)s", "code": 500, "name": "NexentaException"}, {"msg": "Unknown NFS exception", "code": 500, "name": "NfsException"}, {"msg": "No mounted NFS shares found", "code": 500, "name": "NfsNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG", "code": 500, "name": "NfsNoSuitableShareFound"}, {"msg": "An unknown exception occurred.", "code": 500, "name": "NoMoreTargets"}, {"msg": "No valid host was found. %(reason)s", "code": 500, "name": "NoValidHost"}, {"msg": "Not authorized.", "code": 403, "name": "NotAuthorized"}, {"msg": "Resource could not be found.", "code": 404, "name": "NotFound"}, {"msg": "Operation not supported: %(operation)s.", "code": 405, "name": "NotSupportedOperation"}, {"msg": "Quota exceeded for resources: %(overs)s", "code": 500, "name": "OverQuota"}, {"msg": "Could not find parameter %(param)s", "code": 404, "name": "ParameterNotFound"}, {"msg": "Could not load paste app '%(name)s' from %(path)s", "code": 404, "name": "PasteAppNotFound"}, {"msg": "Policy doesn't allow %(action)s to be performed.", "code": 403, "name": "PolicyNotAuthorized"}, {"msg": "Programming error in Cinder: %(reason)s", "code": 500, "name": "ProgrammingError"}, {"msg": "Quota for project %(project_id)s could not be found.", "code": 404, "name": "ProjectQuotaNotFound"}, {"msg": "Pure Storage Cinder driver failure: %(reason)s", "code": 500, "name": "PureDriverException"}, {"msg": "Retryable Pure Storage Exception encountered", "code": 500, "name": "PureRetryableException"}, {"msg": "Failed to associate qos_specs: %(specs_id)s with type %(type_id)s.", "code": 500, "name": "QoSSpecsAssociateFailed"}, {"msg": "Failed to create qos_specs: %(name)s with specs %(qos_specs)s.", "code": 500, "name": "QoSSpecsCreateFailed"}, {"msg": "Failed to disassociate qos_specs: %(specs_id)s with type %(type_id)s.", "code": 500, "name": "QoSSpecsDisassociateFailed"}, {"msg": "QoS Specs %(specs_id)s already exists.", "code": 500, "name": "QoSSpecsExists"}, {"msg": "QoS Specs %(specs_id)s is still associated with entities.", "code": 500, "name": "QoSSpecsInUse"}, {"msg": "QoS spec %(specs_id)s has no spec with key %(specs_key)s.", "code": 404, "name": "QoSSpecsKeyNotFound"}, {"msg": "No such QoS spec %(specs_id)s.", "code": 404, "name": "QoSSpecsNotFound"}, {"msg": "Failed to update qos_specs: %(specs_id)s with specs %(qos_specs)s.", "code": 500, "name": "QoSSpecsUpdateFailed"}, {"msg": "Quota class %(class_name)s could not be found.", "code": 404, "name": "QuotaClassNotFound"}, {"msg": "Quota exceeded: code=%(code)s", "code": 413, "name": "QuotaError"}, {"msg": "Quota could not be found", "code": 404, "name": "QuotaNotFound"}, {"msg": "Unknown quota resources %(unknown)s.", "code": 404, "name": "QuotaResourceUnknown"}, {"msg": "Quota usage for project %(project_id)s could not be found.", "code": 404, "name": "QuotaUsageNotFound"}, {"msg": "Timeout while requesting capabilities from backend %(service)s.", "code": 502, "name": "RPCTimeout"}, {"msg": "A concurrent, possibly contradictory, request has been made.", "code": 500, "name": "RemoteFSConcurrentRequest"}, {"msg": "Unknown RemoteFS exception", "code": 500, "name": "RemoteFSException"}, {"msg": "No mounted shares found", "code": 500, "name": "RemoteFSNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG", "code": 500, "name": "RemoteFSNoSuitableShareFound"}, {"msg": "Failed to remove export for volume %(volume)s: %(reason)s", "code": 500, "name": "RemoveExportException"}, {"msg": "Volume %(volume_id)s replication error: %(reason)s", "code": 500, "name": "ReplicationError"}, {"msg": "Volume replication for %(volume_id)s could not be found.", "code": 404, "name": "ReplicationNotFound"}, {"msg": "Quota reservation %(uuid)s could not be found.", "code": 404, "name": "ReservationNotFound"}, {"msg": "SSH command injection detected: %(command)s", "code": 500, "name": "SSHInjectionThreat"}, {"msg": "Scheduler Host Filter %(filter_name)s could not be found.", "code": 404, "name": "SchedulerHostFilterNotFound"}, {"msg": "Scheduler Host Weigher %(weigher_name)s could not be found.", "code": 404, "name": "SchedulerHostWeigherNotFound"}, {"msg": "Instance %(uuid)s could not be found.", "code": 404, "name": "ServerNotFound"}, {"msg": "Resource could not be found.", "code": 404, "name": "ServiceNotFound"}, {"msg": "Service is too old to fulfil this request.", "code": 400, "name": "ServiceTooOld"}, {"msg": "Service is unavailable at this time.", "code": 400, "name": "ServiceUnavailable"}, {"msg": "(Command: %(cmd)s) (Return Code: %(exit_code)s) (Stdout: %(stdout)s) (Stderr: %(stderr)s)", "code": 500, "name": "SheepdogCmdError"}, {"msg": "An error has occurred in SheepdogDriver. (Reason: %(reason)s)", "code": 500, "name": "SheepdogError"}, {"msg": "Unknown SMBFS exception.", "code": 500, "name": "SmbfsException"}, {"msg": "No mounted SMBFS shares found.", "code": 500, "name": "SmbfsNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG.", "code": 500, "name": "SmbfsNoSuitableShareFound"}, {"msg": "deleting snapshot %(snapshot_name)s that has dependent volumes", "code": 500, "name": "SnapshotIsBusy"}, {"msg": "Maximum number of snapshots allowed (%(allowed)d) exceeded", "code": 413, "name": "SnapshotLimitExceeded"}, {"msg": "Snapshot %(snapshot_id)s has no metadata with key %(metadata_key)s.", "code": 404, "name": "SnapshotMetadataNotFound"}, {"msg": "Snapshot %(snapshot_id)s could not be found.", "code": 404, "name": "SnapshotNotFound"}, {"msg": "The snapshot is unavailable: %(data)s", "code": 500, "name": "SnapshotUnavailable"}, {"msg": "Error in SolidFire API response: data=%(data)s", "code": 500, "name": "SolidFireAPIDataException"}, {"msg": "Bad response from SolidFire API", "code": 500, "name": "SolidFireAPIException"}, {"msg": "Unable to locate account %(account_name)s on Solidfire device", "code": 500, "name": "SolidFireAccountNotFound"}, {"msg": "SolidFire Cinder Driver exception", "code": 500, "name": "SolidFireDriverException"}, {"msg": "Retryable SolidFire Exception encountered", "code": 500, "name": "SolidFireRetryableException"}, {"msg": "Connection to swift failed: %(reason)s", "code": 500, "name": "SwiftConnectionFailed"}, {"msg": "HTTP exit code: [%(code)s]", "code": 500, "name": "SynoAPIHTTPError"}, {"msg": "Synology driver authentication failed: %(reason)s.", "code": 500, "name": "SynoAuthError"}, {"msg": "LUN not found by UUID: %(uuid)s.", "code": 500, "name": "SynoLUNNotExist"}, {"msg": "Unexpected response from Tegile IntelliFlash API", "code": 500, "name": "TegileAPIException"}, {"msg": "Transfer %(transfer_id)s could not be found.", "code": 404, "name": "TransferNotFound"}, {"msg": "Unable to failover to replication target:%(reason)s).", "code": 500, "name": "UnableToFailOver"}, {"msg": "Unexpected over quota on %(name)s.", "code": 413, "name": "UnexpectedOverQuota"}, {"msg": "Unknown or unsupported command %(cmd)s", "code": 500, "name": "UnknownCmd"}, {"msg": "API version %(version)s is not supported on this method.", "code": 400, "name": "VersionNotFoundForAPIMethod"}, {"msg": "Backend reports: %(message)s", "code": 500, "name": "ViolinBackendErr"}, {"msg": "Backend reports: item already exists", "code": 500, "name": "ViolinBackendErrExists"}, {"msg": "Backend reports: item not found", "code": 404, "name": "ViolinBackendErrNotFound"}, {"msg": "Volume backend config is invalid: %(reason)s", "code": 500, "name": "ViolinInvalidBackendConfig"}, {"msg": "Backend service retry timeout hit: %(timeout)s sec", "code": 500, "name": "ViolinRequestRetryTimeout"}, {"msg": "Backend reports: %(message)s", "code": 404, "name": "ViolinResourceNotFound"}, {"msg": "Volume %(volume_id)s has no administration metadata with key %(metadata_key)s.", "code": 404, "name": "VolumeAdminMetadataNotFound"}, {"msg": "Volume %(volume_id)s is still attached, detach volume first.", "code": 400, "name": "VolumeAttached"}, {"msg": "Volume attachment could not be found with filter: %(filter)s .", "code": 404, "name": "VolumeAttachmentNotFound"}, {"msg": "Bad or unexpected response from the storage volume backend API: %(data)s", "code": 500, "name": "VolumeBackendAPIException"}, {"msg": "Requested backup exceeds allowed Backup gigabytes quota. Requested %(requested)sG, quota is %(quota)sG and %(consumed)sG has been consumed.", "code": 413, "name": "VolumeBackupSizeExceedsAvailableQuota"}, {"msg": "Volume device not found at %(device)s.", "code": 500, "name": "VolumeDeviceNotFound"}, {"msg": "Volume driver reported an error: %(message)s", "code": 500, "name": "VolumeDriverException"}, {"msg": "Failed to create Volume Group: %(vg_name)s", "code": 500, "name": "VolumeGroupCreationFailed"}, {"msg": "Unable to find Volume Group: %(vg_name)s", "code": 500, "name": "VolumeGroupNotFound"}, {"msg": "deleting volume %(volume_name)s that has snapshot", "code": 500, "name": "VolumeIsBusy"}, {"msg": "Maximum number of volumes allowed (%(allowed)d) exceeded for quota '%(name)s'.", "code": 413, "name": "VolumeLimitExceeded"}, {"msg": "Metadata backup already exists for this volume", "code": 500, "name": "VolumeMetadataBackupExists"}, {"msg": "Volume %(volume_id)s has no metadata with key %(metadata_key)s.", "code": 404, "name": "VolumeMetadataNotFound"}, {"msg": "Volume migration failed: %(reason)s", "code": 500, "name": "VolumeMigrationFailed"}, {"msg": "Volume %(name)s was not deactivated in time.", "code": 500, "name": "VolumeNotDeactivated"}, {"msg": "Volume %(volume_id)s could not be found.", "code": 404, "name": "VolumeNotFound"}, {"msg": "Requested volume or snapshot exceeds allowed %(name)s quota. Requested %(requested)sG, quota is %(quota)sG and %(consumed)sG has been consumed.", "code": 413, "name": "VolumeSizeExceedsAvailableQuota"}, {"msg": "Requested volume size %(size)d is larger than maximum allowed limit %(limit)d.", "code": 413, "name": "VolumeSizeExceedsLimit"}, {"msg": "Volume type access for %(volume_type_id)s / %(project_id)s combination already exists.", "code": 500, "name": "VolumeTypeAccessExists"}, {"msg": "Volume type access not found for %(volume_type_id)s / %(project_id)s combination.", "code": 404, "name": "VolumeTypeAccessNotFound"}, {"msg": "Cannot create volume_type with name %(name)s and specs %(extra_specs)s", "code": 500, "name": "VolumeTypeCreateFailed"}, {"msg": "Volume type encryption for type %(type_id)s already exists.", "code": 400, "name": "VolumeTypeEncryptionExists"}, {"msg": "Volume type encryption for type %(type_id)s does not exist.", "code": 404, "name": "VolumeTypeEncryptionNotFound"}, {"msg": "Volume Type %(id)s already exists.", "code": 500, "name": "VolumeTypeExists"}, {"msg": "Volume Type %(volume_type_id)s has no extra specs with key %(extra_specs_key)s.", "code": 404, "name": "VolumeTypeExtraSpecsNotFound"}, {"msg": "Volume Type %(volume_type_id)s deletion is not allowed with volumes present with the type.", "code": 500, "name": "VolumeTypeInUse"}, {"msg": "Volume type %(volume_type_id)s could not be found.", "code": 404, "name": "VolumeTypeNotFound"}, {"msg": "Volume type with name %(volume_type_name)s could not be found.", "code": 404, "name": "VolumeTypeNotFoundByName"}, {"msg": "Cannot update volume_type %(id)s", "code": 500, "name": "VolumeTypeUpdateFailed"}, {"msg": "Unknown Virtuozzo Storage exception", "code": 500, "name": "VzStorageException"}, {"msg": "No mounted Virtuozzo Storage shares found", "code": 500, "name": "VzStorageNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG", "code": 500, "name": "VzStorageNoSuitableShareFound"}, {"msg": "The WebDAV request failed. Reason: %(msg)s, Return code/reason: %(code)s, Source Volume: %(src)s, Destination Volume: %(dst)s, Method: %(method)s.", "code": 500, "name": "WebDAVClientError"}, {"msg": "Worker for %(type)s %(id)s already exists.", "code": 500, "name": "WorkerExists"}, {"msg": "Worker with %s could not be found.", "code": 404, "name": "WorkerNotFound"}, {"msg": "X-IO Volume Driver exception!", "code": 500, "name": "XIODriverException"}, {"msg": "Volume to Initiator Group mapping already exists", "code": 500, "name": "XtremIOAlreadyMappedError"}, {"msg": "System is busy, retry operation.", "code": 500, "name": "XtremIOArrayBusy"}, {"msg": "Exceeded the limit of snapshots per volume", "code": 500, "name": "XtremIOSnapshotsLimitExceeded"}, {"msg": "Failed to retrieve attachments for volume %(name)s", "code": 404, "name": "ZadaraAttachmentsNotFound"}, {"msg": "Invalid attachment info for volume %(name)s: %(reason)s", "code": 400, "name": "ZadaraInvalidAttachmentInfo"}, {"msg": "Unable to create server object for initiator %(name)s", "code": 500, "name": "ZadaraServerCreateFailure"}, {"msg": "Unable to find server object for initiator %(name)s", "code": 404, "name": "ZadaraServerNotFound"}, {"msg": "Unable to find any active VPSA controller", "code": 500, "name": "ZadaraVPSANoActiveController"}, {"msg": "%(reason)s", "code": 500, "name": "ZadaraVolumeNotFound"}, {"msg": "Fibre Channel connection control failure: %(reason)s", "code": 500, "name": "ZoneManagerException"}]} 
