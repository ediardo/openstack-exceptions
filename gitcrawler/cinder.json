{"cinder": [{"msg": "Keystone version 3 or greater must be used to get nested quota support.", "line_number": 209, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/quota_utils.py"}, {"msg": "Must run this command as cloud admin using a Keystone policy.json which allows cloud admin to list and get any project.", "line_number": 214, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/quota_utils.py"}, {"msg": "May specify only one of %s) % (names", "line_number": 116, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/utils.py"}, {"msg": "Metadata property key blank.", "line_number": 171, "code": 400, "name": "InvalidVolumeMetadata", "file_name": "cinder/cinder/utils.py"}, {"msg": "Metadata property key %s greater than 255 characters.) % k", "line_number": 176, "code": 400, "name": "InvalidVolumeMetadataSize", "file_name": "cinder/cinder/utils.py"}, {"msg": "Metadata property key %s value greater than 255 characters.) % k", "line_number": 181, "code": 400, "name": "InvalidVolumeMetadataSize", "file_name": "cinder/cinder/utils.py"}, {"msg": "Volume driver not ready.", "line_number": 539, "code": 500, "name": "DriverNotInitialized", "file_name": "cinder/cinder/utils.py"}, {"msg": "Value '%(param)s' for '%(param_string)s' is not a boolean.) % {'param': param, 'param_string': param_string}", "line_number": 600, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/utils.py"}, {"msg": "%(name)s cannot be all spaces.'", "line_number": 651, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/utils.py"}, {"msg": "specs must be a dictionary.'", "line_number": 1060, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/utils.py"}, {"msg": "Unable to create lock. Coordination backend not started.", "line_number": 123, "code": 500, "name": "LockCreationFailed", "file_name": "cinder/cinder/coordination.py"}, {"msg": "Invalid input received: %(reason)s", "line_number": 559, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/service.py"}, {"msg": "Unable to find ssh_hosts_key_file: %s) % CONF.ssh_hosts_key_file", "line_number": 78, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/ssh_utils.py"}, {"msg": "An unknown exception occurred.", "line_number": 136, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/ssh_utils.py"}, {"msg": "timeutils.utcnow() + expire", "line_number": 371, "code": 400, "name": "InvalidReservationExpiration", "file_name": "cinder/cinder/quota.py"}, {"msg": "Sum of child usage '%(sum)s' is greater than free quota of '%(free)s' for project %(proj)s' for resource '%(res)s'. Please lower the limit or usage for one or more of the following projects: '%(child_ids)s') % { sum': calc_parent_allocated, free': parent_free_quota, proj': cur_proj_id, 'res': resource, child_ids': ', '.join(project_subtree.keys(", "line_number": 506, "code": 500, "name": "InvalidNestedQuotaSetup", "file_name": "cinder/cinder/quota.py"}, {"msg": "Invalid allocated quotas defined for the following project quotas: %s) % borked_allocated_quotas", "line_number": 533, "code": 500, "name": "InvalidNestedQuotaSetup", "file_name": "cinder/cinder/quota.py"}, {"msg": "Quota limit invalid for project '%(proj)s for resource '%(res)s': limit of %(limit)d is less than in-use value of %(used)d) % { proj': child_id, 'res': res_name, limit': child_limit, used': child_quota[res_name]['in_use']", "line_number": 589, "code": 500, "name": "InvalidNestedQuotaSetup", "file_name": "cinder/cinder/quota.py"}, {"msg": "DupQoSName':", "line_number": 38, "code": 500, "name": "QoSSpecsExists", "file_name": "cinder/cinder/tests/unit/test_qos_specs.py"}, {"msg": "NotFound':", "line_number": 238, "code": 404, "name": "QoSSpecsNotFound", "file_name": "cinder/cinder/tests/unit/test_qos_specs.py"}, {"msg": "NotFound':", "line_number": 246, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/tests/unit/test_qos_specs.py"}, {"msg": "project_id return self.by_project[project_id][resource]", "line_number": 343, "code": 404, "name": "ProjectQuotaNotFound", "file_name": "cinder/cinder/tests/unit/test_quota.py"}, {"msg": "Timeout while requesting %(service)s API.", "line_number": 1220, "code": 500, "name": "APITimeout", "file_name": "cinder/cinder/tests/unit/test_utils.py"}, {"msg": "Fibre Channel SAN Lookup failure: %(reason)s", "line_number": 77, "code": 500, "name": "FCSanLookupServiceException", "file_name": "cinder/cinder/tests/unit/zonemanager/test_brcd_lookup_service.py"}, {"msg": "Not authorized.", "line_number": 241, "code": 403, "name": "NotAuthorized", "file_name": "cinder/cinder/tests/unit/api/openstack/test_wsgi.py"}, {"msg": "Volume %(volume_id)s could not be found.", "line_number": 107, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/tests/unit/api/v2/test_volume_metadata.py"}, {"msg": "Snapshot %(snapshot_id)s could not be found.", "line_number": 64, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/tests/unit/api/v2/test_snapshots.py"}, {"msg": "fake.WILL_NOT_BE_FOUND_ID:", "line_number": 74, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/tests/unit/api/v2/test_types.py"}, {"msg": "fake.WILL_NOT_BE_FOUND_ID:", "line_number": 79, "code": 404, "name": "GroupTypeNotFound", "file_name": "cinder/cinder/tests/unit/api/v3/test_group_types.py"}, {"msg": "fake.VOLUME_ID: return objects.Volume(context, id=fake.VOLUME_ID, _name_id=fake.VOLUME2_ID, host='fake_host', cluster_name=None", "line_number": 47, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_snapshot_manage.py"}, {"msg": "fake.WILL_NOT_BE_FOUND_ID:", "line_number": 63, "code": 404, "name": "QoSSpecsNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "fake.IN_USE_ID:", "line_number": 71, "code": 500, "name": "QoSSpecsInUse", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "fake.INVALID_ID:", "line_number": 88, "code": 400, "name": "InvalidQoSSpecs", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "qos_spec_%s' % fake.ALREADY_EXISTS_ID:", "line_number": 97, "code": 500, "name": "QoSSpecsExists", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "qos_spec_%s' % fake.INVALID_ID:", "line_number": 101, "code": 400, "name": "InvalidQoSSpecs", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "Volume type %(volume_type_id)s could not be found.", "line_number": 129, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_qos_specs_manage.py"}, {"msg": "host_disabled': return {'disabled': True}", "line_number": 66, "code": 404, "name": "ServiceNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_manage.py"}, {"msg": "fake_vt['name']: return fake_vt", "line_number": 84, "code": 404, "name": "VolumeTypeNotFoundByName", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_manage.py"}, {"msg": "fake_vt['id']: return fake_vt", "line_number": 96, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_manage.py"}, {"msg": "fake.WILL_NOT_BE_FOUND_ID:", "line_number": 74, "code": 404, "name": "VolumeTypeNotFoundByName", "file_name": "cinder/cinder/tests/unit/api/contrib/test_types_manage.py"}, {"msg": "IN_USE_VOLUME_TYPE:", "line_number": 80, "code": 500, "name": "VolumeTypeInUse", "file_name": "cinder/cinder/tests/unit/api/contrib/test_types_manage.py"}, {"msg": "NOT_FOUND_VOLUME_TYPE:", "line_number": 114, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_types_manage.py"}, {"msg": "NOT_FOUND_VOLUME_TYPE:", "line_number": 128, "code": 404, "name": "VolumeTypeNotFoundByName", "file_name": "cinder/cinder/tests/unit/api/contrib/test_types_manage.py"}, {"msg": "Volume status must be available", "line_number": 418, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_actions.py"}, {"msg": "fake.VOLUME3_ID: volume['status'] = 'in-use volume['status'] = 'available force): updated_at: datetime.datetime(1, 1, 1, 1, 1, 1), status: 'uploading', display_description: volume['display_description'], size: volume['size'], volume_type: volume['volume_type'], image_id: fake.IMAGE_ID, container_format: 'bare', disk_format: 'raw', image_name: 'image_name'} super(VolumeImageActionsTest, self).setUp( self.controller = volume_actions.VolumeActionsController( self.context = context.RequestContext(fake.USER_ID, fake.PROJECT_ID, is_admin=False vol = { container_format: 'bare', disk_format: 'raw', updated_at: datetime.datetime(1, 1, 1, 1, 1, 1), image_name: 'image_name', force: True} body = {os-volume_upload_image: vol} return body ret = { status': u'queued', name': u'image_name', deleted': False, container_format': u'bare', created_at': datetime.datetime(1, 1, 1, 1, 1, 1), disk_format': u'raw', updated_at': datetime.datetime(1, 1, 1, 1, 1, 1), id': fake.IMAGE_ID, min_ram': 0, checksum': None, min_disk': 0, deleted_at': None, properties': {u'x_billing_code_license': u'246254365'}, size': 0} return ret ret = { status': u'queued', name': u'image_name', deleted': False, container_format': u'bare', created_at': datetime.datetime(1, 1, 1, 1, 1, 1), disk_format': u'raw', updated_at': datetime.datetime(1, 1, 1, 1, 1, 1), id': fake.IMAGE_ID, min_ram': 0, checksum': None, min_disk': 0, visibility': 'public', protected': True, deleted_at': None, properties': {u'x_billing_code_license': u'246254365'}, size': 0} return ret pass fake_upload_volume_to_image_service id = fake.VOLUME_ID vol = {container_format: 'bare', disk_format: 'raw', image_name: 'image_name', force: True} body = {os-volume_upload_image: vol} req = fakes.HTTPRequest.blank('/v2/%s/volumes/%s/action' % (fake.PROJECT_ID, id res_dict = self.controller._volume_upload_image(req, id, body expected = {'os-volume_upload_image': {'id': id, updated_at': datetime.datetime(1, 1, 1, 1, 1, 1), status': 'uploading', display_description': 'displaydesc', size': 1, volume_type': fake_volume.fake_db_volume_type( name='vol_type_name'), image_id': fake.IMAGE_ID, container_format': 'bare', disk_format': 'raw', image_name': 'image_name'}} self.assertDictEqual(expected, res_dict def fake_volume_get_raise_exc(self, context, volume_id):", "line_number": 823, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_actions.py"}, {"msg": "snapshot_id: snapshot_objct = fake_snapshot.fake_snapshot_obj(context, **snapshot return snapshot_objct", "line_number": 57, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_snapshot_unmanage.py"}, {"msg": "self._create_transfer(volume_id_1 all_tenants=1' % fake.PROJECT_ID, use_admin_context=True (transfer2['id'], 'test_transfer')] ret.append((item['id'], item['name'] volume_id: volume_id}} fake.PROJECT_ID fake_auth_context=self.user_ctxt fake.PROJECT_ID fake_auth_context=self.user_ctxt request body., res_dict['badRequest']['message'] fake.PROJECT_ID fake_auth_context=self.user_ctxt res_dict['badRequest']['message'] volume_id: 1234}} fake.PROJECT_ID fake_auth_context=self.user_ctxt res_dict['itemNotFound']['message'] volume_id: volume_id}} fake.PROJECT_ID fake_auth_context=self.user_ctxt res_dict['badRequest']['message'] fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt res_dict['itemNotFound']['message'] volume_id)['status'], 'available' fake.PROJECT_ID, fake.WILL_NOT_BE_FOUND_ID fake_auth_context=self.user_ctxt fake.WILL_NOT_BE_FOUND_ID, res_dict['itemNotFound']['message'] auth_key: transfer['auth_key']}} fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt res_dict['badRequest']['message'] fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt res_dict['badRequest']['message'] auth_key: 1}} fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt Invalid auth key: Attempt to transfer %s with invalid auth key.' % transfer['id'] auth_key: 1}} fake.PROJECT_ID, fake.WILL_NOT_BE_FOUND_ID fake_auth_context=self.user_ctxt fake.WILL_NOT_BE_FOUND_ID, res_dict['itemNotFound']['message'] cls, context, transfer, volume_id): consumed='2', quota='3' cinder.transfer.API, accept', fake_transfer_api_accept_throwing_VolumeSizeExceedsAvailableQuota auth_key: transfer['auth_key']}} fake.PROJECT_ID, transfer['id'] fake_auth_context=self.user_ctxt gigabytes quota. Requested 2G, quota is 3G and 2G has been consumed.', res_dict['overLimit']['message'] context, transfer, volume_id):", "line_number": 483, "code": 413, "name": "VolumeLimitExceeded", "file_name": "cinder/cinder/tests/unit/api/contrib/test_volume_transfer.py"}, {"msg": "None, **filters): result = fake_service_get_all(context, id=service_id, **filters if not result:", "line_number": 167, "code": 404, "name": "ServiceNotFound", "file_name": "cinder/cinder/tests/unit/api/contrib/test_services.py"}, {"msg": "Failed to copy image to volume: %(reason)s", "line_number": 524, "code": 400, "name": "ImageCopyFailure", "file_name": "cinder/cinder/tests/unit/volume/test_image.py"}, {"msg": "Volume driver reported an error: %(message)s", "line_number": 963, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/tests/unit/volume/drivers/test_quobyte.py"}, {"msg": "Unacceptable parameters.", "line_number": 786, "code": 400, "name": "Invalid", "file_name": "cinder/cinder/tests/unit/volume/drivers/test_xio.py"}, {"msg": "KaminarioCinderDriver failure: %(reason)s", "line_number": 77, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/tests/unit/volume/drivers/test_kaminario.py"}, {"msg": "('Error (%s) encountered during SolidFire API call.' % response['error']['name']", "line_number": 220, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "Bad response from SolidFire API", "line_number": 1081, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xExceededLimit: {}'.format(params['initiators'][0]", "line_number": 1372, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xExceededLimit", "line_number": 1396, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xAlreadyInVolumeAccessGroup", "line_number": 1419, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xVolumeAccessGroupIDDoesNotExist", "line_number": 1435, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xNotInVolumeAccessGroup", "line_number": 1493, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "xUnknownException", "line_number": 1523, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/solidfire/test_solidfire.py"}, {"msg": "Resource could not be found.", "line_number": 96, "code": 404, "name": "NotFound", "file_name": "cinder/cinder/tests/unit/volume/drivers/dell_emc/test_xtremio.py"}, {"msg": "Bad or unexpected response from the storage volume backend API: %(data)s", "line_number": 216, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/tests/unit/volume/drivers/dell_emc/test_xtremio.py"}, {"msg": "The copy should be primary or secondary", "line_number": 2179, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/tests/unit/volume/drivers/ibm/test_storwize_svc.py"}, {"msg": "Consistency group is empty. No cgsnapshot will be created.", "line_number": 3712, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/tests/unit/volume/drivers/ibm/test_storwize_svc.py"}, {"msg": "An error has occurred during backup operation", "line_number": 539, "code": 400, "name": "BackupOperationError", "file_name": "cinder/cinder/tests/unit/backup/drivers/test_backup_nfs.py"}, {"msg": "Backup RBD operation failed", "line_number": 527, "code": 500, "name": "BackupRBDOperationFailed", "file_name": "cinder/cinder/tests/unit/backup/drivers/test_backup_ceph.py"}, {"msg": "Metadata backup already exists for this volume", "line_number": 1073, "code": 500, "name": "VolumeMetadataBackupExists", "file_name": "cinder/cinder/tests/unit/backup/drivers/test_backup_ceph.py"}, {"msg": "An unknown exception occurred.", "line_number": 182, "code": 500, "name": "Duplicate", "file_name": "cinder/cinder/tests/unit/image/fake.py"}, {"msg": "str(metadata.get('id', uuid.uuid4( self._imagedata[image_id] = data.read( purge_props=False):", "line_number": 196, "code": 404, "name": "ImageNotFound", "file_name": "cinder/cinder/tests/unit/image/fake.py"}, {"msg": "Attempt to transfer %s with invalid auth key.) % transfer_id", "line_number": 162, "code": 400, "name": "InvalidAuthKey", "file_name": "cinder/cinder/transfer/api.py"}, {"msg": "Volume %s must not be part of a consistency group.) % vol_ref['id']", "line_number": 170, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/transfer/api.py"}, {"msg": "Requested volume size %(size)d is larger than maximum allowed limit %(limit)d.", "line_number": 178, "code": 413, "name": "VolumeSizeExceedsLimit", "file_name": "cinder/cinder/transfer/api.py"}, {"msg": "Fibre Channel Zone Manager not initialized", "line_number": 146, "code": 500, "name": "ZoneManagerNotInitialized", "file_name": "cinder/cinder/zonemanager/fc_zone_manager.py"}, {"msg": "Failed adding connection for fabric%(fabric)s: Error: %(err)s) % {'fabric': connected_fabric, err': six.text_type(e)}", "line_number": 248, "code": 500, "name": "ZoneManagerException", "file_name": "cinder/cinder/zonemanager/fc_zone_manager.py"}, {"msg": "Failed removing connection for fabric%(fabric)s: Error: %(err)s) % {'fabric': connected_fabric, err': six.text_type(e)}", "line_number": 327, "code": 500, "name": "ZoneManagerException", "file_name": "cinder/cinder/zonemanager/fc_zone_manager.py"}, {"msg": "%(err)s", "line_number": 92, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_san_lookup_service.py"}, {"msg": "SSH connection failed for %(fabric)s with error: %(err)s % {'fabric': fabric_ip, 'err': e}", "line_number": 127, "code": 500, "name": "FCSanLookupServiceException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_san_lookup_service.py"}, {"msg": "Fibre Channel Zone operation failed: %(reason)s", "line_number": 189, "code": 500, "name": "FCZoneDriverException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_san_lookup_service.py"}, {"msg": "Brocade Fibre Channel Zoning HTTP error: %(reason)s", "line_number": 118, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while connecting the switch %(switch_id)s with protocol %(protocol)s. Error: %(error)s. % {'switch_id': self.switch_ip, protocol': self.protocol, error': six.text_type(e)}", "line_number": 128, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Unexpected status code from the switch %(switch_id)s with protocol %(protocol)s for url %(page)s. Error: %(error)s % {'switch_id': self.switch_ip, protocol': self.protocol, page': requestURL, error': six.text_type(ex)}", "line_number": 138, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while creating authentication token: %s % six.text_type(e", "line_number": 170, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Authentication failed, verify the switch credentials, error code %s.) % auth_error_code", "line_number": 205, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while authenticating with switch: %s. % six.text_type(e", "line_number": 210, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while getting session information %s. % six.text_type(e", "line_number": 227, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while parsing the data: %s.) % six.text_type(e", "line_number": 246, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while getting nvp value: %s.) % six.text_type(e", "line_number": 264, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while checking whether VF is available for management %s.) % six.text_type(e", "line_number": 284, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Cannot change VF context in the session.", "line_number": 317, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Cannot change VF context, specified VF is not available in the manageable VF list %(vf_list)s. % {'vf_list': managable_vf_list}", "line_number": 325, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while changing VF context %s.) % six.text_type(e", "line_number": 329, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while checking the firmware version %s. % six.text_type(e", "line_number": 442, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Failed getting active zone set from fabric %s. % six.text_type(e", "line_number": 484, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "%(err_msg)s.", "line_number": 544, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Exception while forming the zone string: %s. % six.text_type(e", "line_number": 650, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while updating the new zones and cfgs in the zone string. Error %(description)s. % {'description': six.text_type(e)}", "line_number": 697, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while updating the zones in the zone string. Error %(description)s. % {'description': six.text_type(e)}", "line_number": 733, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Error while removing the zones and cfgs in the zone string: %(description)s. % {'description': six.text_type(e)}", "line_number": 822, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "No VF ID is defined in the configuration file.", "line_number": 925, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "VF is not enabled.", "line_number": 932, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Unexpected status code from the switch %(switch_id)s with protocol %(protocol)s for url %(page)s. Error: %(error)s % {'switch_id': self.switch_ip, protocol': self.protocol, page': zone_constant.LOGOUT_PAGE, error': six.text_type(ex)}", "line_number": 962, "code": 500, "name": "BrocadeZoningHttpException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_http_fc_zone_client.py"}, {"msg": "Malformed zone configuration: (switch%(switch)s zone_config=%(zone_config)s). % {'switch': self.switch_ip, zone_config': switch_data}", "line_number": 117, "code": 500, "name": "FCZoneDriverException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Creating and activating zone set failed: (Zone set=%(cfg_name)s error=%(err)s). % {'cfg_name': cfg_name, 'err': six.text_type(e)}", "line_number": 199, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Activating zone set failed: (Zone set=%(cfg_name)s error=%(err)s). % {'cfg_name': cfg_name, 'err': six.text_type(e)}", "line_number": 264, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Deleting zones failed: (command%(cmd)s error%(err)s). % {'cmd': cmd, 'err': six.text_type(e)}", "line_number": 319, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Error while checking transaction status: %s) % stderr", "line_number": 368, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Error while running zoning CLI: (command%(cmd)s error=%(err)s).) % {'cmd': cmd_list, 'err': stdout}", "line_number": 387, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Error while getting data via ssh: (command%(cmd)s error=%(err)s).) % {'cmd': cmd, 'err': six.text_type(e)}", "line_number": 414, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Error while getting data via ssh: (command%(cmd)s error=%(err)s).) % {'cmd': cmd_list, err': six.text_type(e)}", "line_number": 428, "code": 500, "name": "BrocadeZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Malformed nameserver string: %s) % line", "line_number": 448, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/zonemanager/drivers/brocade/brcd_fc_zone_client_cli.py"}, {"msg": "Error while getting data via ssh: (command%(cmd)s error=%(err)s).) % {'cmd': cmd_list, err': six.text_type(e)}", "line_number": 208, "code": 500, "name": "CiscoZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_san_lookup_service.py"}, {"msg": "Malformed fcns output string: %s) % line", "line_number": 228, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_san_lookup_service.py"}, {"msg": "Exception: %s) % six.text_type(ex", "line_number": 132, "code": 500, "name": "FCZoneDriverException", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_zone_client_cli.py"}, {"msg": "Creating and activating zone set failed: (Zone set=%(zoneset)s error=%(err)s). % {'zoneset': cfg_name, 'err': six.text_type(e)}", "line_number": 197, "code": 500, "name": "CiscoZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_zone_client_cli.py"}, {"msg": "Updating and activating zone set failed: (Zone set=%(zoneset)s error=%(err)s). % {'zoneset': cfg_name, 'err': six.text_type(e)}", "line_number": 263, "code": 500, "name": "CiscoZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_zone_client_cli.py"}, {"msg": "Deleting zones failed: (command%(cmd)s error%(err)s). % {'cmd': cmds, 'err': six.text_type(e)}", "line_number": 353, "code": 500, "name": "CiscoZoningCliException", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_zone_client_cli.py"}, {"msg": "Malformed show fcns database string: %s) % line", "line_number": 418, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/zonemanager/drivers/cisco/cisco_fc_zone_client_cli.py"}, {"msg": "key manager error: %(reason)s", "line_number": 112, "code": 500, "name": "KeyManagerError", "file_name": "cinder/cinder/keymgr/conf_key_mgr.py"}, {"msg": "msg % {'s_az': availability_zone}", "line_number": 127, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/group/api.py"}, {"msg": "No host to create group %s.) % group.id", "line_number": 244, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group snapshot is empty. No group will be created.", "line_number": 267, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Source Group is empty. No group will be created.", "line_number": 344, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group status must be available or error, but current status is: %s) % group.status", "line_number": 516, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group %s still contains volumes. The delete-volumes flag is required to delete it. % group.id", "line_number": 525, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Volume in group %s is attached. Need to detach first.) % group.id", "line_number": 533, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Volume in group still has dependent snapshots.", "line_number": 541, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group status must be available, but current status is: %s.) % group.status", "line_number": 560, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "UUIDs %s are in both add and remove volume list.) % invalid_uuids", "line_number": 578, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot update group %(group_id)s because no valid name, description, add_volumes, or remove_volumes were provided.) % {'group_id': group.id}", "line_number": 606, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot remove volume %(volume_id)s from group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': volume['id'], group_id': group.id, status': volume['status'], valid': VALID_REMOVE_VOL_FROM_GROUP_STATUS}", "line_number": 649, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot remove volume %(volume_id)s from group %(group_id)s because it is not in the group.) % {'volume_id': rem_vol, group_id': group.id}", "line_number": 662, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because volume cannot be found.) % {'volume_id': add_vol, group_id': group.id}", "line_number": 682, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because it is already in group %(orig_group)s.) % {'volume_id': add_vol_ref['id'], group_id': group.id, orig_group': orig_group}", "line_number": 695, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because it has no volume type.) % {'volume_id': add_vol_ref['id'], group_id': group.id}", "line_number": 704, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because volume type %(volume_type)s is not supported by the group.) % {'volume_id': add_vol_ref['id'], group_id': group.id, volume_type': add_vol_type_id}", "line_number": 714, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': add_vol_ref['id'], group_id': group.id, status': add_vol_ref['status'], valid': VALID_ADD_VOL_TO_GROUP_STATUS}", "line_number": 725, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Invalid volume: %(reason)s", "line_number": 733, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because volume does not exist.) % {'volume_id': add_vol_ref['id'], group_id': group.id}", "line_number": 746, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group status: %(status)s is invalid, valid status are: %(valid)s.) % {'status': status, valid': c_fields.GroupStatus.ALL}", "line_number": 784, "code": 400, "name": "InvalidGroupStatus", "file_name": "cinder/cinder/group/api.py"}, {"msg": "GroupSnapshot status must be available or error, and no Group can be currently using it as source for its creation.'", "line_number": 841, "code": 400, "name": "InvalidGroupSnapshot", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Group snapshot status: %(status)s is invalid, valid statuses are: %(valid)s.) % {'status': status, valid': c_fields.GroupSnapshotStatus.ALL}", "line_number": 894, "code": 400, "name": "InvalidGroupSnapshotStatus", "file_name": "cinder/cinder/group/api.py"}, {"msg": "Host field is missing.'", "line_number": 400, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/common.py"}, {"msg": "None, experimentalFalse): Create an API version request object. self._ver_major = None self._ver_minor = None if version_string is not None: match = re.match(r^([1-9]\\d*)\\.([1-9]\\d*|0)$, version_string if match: self._ver_major = int(match.group(1 self._ver_minor = int(match.group(2 else:", "line_number": 135, "code": 400, "name": "InvalidAPIVersionString", "file_name": "cinder/cinder/api/openstack/api_version_request.py"}, {"msg": "An API version request must be compared to a VersionedMethod object.'", "line_number": 157, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/api/openstack/api_version_request.py"}, {"msg": "self.content_type", "line_number": 262, "code": 400, "name": "InvalidContentType", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "API version %(version)s is not supported on this method.", "line_number": 298, "code": 400, "name": "VersionNotFoundForAPIMethod", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "Version %(req_ver)s is not supported by the API. Minimum is %(min_ver)s and maximum is %(max_ver)s.", "line_number": 311, "code": 400, "name": "InvalidGlobalAPIVersion", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "cannot understand JSON", "line_number": 356, "code": 500, "name": "MalformedRequestBody", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "too many body keys", "line_number": 574, "code": 500, "name": "MalformedRequestBody", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "request.get_content_type( deserializer = meth_deserializers[mtype] deserializer = self.default_deserializers[mtype]", "line_number": 741, "code": 400, "name": "InvalidContentType", "file_name": "cinder/cinder/api/openstack/wsgi.py"}, {"msg": "Default volume type can not be found.", "line_number": 50, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/api/v2/types.py"}, {"msg": "Invalid value for 'force': '%s') % err_msg", "line_number": 142, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/api/v2/snapshots.py"}, {"msg": "Invalid filter keys: %s') % ', '.join(invalid_keys", "line_number": 77, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/attachments.py"}, {"msg": "binary must be empty or set to cinder-volume or cinder-scheduler'", "line_number": 50, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/workers.py"}, {"msg": "utils.build_or_str(types, msg + '%s.'", "line_number": 65, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/workers.py"}, {"msg": "Resource ID must be a UUID, and %s is not.') % resource_id", "line_number": 73, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/workers.py"}, {"msg": "There is no resource with UUID %s pending cleanup.'), resource_id", "line_number": 88, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/workers.py"}, {"msg": "There are multiple resources with UUID %s pending cleanup.  Please be more specific.'), resource_id", "line_number": 93, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/workers.py"}, {"msg": "req.api_version_request", "line_number": 41, "code": 400, "name": "VersionNotFoundForAPIMethod", "file_name": "cinder/cinder/api/v3/resource_common_manage.py"}, {"msg": "Invalid sort keys passed: %s) % ', '.join(invalid_keys", "line_number": 60, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/api/v3/resource_common_manage.py"}, {"msg": "Invalid sort dirs passed: %s) % ', '.join(invalid_dirs", "line_number": 65, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/api/v3/resource_common_manage.py"}, {"msg": "Unexpected 'disabled_reason' found on enable request.", "line_number": 109, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/v3/clusters.py"}, {"msg": "Access list not available for public volume types.", "line_number": 55, "code": 404, "name": "VolumeTypeAccessNotFound", "file_name": "cinder/cinder/api/contrib/volume_type_access.py"}, {"msg": "control_location must be defined'", "line_number": 66, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/contrib/volume_type_encryption.py"}, {"msg": "Valid control location are: %s) % CONTROL_LOCATION", "line_number": 72, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/api/contrib/volume_type_encryption.py"}, {"msg": "type_id, idid", "line_number": 155, "code": 404, "name": "VolumeTypeEncryptionNotFound", "file_name": "cinder/cinder/api/contrib/volume_type_encryption.py"}, {"msg": "Cannot find requested '%s volume type) % req_volume_type", "line_number": 127, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/api/contrib/volume_manage.py"}, {"msg": "Host '%s' not found) % volume['host']", "line_number": 147, "code": 400, "name": "ServiceUnavailable", "file_name": "cinder/cinder/api/contrib/volume_manage.py"}, {"msg": "Invalid value '%s' for skip_validation.) % skip_flag", "line_number": 219, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/api/contrib/quotas.py"}, {"msg": "Volume Type %(volume_type_id)s has no extra specs with key %(extra_specs_key)s.", "line_number": 148, "code": 404, "name": "VolumeTypeExtraSpecsNotFound", "file_name": "cinder/cinder/api/contrib/types_extra_specs.py"}, {"msg": "services[0].service_topic_queue capabilities = self.volume_api.get_capabilities(context, topic, False", "line_number": 57, "code": 502, "name": "RPCTimeout", "file_name": "cinder/cinder/api/contrib/capabilities.py"}, {"msg": "vg_name lvm_sys_dir = os.path.dirname(lvm_conf _lvm_cmd_prefix.append('LVM_SYSTEM_DIR=' + lvm_sys_dir _lvm_cmd_prefix.append('LVM_SUPPRESS_FD_WARNINGS=1' self.pv_list = physical_volumes try: self._create_vg(physical_volumes except putils.ProcessExecutionError as err: LOG.exception('Error creating Volume Group' LOG.error('Cmd     :%s', err.cmd LOG.error('StdOut  :%s', err.stdout LOG.error('StdErr  :%s', err.stderr", "line_number": 103, "code": 500, "name": "VolumeGroupCreationFailed", "file_name": "cinder/cinder/brick/local_dev/lvm.py"}, {"msg": "%s/%s' % (self.vg_name, name size_str = self._calculate_thin_pool_size( vg_pool_name] total %(free)sg, {'pool': vg_pool_name, size': size_str, free': self.vg_free_space} root_helper=self._root_helper, run_as_root=True pool_path = '%s/%s' % (self.vg_name, self.vg_thin_pool cmd = LVM.LVM_CMD_PREFIX + ['lvcreate', '-T', '-V', size_str, '-n', name, pool_path] cmd = LVM.LVM_CMD_PREFIX + ['lvcreate', '-n', name, self.vg_name, -L', size_str] cmd.extend(['-m', mirror_count, '--nosync', --mirrorlog', 'mirrored'] terras = int(size_str[:-1]) / 1024.0 if terras >= 1.5: rsize = int(2 ** math.ceil(math.log(terras) / math.log(2 # NOTE(vish): Next power of two for region size. See: #             http://red.ht/U2BPOD cmd.extend(['-R', str(rsize)] self._execute(*cmd, root_helper=self._root_helper, run_as_root=True LOG.exception('Error creating Volume' LOG.error('Cmd     :%s', err.cmd LOG.error('StdOut  :%s', err.stdout LOG.error('StdErr  :%s', err.stderr LOG.error('Current state: %s', self.get_all_volume_groups( raise LOG.error(Trying to create snapshot by non-existent LV: %s, source_lv_name %s/%s' % (self.vg_name, source_lv_name)] size = source_lvref['size'] cmd.extend(['-L', '%sg' % (size)] self._execute(*cmd, root_helper=self._root_helper, run_as_root=True LOG.exception('Error creating snapshot' LOG.error('Cmd     :%s', err.cmd LOG.error('StdOut  :%s', err.stdout LOG.error('StdErr  :%s', err.stderr raise return name Attr', '%s/%s' % (self.vg_name, name)] root_helper=self._root_helper, run_as_root=True out = out.strip( if (out[4] == 'a'): return True self._execute(*cmd, root_helper=self._root_helper, run_as_root=True LOG.exception('Error deactivating LV' LOG.error('Cmd     :%s', err.cmd LOG.error('StdOut  :%s', err.stdout LOG.error('StdErr  :%s', err.stderr raise backoff_rate=1 name LOG.debug(Volume %s is still active., name", "line_number": 648, "code": 500, "name": "VolumeNotDeactivated", "file_name": "cinder/cinder/brick/local_dev/lvm.py"}, {"msg": "Version %s already exists in history.' % ver", "line_number": 84, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/objects/base.py"}, {"msg": "Couldn't find ORM model for Persistent Versioned Object %s.) % cls.obj_name(", "line_number": 263, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/objects/base.py"}, {"msg": "Modification operations are not allowed on frozen storage backends.'", "line_number": 477, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/objects/base.py"}, {"msg": "or version_cap  OBJ_VERSIONS.get_current(): self.manifest = None if version_cap not in OBJ_VERSIONS:", "line_number": 495, "code": 500, "name": "CappedVersionUnknown", "file_name": "cinder/cinder/objects/base.py"}, {"msg": "Valid consumer of QoS specs are: %s) % c_fields.QoSConsumerField(", "line_number": 59, "code": 400, "name": "InvalidQoSSpecs", "file_name": "cinder/cinder/objects/qos_specs.py"}, {"msg": "Service is too old to fulfil this request.", "line_number": 177, "code": 400, "name": "ServiceTooOld", "file_name": "cinder/cinder/objects/service.py"}, {"msg": "There is no metadata in DB object.", "line_number": 156, "code": 500, "name": "MetadataAbsent", "file_name": "cinder/cinder/objects/snapshot.py"}, {"msg": "Can't parse backup record.", "line_number": 141, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/objects/backup.py"}, {"msg": "Either snapshot or volume field should be set.", "line_number": 238, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/objects/backup.py"}, {"msg": "The device in the path %(path)s is unavailable: %(reason)s", "line_number": 535, "code": 400, "name": "DeviceUnavailable", "file_name": "cinder/cinder/volume/utils.py"}, {"msg": "Value \"%(value)s\" is not valid for configuration option \"%(option)s\"", "line_number": 615, "code": 400, "name": "InvalidConfigurationValue", "file_name": "cinder/cinder/volume/utils.py"}, {"msg": "volume is not assigned to a host", "line_number": 715, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/utils.py"}, {"msg": "marker not found: %s') % marker", "line_number": 842, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/utils.py"}, {"msg": "Invalid volume size provided for create request: %s (size argument must be an integer (or string representation of an integer) and greater than zero).') % size", "line_number": 241, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "volume_type must be provided when creating a volume in a consistency group.", "line_number": 247, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Invalid volume_type provided: %s (requested type must be supported by this consistency group).) % volume_type", "line_number": 253, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "volume_type must be provided when creating a volume in a group.", "line_number": 259, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Invalid volume_type provided: %s (requested type must be supported by this group).) % volume_type", "line_number": 265, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Invalid volume_type provided: %s (requested type is not compatible; either match source volume, or omit type argument).) % volume_type.id", "line_number": 276, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "No volume_type should be provided when creating test replica.", "line_number": 282, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Invalid volume_type provided: %s (requested type is not compatible; recommend omitting the type argument).) % volume_type.id", "line_number": 292, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %s must not be migrating, attached, belong to a group or have snapshots.') % status", "line_number": 437, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Failed to update snapshot.'", "line_number": 456, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The volume cannot be updated during maintenance.", "line_number": 494, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "limit param must be positive'", "line_number": 537, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "limit param must be an integer'", "line_number": 540, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume status must be %(expected)s to reserve, but the status is %(current)s.') % {'expected': expected_status, current': volume.status}", "line_number": 641, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Unable to detach volume. Volume status must be 'in-use and attach_status must be 'attached' to detach.", "line_number": 679, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The volume cannot be attached in maintenance mode.", "line_number": 698, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The volume cannot be detached in maintenance mode.", "line_number": 725, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The volume connection cannot be initialized in maintenance mode.", "line_number": 740, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The volume cannot accept transfer in maintenance mode.", "line_number": 764, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The snapshot cannot be created because volume has not been scheduled to any host.", "line_number": 798, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The snapshot cannot be created when the volume is in maintenance mode.", "line_number": 805, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Snapshot cannot be created while volume is migrating.", "line_number": 809, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Snapshot of secondary replica is not allowed.", "line_number": 814, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %(vol_id)s status must be available, but current status is: %(vol_status)s.) % {'vol_id': volume['id'], vol_status': volume['status']}", "line_number": 821, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "The snapshot cannot be created when the volume is in error status.", "line_number": 927, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Snapshot %s must not be part of a group.') % status", "line_number": 1021, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Deleting volume metadata is not allowed for volumes in %s status.') % volume.status", "line_number": 1057, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Updating volume metadata is not allowed for volumes in %s status.') % volume['status']", "line_number": 1068, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %(vol_id)s status must be %(statuses)s') % {'vol_id': volume.id, statuses': utils.build_or_str(expected['status'])}", "line_number": 1214, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "New size for extend must be greater than current size. (current: %(size)s, extended: %(new_size)s).) % {'new_size': new_size, size': volume.size}", "line_number": 1288, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %(vol_id)s status must be available to extend.') % {'vol_id': volume.id}", "line_number": 1294, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Requested volume or snapshot exceeds allowed %(name)s quota. Requested %(requested)sG, quota is %(quota)sG and %(consumed)sG has been consumed.", "line_number": 1333, "code": 413, "name": "VolumeSizeExceedsAvailableQuota", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "No available service named %s') % cluster_name or host", "line_number": 1395, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %s status must be available or in-use, must not be migrating, have snapshots, be replicated, be part of a group and destination host/cluster must be different than the current one') % {'vol_id': volume.id}", "line_number": 1438, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Source volume not mid-migration.'", "line_number": 1480, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Destination volume not mid-migration.'", "line_number": 1484, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Destination has migration_status %(stat)s, expected %(exp)s.') % {'stat': new_volume.migration_status, exp': expected_status}", "line_number": 1491, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %(vol_id)s status must be available to update readonly flag, but current status is: %(vol_status)s.') % {'vol_id': volume['id'], vol_status': volume['status']}", "line_number": 1505, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "migration_policy must be \\'on-demand\\' or \\'never\\', passed: %s') % new_type", "line_number": 1519, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Invalid volume_type passed: %s.') % new_type", "line_number": 1528, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Retype needs volume to be in available or in-use state, not be part of an active migration or a consistency group, requested type has to be different that the one from the volume, and for in-use volumes front-end qos specs cannot change.' project_id=volume.project_id", "line_number": 1583, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Service is unavailable at this time.", "line_number": 1625, "code": 400, "name": "ServiceUnavailable", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Resource could not be found.", "line_number": 1726, "code": 404, "name": "ServiceNotFound", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "_error_msg(cluster.name", "line_number": 1771, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "replication operations with cluster field'", "line_number": 1807, "code": 400, "name": "UnavailableDuringUpgrade", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "\\'%(key)s  %(value)s\\'') % {'key': key, value': val}", "line_number": 1895, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "Volume %(vol_id)s status must be %(statuses)s') % {'vol_id': vref.id, statuses': utils.build_or_str(expected['status'])}", "line_number": 1929, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/api.py"}, {"msg": "id cannot be None", "line_number": 60, "code": 400, "name": "InvalidGroupType", "file_name": "cinder/cinder/volume/group_types.py"}, {"msg": "name cannot be None", "line_number": 113, "code": 400, "name": "InvalidGroupType", "file_name": "cinder/cinder/volume/group_types.py"}, {"msg": "group_type_id cannot be None", "line_number": 185, "code": 400, "name": "InvalidGroupType", "file_name": "cinder/cinder/volume/group_types.py"}, {"msg": "Type access modification is not applicable to public group type.", "line_number": 190, "code": 400, "name": "InvalidGroupType", "file_name": "cinder/cinder/volume/group_types.py"}, {"msg": "Active-Active configuration is not currently supported by driver %s.') % volume_driver", "line_number": 251, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Snapshot %(id)s was found in state %(state)s rather than 'deleting' during cascade delete.) % {'id': s.id, state': s.status}", "line_number": 766, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Detach volume failed: More than one attachment, but no attachment_id provided.", "line_number": 1121, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Validate volume connection failed (error: %(err)s).) % {'err': six.text_type(err)}", "line_number": 1491, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Create export of volume failed (%s) % ex.msg", "line_number": 1499, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Driver initialize connection failed (error: %(err)s).) % {'err': six.text_type(err)}", "line_number": 1518, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Terminate volume connection failed: %(err)s' % {'err': six.text_type(err)}", "line_number": 1543, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Remove volume export failed.", "line_number": 1556, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "failed to create new_volume on destination new_volume, clean_db_only=True", "line_number": 1798, "code": 500, "name": "VolumeMigrationFailed", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "timeout creating new_volume on destination new_volume, clean_db_only=True", "line_number": 1804, "code": 500, "name": "VolumeMigrationFailed", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Retype requires migration but is not allowed.", "line_number": 2368, "code": 500, "name": "VolumeMigrationFailed", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Volume must not have snapshots.", "line_number": 2377, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Volume must not be replicated.", "line_number": 2386, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Create group failed.' resource={'type': 'group', id': group.id}", "line_number": 2573, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot create consistency group %(group)s because snapshot %(snap)s is not in a valid state. Valid states are: %(valid)s.) % {'group': group.id, snap': snap['id'], valid': VALID_CREATE_CG_SRC_SNAP_STATUS}", "line_number": 2640, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot create consistency group %(group)s because source volume %(source_vol)s is not in a valid state. Valid states are: %(valid)s.) % {'group': group.id, source_vol': source_vol['id'], valid': VALID_CREATE_CG_SRC_CG_STATUS}", "line_number": 2669, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot create group %(group)s because snapshot %(snap)s is not in a valid state. Valid states are: %(valid)s.) % {'group': group.id, snap': snap['id'], valid': VALID_CREATE_GROUP_SRC_SNAP_STATUS}", "line_number": 2774, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot create group %(group)s because source volume %(source_vol)s is not in a valid state. Valid states are: %(valid)s.) % {'group': group.id, source_vol': source_vol.id, valid': VALID_CREATE_GROUP_SRC_GROUP_STATUS}", "line_number": 2803, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Input volumes or snapshots are invalid.", "line_number": 2938, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Input volumes or source volumes are invalid.", "line_number": 2961, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Delete consistency group failed.' resource={'type': 'consistency_group', id': group.id}", "line_number": 3096, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Delete group failed.' resource={'type': 'group', id': group.id}", "line_number": 3226, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': add_vol_ovo.id, group_id': group.id, status': add_vol_ovo.status, valid': VALID_ADD_VOL_TO_CG_STATUS}", "line_number": 3410, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot remove volume %(volume_id)s from consistency group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': remove_vol_ref['id'], group_id': group.id, status': remove_vol_ref['status'], valid': VALID_REMOVE_VOL_FROM_CG_STATUS}", "line_number": 3433, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when updating consistency group %s.') % group.id", "line_number": 3462, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot add volume %(volume_id)s to group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': add_vol_ref.id, group_id': group.id, status': add_vol_ref.status, valid': VALID_ADD_VOL_TO_GROUP_STATUS}", "line_number": 3547, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Cannot remove volume %(volume_id)s from group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': remove_vol_ref.id, group_id': group.id, status': remove_vol_ref.status, valid': VALID_REMOVE_VOL_FROM_GROUP_STATUS}", "line_number": 3571, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when updating group %s.') % group.id", "line_number": 3617, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when creating cgsnapshot %s.') % cgsnapshot.id", "line_number": 3716, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Failed to copy metadata to volume: %(reason)s", "line_number": 3757, "code": 400, "name": "MetadataCopyFailure", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when creating group_snapshot %s.') % group_snapshot.id", "line_number": 3840, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when deleting cgsnapshot %s.') % cgsnapshot.id", "line_number": 3984, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Error occurred when deleting group_snapshot %s.') % group_snapshot.id", "line_number": 4108, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Unable to failover to replication target: %(reason)s).", "line_number": 4293, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "Create export for volume failed (%s).) % ex.msg", "line_number": 4506, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/manager.py"}, {"msg": "id cannot be None", "line_number": 71, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/volume_types.py"}, {"msg": "name cannot be None", "line_number": 144, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/volume_types.py"}, {"msg": "volume_type_id cannot be None", "line_number": 217, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/volume_types.py"}, {"msg": "Type access modification is not applicable to public volume type.", "line_number": 222, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/volume_types.py"}, {"msg": "id cannot be None", "line_number": 104, "code": 400, "name": "InvalidQoSSpecs", "file_name": "cinder/cinder/volume/qos_specs.py"}, {"msg": "QoS spec %(specs_id)s has no spec with key %(specs_key)s.", "line_number": 129, "code": 404, "name": "QoSSpecsKeyNotFound", "file_name": "cinder/cinder/volume/qos_specs.py"}, {"msg": "Failed to get all associations of qos specs %s') % qos_specs_id", "line_number": 145, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/volume/qos_specs.py"}, {"msg": "Type %(type_id)s is already associated with another qos specs: %(qos_specs_id)s) % {'type_id': type_id, qos_specs_id': res['qos_specs']['id']}", "line_number": 180, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/qos_specs.py"}, {"msg": "Unable to terminate volume connection: %(err)s' % {'err': six.text_type(err)}", "line_number": 455, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/driver.py"}, {"msg": "Operation not supported: %(operation)s.", "line_number": 485, "code": 405, "name": "NotSupportedOperation", "file_name": "cinder/cinder/volume/driver.py"}, {"msg": "Error encountered during cleanup of a failed attach: %(ex)s') % {'ex': six.text_type(ex)}", "line_number": 994, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/driver.py"}, {"msg": "Could not find iSCSI export for volume %s) % (volume['name']", "line_number": 2688, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/driver.py"}, {"msg": "initiator LOG.error('The volume driver requires %(data)s in the connector.', {'data': required}", "line_number": 2819, "code": 500, "name": "InvalidConnectorException", "file_name": "cinder/cinder/volume/driver.py"}, {"msg": "name.split(':')[1] (chap_auth_userid, chap_auth_password) = chap_auth optional_args.append('-p%s' % kwargs['portals_port'] optional_args.append('-a' + ','.join(kwargs['portals_ips'] command_args = ['cinder-rtstool', create', path, name, chap_auth_userid, chap_auth_password, self.iscsi_protocol == 'iser'] + optional_args self._execute(*command_args, run_as_root=True LOG.exception(Failed to create iscsi target for volume id:%s., vol_id", "line_number": 131, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/lio.py"}, {"msg": "Failed to attach iSCSI target for volume %(volume_id)s.", "line_number": 180, "code": 500, "name": "ISCSITargetAttachFailed", "file_name": "cinder/cinder/volume/targets/lio.py"}, {"msg": "name.split(':')[1] cfg_ips volume_conf = self.TARGET_FMT % (name, path, portals volume_conf = self.TARGET_FMT_WITH_CHAP % (name, path, portals, %s:%s' % chap_auth LOG.warning('Persistence file already exists for volume, found file at: %s', volume_path content: %(vc)s', {'vp': volume_path, 'vc': volume_conf} LOG.debug('Detected old persistence file for volume %(vol)s at %(old_name)s', {'vol': vol_id, 'old_name': old_name} old_persist_file = os.path.join(volumes_dir, old_name # With the persistent tgts we create them # by creating the entry in the persist file # and then doing an update to get the target # created. (out, err) = utils.execute('iscsictl', '-S', 'target=%s' % name, -f', volume_path, -x', self.config, run_as_root=True LOG.error(Failed to create iscsi target for volume id:%(vol_id)s: %(e)s, {'vol_id': vol_id, 'e': e} # Don't forget to remove the persistent file we created os.unlink(volume_path", "line_number": 161, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/cxt.py"}, {"msg": "name.split(':')[1] chap_str = 'incominguser %s %s' % chap_auth target_flags = 'bsoflags ' + target_flags name': name, 'path': path, 'driver': driver, chap_auth': chap_str, 'target_flags': target_flags, write_cache': write_cache} LOG.debug(('Persistence file already exists for volume, found file at: %s'), volume_path content: %(vc)s'), {'vp': volume_path, 'vc': volume_conf} LOG.debug('Detected old persistence file for volume %(vol)s at %(old_name)s', {'vol': vol_id, 'old_name': old_name} old_persist_file = os.path.join(volumes_dir, old_name # With the persistent tgts we create them # by creating the entry in the persist file # and then doing an update to get the target # created. self._do_tgt_update(name if target already exists in e.stderr: # Adding the additional Warning message below for a clear # ER marker (Ref bug: #1398078). LOG.warning('Could not create target because it already exists for volume: %s', vol_id LOG.debug('Exception was: %s', e else: LOG.error(Failed to create iscsi target for Volume ID: %(vol_id)s: %(e)s, {'vol_id': vol_id, 'e': e} # Don't forget to remove the persistent file we created os.unlink(volume_path", "line_number": 200, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/tgt.py"}, {"msg": "name.split(':')[1] self._new_target(name, tid tid = self._get_target(name self._new_logicalunit(tid, lun, path if chap_auth is not None: (username, password) = chap_auth config_auth = ' '.join((self.auth_type,) + chap_auth self._new_auth(tid, self.auth_type, username, password LOG.exception(Failed to create iscsi target for volume id:%s, vol_id", "line_number": 105, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/iet.py"}, {"msg": "name.split(':')[1] try: utils.execute(truncate, conf_file, --size=0, run_as_root=True except putils.ProcessExecutionError: LOG.exception(Failed to create %(conf)s for volume id:%(vol_id)s, {'conf': conf_file, 'vol_id': vol_id}", "line_number": 128, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/iet.py"}, {"msg": "The volume driver requires the iSCSI initiator name in the connector.'", "line_number": 48, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/targets/scst.py"}, {"msg": "%(error_message)s", "line_number": 122, "code": 500, "name": "ISCSITargetHelperCommandFailed", "file_name": "cinder/cinder/volume/targets/scst.py"}, {"msg": "path.split(/)[3] (out, _err) = self.scst_execute('-noprompt', -set_drv_attr', self.target_driver, -attributes', enabled=1' LOG.debug('StdOut from set driver attribute: %s', out LOG.error(Failed to set attribute for enable target driver %s, e error_message=Failed to enable SCST Target driver. try: (out, _err) = self.scst_execute('-add_target', name, -driver', self.target_driver LOG.debug(StdOut from scstadmin create target: %s, out except putils.ProcessExecutionError as e: LOG.error(Failed to create iscsi target for volume id:%(vol_id)s: %(e)s, {'vol_id': name, 'e': e}", "line_number": 133, "code": 500, "name": "ISCSITargetCreateFailed", "file_name": "cinder/cinder/volume/targets/scst.py"}, {"msg": "msg % {'size': size, snap_size': snapshot.volume_size}", "line_number": 161, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "msg % {'size': size, source_size': source_volume['size']}", "line_number": 170, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Volume size '%(size)s' must be an integer and greater than 0) % {'size': size}", "line_number": 176, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Image %(image_id)s is not active.')\\ % {'image_id': image_id}", "line_number": 216, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "msg % {'image_size': image_size_in_gb, 'volume_size': size}", "line_number": 225, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "msg % {'volume_size': size, 'min_disk': min_disk}", "line_number": 233, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Image %(image_id)s is not active.') % {'image_id': image_id}", "line_number": 248, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Volume must be in the same availability zone as the snapshot", "line_number": 345, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Volume must be in the same availability zone as the source volume", "line_number": 354, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/flows/api/create_volume.py"}, {"msg": "Image %(image_id)s is unacceptable: %(reason)s", "line_number": 545, "code": 400, "name": "ImageUnacceptable", "file_name": "cinder/cinder/volume/flows/manager/create_volume.py"}, {"msg": "image': model_update = self._create_from_image(context, volume, **volume_spec", "line_number": 902, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/volume/flows/manager/create_volume.py"}, {"msg": "Manage existing volume failed due to invalid backend reference %(existing_ref)s: %(reason)s", "line_number": 398, "code": 500, "name": "ManageExistingInvalidReference", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Unable to manage existing volume. Volume %(volume_ref)s already managed.", "line_number": 418, "code": 500, "name": "ManageExistingAlreadyManaged", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Volume should have agent-type set as None.'", "line_number": 424, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Volume %s is online. Set volume to offline for managing using OpenStack.') % target_vol_name", "line_number": 432, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Volume %s has ACL associated with it. Remove ACL for managing using Openstack') % target_vol_name", "line_number": 442, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Only volumes managed by OpenStack can be unmanaged.'", "line_number": 482, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "Error  %s) % ex LOG.warning('Volume %(vol)s : %(state)s', {'vol': volume_name, state': SM_STATE_MSG} raise NimbleAPIException(msg", "line_number": 1427, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nimble.py"}, {"msg": "The decorated method must accept either a volume or a snapshot object'", "line_number": 126, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/remotefs.py"}, {"msg": "Unknown RemoteFS exception", "line_number": 695, "code": 500, "name": "RemoteFSException", "file_name": "cinder/cinder/volume/drivers/remotefs.py"}, {"msg": "Invalid snapshot: %(reason)s", "line_number": 1152, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/volume/drivers/remotefs.py"}, {"msg": "A concurrent, possibly contradictory, request has been made.", "line_number": 1408, "code": 500, "name": "RemoteFSConcurrentRequest", "file_name": "cinder/cinder/volume/drivers/remotefs.py"}, {"msg": "Failed to determine blockbridge API configuration", "line_number": 117, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/blockbridge.py"}, {"msg": "nfs volume must be a valid raw or qcow2 image.'", "line_number": 147, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "Unknown NFS exception", "line_number": 173, "code": 500, "name": "NfsException", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "No mounted NFS shares found", "line_number": 232, "code": 500, "name": "NfsNoSharesMounted", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "There is no share which can host %(volume_size)sG", "line_number": 256, "code": 500, "name": "NfsNoSuitableShareFound", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "Error extending volume: %(reason)s", "line_number": 370, "code": 500, "name": "ExtendVolumeError", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "NFS driver snapshot support is disabled in cinder.conf.", "line_number": 542, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "Snapshots are not supported with nas_secure_file_operations enabled ('true' or 'auto'). Please set it to 'false' if you intend to  have it enabled.", "line_number": 551, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/nfs.py"}, {"msg": "Failed to create HTTP client.'", "line_number": 108, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/qnap.py"}, {"msg": "Model not support'", "line_number": 185, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/qnap.py"}, {"msg": "Metadata of the snapshot is invalid'", "line_number": 471, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/qnap.py"}, {"msg": "Volume %s does not exist.) % volume.id", "line_number": 574, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/qnap.py"}, {"msg": "Volume %s delete failed') % vol_id", "line_number": 982, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/qnap.py"}, {"msg": "Volume device file path %s does not exist.' % dev_path", "line_number": 162, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/lvm.py"}, {"msg": "Volume Group %s does not exist) % self.configuration.volume_group", "line_number": 306, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/lvm.py"}, {"msg": "Thin provisioning not supported on this version of LVM.", "line_number": 342, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/lvm.py"}, {"msg": "existing_ref['source-name']", "line_number": 607, "code": 500, "name": "ManageExistingAlreadyManaged", "file_name": "cinder/cinder/volume/drivers/lvm.py"}, {"msg": "Refusing to migrate volume ID: %(id)s. Please check your configuration because source and destination are the same Volume Group: %(name)s.) % {'id': volume['id'], 'name': self.vg.vg_name}", "line_number": 766, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/lvm.py"}, {"msg": "Invalid Replication Target: %(reason)s", "line_number": 208, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "rados and rbd python libraries not found'", "line_number": 253, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "Error connecting to ceph cluster.", "line_number": 319, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "Encryption is not yet supported.", "line_number": 575, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "utils.convert_str(volume.name try: rbd_image = self.rbd.Image(client.ioctx, volume_name except self.rbd.ImageNotFound: LOG.info(volume %s no longer exists in backend, volume_name return clone_snap = None parent = None # Ensure any backup snapshots are deleted self._delete_backup_snaps(rbd_image # If the volume has non-clone snapshots this delete is expected to # raise VolumeIsBusy so do so straight away. try: snaps = rbd_image.list_snaps( for snap in snaps: if snap['name'].endswith('.clone_snap'): LOG.debug(volume has clone snapshot(s # We grab one of these and use it when fetching parent # info in case the volume has been flattened. clone_snap = snap['name'] break", "line_number": 765, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "utils.convert_str(snapshot.name try: volume.unprotect_snap(snap_name except self.rbd.InvalidArgument: LOG.info( InvalidArgument: Unable to unprotect snapshot %s., snap_name except self.rbd.ImageNotFound: LOG.info( ImageNotFound: Unable to unprotect snapshot %s., snap_name except self.rbd.ImageBusy: children_list = self._get_children_info(volume, snap_name if children_list: for (pool, image) in children_list: LOG.info('Image %(pool)s/%(image)s is dependent on the snapshot %(snap)s.', {'pool': pool, image': image, snap': snap_name}", "line_number": 847, "code": 500, "name": "SnapshotIsBusy", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "Failed to Extend Volume %(volname)s') % {'volname': volume.name}", "line_number": 1217, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/rbd.py"}, {"msg": "Unexpected response from Tegile IntelliFlash API", "line_number": 141, "code": 500, "name": "TegileAPIException", "file_name": "cinder/cinder/volume/drivers/tegile.py"}, {"msg": "InfiniBox storage array returned %(exception)s\\n Data: %(data)s\\n Response: %(response_json)s') % { exception': six.text_type(ex), data': repr(data), response_json': repr(response.json())}", "line_number": 98, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "Volume %s not found') % name", "line_number": 131, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "Snapshot %s not found') % name", "line_number": 139, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "Pool %s not found') % pool_name", "line_number": 156, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "self._make_volume_name(volume # can't delete a volume that has a live snapshot", "line_number": 289, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "INFINIDAT Cinder driver does not support clone of an attached volume. To get this done, create a snapshot from the attached volume and then create a volume from the snapshot.", "line_number": 375, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infinidat.py"}, {"msg": "Retry count exceeded for command: %s') % (args[1],", "line_number": 134, "code": 500, "name": "SolidFireAPIException", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "The decorated method must accept image_meta.'", "line_number": 246, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "The decorated method must accept src_uuid.'", "line_number": 264, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "('Retryable error (%s) encountered during SolidFire API call.' % response['error']['name']", "line_number": 483, "code": 500, "name": "SolidFireRetryableException", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "Unable to locate account %(account_name)s on Solidfire device", "line_number": 532, "code": 500, "name": "SolidFireAccountNotFound", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "Scaled QoS error. Must be minIOPS < maxIOPS < burstIOPS. Currently: Min: %(min)s, Max: %(max)s, Burst: %(burst)s.) % {min: qos['minIOPS'], max: qos['maxIOPS'], burst: qos['burstIOPS']}", "line_number": 795, "code": 400, "name": "InvalidQoSSpecs", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "SolidFire Cinder Driver exception", "line_number": 1017, "code": 500, "name": "SolidFireDriverException", "file_name": "cinder/cinder/volume/drivers/solidfire.py"}, {"msg": "Unable to do replication with Purity REST API version %(api_version)s, requires one of %(required_versions)s.') % { api_version': api_version, required_versions': REPLICATION_REQUIRED_API_VERSIONS", "line_number": 217, "code": 500, "name": "PureDriverException", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "Pure Storage Cinder driver failure: %(reason)s", "line_number": 235, "code": 500, "name": "PureDriverException", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "Unable to determine snapshot name in Purity for snapshot %(id)s.') % {'id': snapshot['id']}", "line_number": 300, "code": 500, "name": "PureDriverException", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "Unable to do manage snapshot operations with Purity REST API version %(api_version)s, requires %(required_versions)s.') % { api_version': api_version, required_versions': MANAGE_SNAP_REQUIRED_API_VERSIONS", "line_number": 1029, "code": 500, "name": "PureDriverException", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "Retryable Pure Storage Exception encountered", "line_number": 1277, "code": 500, "name": "PureRetryableException", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "Unable to failback to default, this can only be done after a failover has completed.'", "line_number": 1367, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/pure.py"}, {"msg": "X-IO Volume Driver exception!", "line_number": 61, "code": 500, "name": "XIODriverException", "file_name": "cinder/cinder/volume/drivers/xio.py"}, {"msg": "The results are invalid.", "line_number": 545, "code": 400, "name": "InvalidResults", "file_name": "cinder/cinder/volume/drivers/tintri.py"}, {"msg": "Coho Data Cinder driver failure: %(message)s", "line_number": 97, "code": 500, "name": "CohoException", "file_name": "cinder/cinder/volume/drivers/coho.py"}, {"msg": "Unknown Virtuozzo Storage exception", "line_number": 247, "code": 500, "name": "VzStorageException", "file_name": "cinder/cinder/volume/drivers/vzstorage.py"}, {"msg": "No mounted Virtuozzo Storage shares found", "line_number": 308, "code": 500, "name": "VzStorageNoSharesMounted", "file_name": "cinder/cinder/volume/drivers/vzstorage.py"}, {"msg": "There is no share which can host %(volume_size)sG", "line_number": 314, "code": 500, "name": "VzStorageNoSuitableShareFound", "file_name": "cinder/cinder/volume/drivers/vzstorage.py"}, {"msg": "File already exists at %s.') % volume_path", "line_number": 383, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/vzstorage.py"}, {"msg": "Failed to connect to sheep daemon. addr: %(addr)s, port: %(port)s'), {'addr': addr, 'port': self.port}", "line_number": 115, "code": 500, "name": "SheepdogError", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "(Command: %(cmd)s) (Return Code: %(exit_code)s) (Stdout: %(stdout)s) (Stderr: %(stderr)s)", "line_number": 131, "code": 500, "name": "SheepdogCmdError", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "Waiting for all nodes to join cluster. Ensure all sheep daemons are running.'", "line_number": 194, "code": 500, "name": "SheepdogError", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "Sheepdog I/O Error, command was: %s.') % ' '.join(cmd", "line_number": 363, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "An error occurred while reading volume %s. % self._vdiname", "line_number": 371, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "An error occurred while writing to volume %s. % self._vdiname", "line_number": 387, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "An error occurred while seeking for volume %s. % self._vdiname", "line_number": 400, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "Failed to create a temporary snapshot for volume %s.' % src_volume.id", "line_number": 666, "code": 500, "name": "SheepdogError", "file_name": "cinder/cinder/volume/drivers/sheepdog.py"}, {"msg": "Unable to get list of domain members, check that the cluster is running.", "line_number": 127, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Unable to get list of IP addresses on this host, check permissions and networking.", "line_number": 136, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Current host isn't part of HGST domain.", "line_number": 148, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Unable to get list of spaces to make new name.  Please verify the cluster is running.", "line_number": 188, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Unable to get information on space %(space)s, please verify that the cluster is running and connected.) % {'space': space_name}", "line_number": 211, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Command %(cmd)s blocked in the CLI and was cancelled) % {'cmd': six.text_type(err.cmd)}", "line_number": 268, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_storage server %(svr)s not of format <host>:<dev>) % {'svr': server}", "line_number": 425, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Storage host %(svr)s not detected, verify name) % {'svr': six.text_type(server)}", "line_number": 434, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Cannot run vgc-cluster command, please ensure software is installed and permissions are set properly.", "line_number": 446, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_redundancy must be set to 0 (non-HA) or 1 (HA) in cinder.conf.", "line_number": 458, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_group %(grp)s and hgst_user %(usr)s must map to valid users/groups in cinder.conf) % { grp': self.configuration.safe_get('hgst_space_group'), usr': self.configuration.safe_get('hgst_space_user')}", "line_number": 469, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_space_mode must be an octal/int in cinder.conf", "line_number": 476, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_net %(net)s specified in cinder.conf not found in cluster) % { net': self.configuration.safe_get('hgst_net')}", "line_number": 488, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "hgst_storage_servers must be defined in cinder.conf", "line_number": 494, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/hgst.py"}, {"msg": "Exception: %s') % six.text_type(e", "line_number": 265, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "Volume %(name)s not found') % {'name': volume_name}", "line_number": 471, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "Volume %(name)s could not be found. It might be already deleted') % {'name': name}", "line_number": 561, "code": 500, "name": "ZadaraVolumeNotFound", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "connector['initiator']", "line_number": 599, "code": 500, "name": "ZadaraServerCreateFailure", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "Unable to find any active VPSA controller", "line_number": 610, "code": 500, "name": "ZadaraVPSANoActiveController", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "self.configuration.zadara_vol_name_template % volume['name'] vpsa_vol=vpsa_vol ('name', vpsa_srv self.vpsa.send_cmd('attach_volume', vpsa_srv=vpsa_srv, vpsa_vol=vpsa_vol vpsa_vol=vpsa_vol ('iqn', initiator_name", "line_number": 627, "code": 404, "name": "ZadaraAttachmentsNotFound", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "Invalid attachment info for volume %(name)s: %(reason)s", "line_number": 631, "code": 400, "name": "ZadaraInvalidAttachmentInfo", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "connector['initiator']", "line_number": 658, "code": 404, "name": "ZadaraServerNotFound", "file_name": "cinder/cinder/volume/drivers/zadara.py"}, {"msg": "DRBDmanage driver error: expected key %s not in answer, wrong DRBDmanage version?') % l", "line_number": 224, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage driver setup error: some required libraries (dbus, drbdmanage.*) not found.'", "line_number": 239, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "Cannot ping DRBDmanage backend'", "line_number": 242, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "Received error string: %s) % (fmt % arg", "line_number": 272, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "Got bad path information from DRBDmanage! (%s)') % data", "line_number": 479, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage timeout waiting for volume creation; resource %(res)s, volume %(vol)s') % {'res': d_res_name, 'vol': volume['id']}", "line_number": 551, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage expected one resource (%(res)s), got %(n)d') % {'res': d_res_name, 'n': len(rl)}", "line_number": 596, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage timeout waiting for new volume after snapshot restore; resource %(res)s, volume %(vol)s') % {'res': new_res, 'vol': volume['id']}", "line_number": 640, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage timeout waiting for volume size; volume ID %(id)s (res %(res)s, vnr %(vnr)d)') % {'id': volume['id'], res': d_res_name, 'vnr': d_vol_nr}", "line_number": 728, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "DRBDmanage timeout waiting for snapshot creation; resource %(res)s, snapshot %(sn)s') % {'res': d_res_name, 'sn': sn_name}", "line_number": 764, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "Expected exactly one node called %s') % nodename", "line_number": 927, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/drbdmanagedrv.py"}, {"msg": "Error getting version: svc: %(svc)s. Return code: %(ret.status)d Message: %(ret.data)s.' % {'svc': svc, ret.status': ret.status, ret.data': ret.data}", "line_number": 59, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Pool Stats: Pool: %(pool)s Return code: %(status)d Message: %(data)s.' % {'pool': pool, status': ret.status, data': ret.data}", "line_number": 78, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Pool ownership: Pool %(pool)s is not owned by %(host)s.' % {'pool': pool, host': self.host}", "line_number": 89, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying Service: %(service)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'service': service, ret.status': ret.status, ret.data': ret.data}", "line_number": 120, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "%(service)s Service is not %(status)s on storage appliance: %(host)s' % {'service': service, status': status, host': self.host}", "line_number": 131, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error getting appliance version details. Return code: %(ret.status)d Message: %(ret.data)s .' % {'ret.status': ret.status, ret.data': ret.data}", "line_number": 144, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error getting replication target details. Return code: %(ret.status)d Message: %(ret.data)s .' % {'ret.status': ret.status, ret.data': ret.data}", "line_number": 160, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error setting replication inheritance to %(set)s for volume: %(vol)s project %(project)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'set': set, project': project, vol': volume, ret.status': ret.status, ret.data': ret.data}", "line_number": 188, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating replication action on: pool: %(pool)s Project: %(proj)s volume: %(vol)s for target: %(tgt)s and pool: %(tgt_pool)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'pool': host_pool, proj': host_project, vol': volume, tgt': tgt_name, tgt_pool': tgt_pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 219, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Deleting replication action: %(id)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'id': action_id, ret.status': ret.status, ret.data': ret.data}", "line_number": 237, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error sending replication update for action id: %(id)s . Return code: %(ret.status)d Message: %(ret.data)s .' % {'id': action_id, ret.status': ret.status, ret.data': ret.data}", "line_number": 257, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error getting replication action: %(id)s. Return code: %(ret.status)d Message: %(ret.data)s .' % {'id': action_id, ret.status': ret.status, ret.data': ret.data}", "line_number": 270, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error sending replication update. Returned error: %(err)s. Action: %(id)s.' % {'err': val['action']['last_result'], id': action_id}", "line_number": 285, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error getting replication source details. Return code: %(ret.status)d Message: %(ret.data)s .' % {'ret.status': ret.status, ret.data': ret.data}", "line_number": 301, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error severing the package: %(package)s from source: %(src)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'package': package, src': src_name, ret.status': ret.status, ret.data': ret.data}", "line_number": 337, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error moving volume: %(vol)s from source project: %(src)s to target project: %(tgt)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'vol': volume, src': project, tgt': tgt_project, ret.status': ret.status, ret.data': ret.data}", "line_number": 361, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Deleting project: %(project)s on pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'project': project, pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 380, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Project Stats: Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 401, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Project: %(project)s on Pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'project': project, pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 439, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Initiator: %(initiator)s on Alias: %(alias)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'initiator': initiator, alias': alias, ret.status': ret.status, ret.data': ret.data}", "line_number": 469, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Adding Initiator: %(initiator)s on group InitiatorGroup: %(initiatorgroup)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'initiator': initiator, initiatorgroup': initiatorgroup, ret.status': ret.status, ret.data': ret.data}", "line_number": 493, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Initiators: InitiatorGroup: %(initiatorgroup)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'initiatorgroup': initiatorgroup, ret.status': ret.status, ret.data': ret.data}", "line_number": 506, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Target: %(alias)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'alias': alias, ret.status': ret.status, ret.data': ret.data}", "line_number": 565, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Target: %(alias)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'alias': alias, ret.status': ret.status, ret.data': ret.data}", "line_number": 583, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating TargetGroup: %(targetgroup)s with IQN: %(iqn)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'targetgroup': targetgroup, iqn': iqn, ret.status': ret.status, ret.data': ret.data}", "line_number": 611, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Adding to TargetGroup: %(targetgroup)s with IQN: %(iqn)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'targetgroup': targetgroup, iqn': iqn, ret.status': ret.status, ret.data': ret.data}", "line_number": 631, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying Pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 646, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying Project: %(project)s on Pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'project': project, pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 663, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying Initiator: %(iqn)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'initiator': iqn, ret.status': ret.status, ret.data': ret.data}", "line_number": 678, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying Target: %(alias)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'alias': alias, ret.status': ret.status, ret.data': ret.data}", "line_number": 693, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Volume: %(lun)s Size: %(size)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'lun': lun, size': volsize, ret.status': ret.status, ret.data': ret.data}", "line_number": 723, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Deleting Volume: %(lun)s from Pool: %(pool)s, Project: %(project)s. Return code: %(ret.status)d, Message: %(ret.data)s.'), {'lun': lun, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data} # This means that the lun exists but it can't be deleted:", "line_number": 841, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Snapshot: %(snapshot)s on Volume: %(lun)s to Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.'), {'snapshot': snapshot, lun': lun, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 867, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Deleting Snapshot: %(snapshot)s on Volume: %(lun)s to Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'snapshot': snapshot, lun': lun, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 890, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Cloning Snapshot: %(snapshot)s on Volume: %(lun)s of Pool: %(pool)s Project: %(project)s Clone project: %(clone_proj)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'snapshot': snapshot, lun': lun, pool': pool, project': project, clone_proj': clone_proj, ret.status': ret.status, ret.data': ret.data}", "line_number": 920, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Setting props Props: %(props)s on Volume: %(lun)s of Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'props': kargs, lun': lun, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 948, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Snapshot: %(snapshot)s on Volume: %(lun)s to Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'snapshot': snapshot, lun': lun, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 971, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error getting initiator groups.'", "line_number": 984, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Property: %(property)s Type: %(type)s Description: %(description)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'property': schema['property'], type': schema['type'], description': schema['description'], ret.status': ret.status, ret.data': ret.data}", "line_number": 1015, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Verifying share: %(share)s on Project: %(project)s and Pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'share': share, project': project, pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 1063, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Snapshot: %(snapshot)s on share: %(share)s to Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'snapshot': snapshot, share': share, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 1089, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Deleting Snapshot: %(snapshot)s on Share: %(share)s to Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'snapshot': snapshot, share': share, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 1111, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error modifying Service: %(service)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'service': service, ret.status': ret.status, ret.data': ret.data}", "line_number": 1182, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Creating Share: %(name)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'name': share, ret.status': ret.status, ret.data': ret.data}", "line_number": 1206, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error editing share: %(share)s on Pool: %(pool)s Return code: %(ret.status)d Message: %(ret.data)s .' % {'share': share, pool': pool, ret.status': ret.status, ret.data': ret.data}", "line_number": 1221, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Error Getting Share: %(share)s on Pool: %(pool)s Project: %(project)s Return code: %(ret.status)d Message: %(ret.data)s.' % {'share': share, pool': pool, project': project, ret.status': ret.status, ret.data': ret.data}", "line_number": 1240, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Cannot create directory %s.'), dirname", "line_number": 1297, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssarest.py"}, {"msg": "Cannot delete cache volume: %(cachevol_name)s. It was updated at %(updated_at)s and currently has %(numclones)d volume instances.'), {'cachevol_name': cachevol_name, updated_at': cachevol_props['updated_at'], numclones': cache_vol['numclones']}", "line_number": 442, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssanfs.py"}, {"msg": "Fail to create cache volume %(volume)s. Error: %(err)s'), {'volume': cache_vol_name, err': six.text_type(exc)}", "line_number": 487, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssanfs.py"}, {"msg": "Volume %s doesn't exist on the ZFSSA backend.) % existing_vol_name", "line_number": 680, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssanfs.py"}, {"msg": "Failed to get size of existing volume: %(vol)s. Volume Manage failed.), {'vol': existing_vol_name}", "line_number": 722, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssanfs.py"}, {"msg": "Unknown if the volume: %s to be managed is already being managed by Cinder. Aborting manage volume. Please add 'cinder_managed' custom schema property to the volume and set its value to False. Alternatively, Set the value of cinder config policy 'zfssa_manage_policy' to 'loose' to remove this restriction.) % name", "line_number": 744, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssanfs.py"}, {"msg": "zfssa_manage_policy property needs to be set to strict' or 'loose'. Current value is: %s.) % lcfg.zfssa_manage_policy", "line_number": 250, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Error verifying clone size on Volume clone: %(clone)s Size: %(size)d on Snapshot: %(snapshot)s' % {'clone': volume['name'], size': volume['size'], snapshot': snapshot['name']}", "line_number": 415, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Cache volume %s does not have required properties') % cachevol_name", "line_number": 621, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Cache volume %(cache_vol)s does not have snapshot %(cache_snap)s.'), {'cache_vol': cachevol_name, cache_snap': cachesnap_name}", "line_number": 640, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Cannot delete cache volume: %(cachevol_name)s. It was updated at %(updated_at)s and currently has %(numclones)s volume instances.'), {'cachevol_name': cachevol_name, updated_at': updated_at, numclones': cache_snap['numclones']}", "line_number": 656, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Fail to create cache volume %(volume)s. Error: %(err)s'), {'volume': cache_vol['name'], err': six.text_type(exc)} lcfg.zfssa_cache_project, cache_vol['name']", "line_number": 718, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Failed to find iSCSI initiator group containing %(initiator)s.' % {'initiator': connector['initiator']}", "line_number": 746, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Unknown if the volume: %s to be managed is already being managed by Cinder. Aborting manage volume. Please add 'cinder_managed' custom schema property to the volume and set its value to False. Alternatively, set the value of cinder config policy 'zfssa_manage_policy' to 'loose' to remove this restriction.) % vol_name", "line_number": 1091, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Volume %s doesn't exist on the ZFSSA backend.) % existing_vol['name']", "line_number": 1114, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Source with host ip/name: %s not found on the target appliance for backend enabled volume migration, proceeding with default migration.'), driver.configuration.san_ip", "line_number": 1169, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zfssa/zfssaiscsi.py"}, {"msg": "Unknown SMBFS exception.", "line_number": 146, "code": 500, "name": "SmbfsException", "file_name": "cinder/cinder/volume/drivers/windows/smbfs.py"}, {"msg": "No mounted SMBFS shares found.", "line_number": 256, "code": 500, "name": "SmbfsNoSharesMounted", "file_name": "cinder/cinder/volume/drivers/windows/smbfs.py"}, {"msg": "There is no share which can host %(volume_size)sG.", "line_number": 274, "code": 500, "name": "SmbfsNoSuitableShareFound", "file_name": "cinder/cinder/volume/drivers/windows/smbfs.py"}, {"msg": "%(message)s", "line_number": 85, "code": 500, "name": "NexentaException", "file_name": "cinder/cinder/volume/drivers/nexenta/jsonrpc.py"}, {"msg": "No FC targets found'", "line_number": 69, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/falconstor/fc.py"}, {"msg": "FSS cinder volume driver not ready: Unable to determine session id.'", "line_number": 76, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "Pool is not available in the cinder configuration fields.'", "line_number": 81, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "The given pool info must include the storage pool and naming start with OpenStack-'", "line_number": 95, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "Unexpected exception during pool checking.'", "line_number": 99, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "The san_secondary_ip param is null.'", "line_number": 105, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "FSS do not support multipathing.'", "line_number": 109, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "Failed to create cg snapshot %(id)s due to %(reason)s.') % {'id': cgsnapshot_id, reason': six.text_type(e)}", "line_number": 337, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "Failed to delete cgsnapshot %(id)s due to %(reason)s.') % {'id': cgsnapshot_id, reason': six.text_type(e)}", "line_number": 357, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/fss_common.py"}, {"msg": "Unexpected exception during get pools info.'", "line_number": 147, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "self.FSS.get_fss_error_code(ret1['rc']", "line_number": 300, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "vid is null. FSS failed to delete volume.'", "line_number": 320, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "vid is null. FSS failed to create snapshot.'", "line_number": 330, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "vid is null. FSS failed to delete snapshot'", "line_number": 357, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "vid is null. FSS failed to create_volume_from_snapshot.'", "line_number": 395, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "rawtimestamp is null. FSS failed to create_volume_from_snapshot.'", "line_number": 409, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "gid is null. FSS failed to delete cgsnapshot.'", "line_number": 560, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No iocluster information in given data.'", "line_number": 596, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No target in given data.'", "line_number": 631, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No fcdevices in given data.'", "line_number": 636, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No data information in return info.'", "line_number": 671, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No iscsitargets in return info.'", "line_number": 675, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No FC initiator can be added to host.'", "line_number": 733, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No free FC initiator can be assigned to host.'", "line_number": 743, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No vdev information in given data'", "line_number": 784, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No clients in vdev information.'", "line_number": 788, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No vdev information in given data.'", "line_number": 902, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No vdev sizemb in given data.'", "line_number": 906, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "FSS get mirror sync timeout on vid: %s ') % vid", "line_number": 1088, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "FSS get timemark copy timeout on vid: %s') % vid", "line_number": 1221, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No target information in given data.'", "line_number": 1342, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No iscsidevices information in given data.'", "line_number": 1346, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No iscsitargets for target.'", "line_number": 1403, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "No fcdevices information in given data.'", "line_number": 1438, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "Can not find this error code:%s.') % err_id", "line_number": 1516, "code": 500, "name": "APIException", "file_name": "cinder/cinder/volume/drivers/falconstor/rest_proxy.py"}, {"msg": "Dsware config file not exists! fspythonapi.fsc_conf_file", "line_number": 91, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware get manager ip failed, volume provider_id is None!", "line_number": 117, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Query Dsware version failed! Retcode is %s.) % retcode", "line_number": 146, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware create volume failed! Result is: %s.) % result", "line_number": 157, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware: create volume from snap failed. Result: %s.) % result", "line_number": 179, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware: volume size can not be less than snapshot size.", "line_number": 188, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware fails to start cloning volume %s.') % volume_name", "line_number": 210, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Clone volume %s failed while waiting for success.') % volume_name", "line_number": 222, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Host attach volume failed!", "line_number": 329, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware detach volume from host failed: %s!) % volume_detach_result", "line_number": 347, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Query volume attach failed, result%s.) % result", "line_number": 366, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Attach volume to host failed in copy volume to image, retcode: %s.) % retcode", "line_number": 374, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Attach_volume failed.", "line_number": 381, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware query volume %s failed!) % volume_name", "line_number": 405, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware delete volume failed: %s!) % result", "line_number": 421, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware get snapshot failed!", "line_number": 442, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware Create Snapshot failed! Result: %s.) % res", "line_number": 452, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "volume-%s' % snapshot['volume_id'] LOG.error('Create Snapshot, but volume: %s not found!', vol_id", "line_number": 466, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware query Dsware version failed!", "line_number": 580, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware extend Volume failed! New size %(new_size)s should be greater than old size %(old_size)s! % {'new_size': new_size, old_size': volume['size']}", "line_number": 594, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "Dsware extend Volume failed! Result:%s.) % result", "line_number": 600, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fusionstorage/dsware.py"}, {"msg": "nec_ismcli_password nor nec_ismcli_privkey'", "line_number": 185, "code": 404, "name": "ParameterNotFound", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameProduct ID] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 404, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "SECTION[@namePool Detail Information] not found. line=%(line)d out=%(out)s') % {'line': xmlobj.sourceline, 'out': xml}", "line_number": 429, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePool No.(h] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 436, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePool Capacity] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 444, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameFree Pool Capacity] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 452, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameUsed Pool Capacity] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 461, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameActual Capacity] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 472, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLDN(h] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 496, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameOS Type] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 504, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLD Name] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 512, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLD Capacity] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 529, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameRPL Attribute] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 540, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePurpose] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 549, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePlatform] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 591, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLD Set Name] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 599, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameTarget Mode] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 607, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameTarget Name] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 616, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLUN(h] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 633, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePath] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 723, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@namePort No.(h] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 770, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameWWPN] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 782, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "UNIT[@nameLink Status] not found. line=%(line)d out=%(out)s') % {'line': section.sourceline, 'out': xml}", "line_number": 802, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_common.py"}, {"msg": "All Logical Disk Numbers are used. No more volumes can be created.'", "line_number": 105, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "No available pools found.'", "line_number": 120, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Invalid bind Logical Disk info.'", "line_number": 206, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Logical Disk number is duplicated (%s).') % errnum", "line_number": 233, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Failed to bind Logical Disk (%s).') % errnum", "line_number": 236, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Specified Logical Disk %s has been copied.') % rv_name", "line_number": 302, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Not enough pool capacity. pool_number=%(pool)d, size_increase=%(sizeinc)d') % {'pool': pool_number, sizeinc': size_increase * ld_count}", "line_number": 323, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Logical Disk has unbound already (name=%(name)s, id=%(id)s).') % {'name': ldname, 'id': volume['id']}", "line_number": 359, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "RPL Attribute Error. RPL Attribute  %s.' % ld['RPL Attribute']", "line_number": 378, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Logical Disk `%(name)s` has unbound already. volume_id = %(id)s.') % {'name': source_name, 'id': src_vref['id']}", "line_number": 417, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Cannot create clone volume. number of pairs reached 3. %(msg)s. ldname=%(ldname)s') % {'msg': msg, 'ldname': source_name}", "line_number": 430, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Specified Logical Disk %s is not available.') % ldname", "line_number": 492, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Specified Logical Disk %(ld)s has an invalid attribute (%(purpose)s).' % {'ld': ldname, 'purpose': ld['Purpose']}", "line_number": 504, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Failed to unregister Logical Disk from Logical Disk Set (%s)') % errnum", "line_number": 952, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Specified Logical Disk %s has been copied.') % ldname", "line_number": 1304, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Cannot create volume from snapshot, because the snapshot data does not exist. bvname=%(bvname)s, svname=%(svname)s') % {'bvname': mvname, 'svname': rvname}", "line_number": 1651, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/volume_helper.py"}, {"msg": "Command `%s` failed.') % command", "line_number": 91, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/cli.py"}, {"msg": "All Logical Disk numbers are used.'", "line_number": 214, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/nec/cli.py"}, {"msg": "l_update  {} if self.common.is_lun_mapped(volume['name']): return model_update iqn, trg_id, provider_auth = (self.common.create_iscsi_export (volume['name'], volume['id'] LOG.exception('Failed to remove_export.'", "line_number": 126, "code": 400, "name": "ExportFailure", "file_name": "cinder/cinder/volume/drivers/synology/synology_iscsi.py"}, {"msg": "4 data=self._encode_param(data), verify=self._ssl_verify result = {'http_status': http_status} reason = _('success' not found", "line_number": 368, "code": 500, "name": "MalformedResponse", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Failed to _get_node_uuid.'", "line_number": 431, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Malformed response to command %(cmd)s: %(reason)s", "line_number": 491, "code": 500, "name": "MalformedResponse", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Param [lun_name] is invalid.'", "line_number": 504, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Param [snapshot_uuid] is invalid.'", "line_number": 569, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Volume %(volume_id)s has no metadata with key %(metadata_key)s.", "line_number": 623, "code": 404, "name": "VolumeMetadataNotFound", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Snapshot %(snapshot_id)s has no metadata with key %(metadata_key)s.", "line_number": 627, "code": 404, "name": "SnapshotMetadataNotFound", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Param [identifier] is invalid.'", "line_number": 641, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Failed to get target_id of target [%s]') % trg_name", "line_number": 680, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "trg_id is invalid: %d.') % trg_id", "line_number": 689, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "pool [%s] is not writable') % self.config.synology_pool_name", "line_number": 826, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "DS version %s is not supperted') % firmware_version", "line_number": 859, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "usbstation is not supported'", "line_number": 880, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Storage Manager is not supported in DS'", "line_number": 885, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "iSCSI target feature is not supported in DS'", "line_number": 890, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "VAAI feature is not supported in DS'", "line_number": 895, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Snapshot feature is not supported in DS'", "line_number": 900, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Lun [%s] status is not normal') % volume['name']", "line_number": 1054, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Lun [%s] status is not normal.') % volume['name']", "line_number": 1092, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Failed to _modify_lun_name [%s].') % new_volume['name']", "line_number": 1118, "code": 500, "name": "VolumeMigrationFailed", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Volume [%(vol)s] snapshot [%(snapshot)s] status is not healthy.') % {'vol': snapshot['volume']['name'], snapshot': snapshot_uuid}", "line_number": 1154, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Volume [%(vol)s] snapshot [%(snapshot)s] status is not healthy.') % {'vol': snapshot['volume']['name'], snapshot': ds_snapshot_uuid}", "line_number": 1211, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Param [location] is invalid.'", "line_number": 1219, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "Param volume['provider_location'] is invalid.", "line_number": 1237, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/synology/synology_common.py"}, {"msg": "san_ip is not set.'", "line_number": 193, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Pools name is not set.'", "line_number": 233, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Infortrend CLI exception: %(err)s Param: %(param)s (Return Code: %(rc)s) (Output: %(out)s)", "line_number": 272, "code": 500, "name": "InfortrendCliException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Please create %(tier_levels)s tier in pool %(pool)s in advance!') % { tier_levels': support_tier_levels, pool': pool}", "line_number": 446, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Please create %(pool_list)s pool in advance!') % { pool_list': pool_list}", "line_number": 463, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Have not created %(tier_levels)s tier(s).') % { tier_levels': tier_levels}", "line_number": 557, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to create map on mcs, no channel can map.'", "line_number": 595, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get pool id with volume %(volume_id)s.') % { volume_id': volume['id']}", "line_number": 658, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "LUN number is out of bound on channel id: %(ch_id)s.') % {'ch_id': ch_id}", "line_number": 682, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Raid did not have MCS Channel.'", "line_number": 725, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "LUN map overflow on every channel.'", "line_number": 792, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Cannot get mcs_id by channel id: %(channel_id)s.') % { channel_id': channel_id}", "line_number": 825, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to delete SI for volume_id: %(volume_id)s because it has pair.') % { volume_id': volume_id}", "line_number": 886, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to delete volume for volume_id: %(volume_id)s because it has pair.') % { volume_id': volume_id}", "line_number": 905, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get Partition ID for volume %(volume_id)s.') % { volume_id': volume_id}", "line_number": 1102, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to delete snapshot for snapshot_id: %s because it has pair.') % snapshot_id", "line_number": 1153, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get Raid Snapshot ID from Snapshot %(snapshot_id)s.') % { snapshot_id': snapshot_id}", "line_number": 1160, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get Raid Snapshot ID from snapshot: %(snapshot_id)s.') % { snapshot_id': snapshot['id']}", "line_number": 1204, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Unknown protocol: %(protocol)s.') % { protocol': self.protocol}", "line_number": 1275, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get ip on Channel %(channel_id)s with volume: %(volume_id)s.') % { channel_id': channel_id, 'volume_id': volume_id}", "line_number": 1400, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Could not find iSCSI target for volume: %(volume_id)s.') % { volume_id': volume['id']}", "line_number": 1517, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Failed to get new part id in new pool: %(pool_id)s.') % { pool_id': dst_pool_id}", "line_number": 1673, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "Wait replica complete timeout.'", "line_number": 1717, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "The extraspec: %(extraspec)s is not valid.) % { extraspec': extraspec}", "line_number": 1729, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "The specified volume is mapped to a host.'", "line_number": 1758, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/infortrend/raidcmd_cli/common_cli.py"}, {"msg": "create_volume, volume: %(volume)s, volumename: %(volumename)s, eternus_pool: %(eternus_pool)s, Storage Configuration Service not found.' % {'volume': volume, volumename': volumename, eternus_pool': eternus_pool}", "line_number": 205, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_volume, volumename: %(volumename)s, poolname: %(eternus_pool)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'volumename': volumename, eternus_pool': eternus_pool, rc': rc, errordesc': errordesc}", "line_number": 247, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_volume, volume: %(volume)s, EnumerateInstances, cannot connect to ETERNUS.' % {'volume': volume}", "line_number": 262, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_volume_from_snapshot, Source Volume does not exist in ETERNUS.'", "line_number": 315, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_volume_from_snapshot, target volume instancename: %(volume_instancename)s, Get Instance Failed.' % {'volume_instancename': target_volume_instancename}", "line_number": 331, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_cloned_volume, Source Volume does not exist in ETERNUS.'", "line_number": 352, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_cloned_volume, target volume instancename: %(volume_instancename)s, Get Instance Failed.' % {'volume_instancename': target_volume_instancename}", "line_number": 367, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_create_local_cloned_volume, Replication Service not found.'", "line_number": 393, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_create_local_cloned_volume, volumename: %(volumename)s, sourcevolumename: %(sourcevolumename)s, source volume instance: %(source_volume)s, target volume instance: %(target_volume)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'volumename': t_volumename, sourcevolumename': s_volumename, source_volume': src_vol_instance.path, target_volume': tgt_vol_instance.path, rc': rc, errordesc': errordesc}", "line_number": 418, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_delete_volume, volumename: %(volumename)s, Storage Configuration Service not found.' % {'volumename': volumename}", "line_number": 515, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_delete_volume, volumename: %(volumename)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'volumename': volumename, rc': rc, errordesc': errordesc}", "line_number": 537, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_snapshot, volumename: %(s_volumename)s, source volume not found on ETERNUS.' % {'s_volumename': s_volumename}", "line_number": 571, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_snapshot, volumename: %(volumename)s, Replication Service not found.' % {'volumename': volumename}", "line_number": 579, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_snapshot, eternus_pool: %(eternus_pool)s, pool not found.' % {'eternus_pool': eternus_pool}", "line_number": 591, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "create_snapshot, snapshotname: %(snapshotname)s, source volume name: %(volumename)s, vol_instance.path: %(vol_instance)s, dest volume name: %(d_volumename)s, pool: %(pool)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'snapshotname': snapshotname, volumename': volumename, vol_instance': vol_instance.path, d_volumename': d_volumename, pool': pool, rc': rc, errordesc': errordesc}", "line_number": 632, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "initialize_connection, volume: %(volume)s, Volume not found.' % {'volume': volume['name']}", "line_number": 687, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "extend_volume, volumename: %(volumename)s, volume not found.' % {'volumename': volumename}", "line_number": 788, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "extend_volume, eternus_pool: %(eternus_pool)s, pool not found.' % {'eternus_pool': eternus_pool}", "line_number": 807, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "extend_volume, volume: %(volume)s, volumename: %(volumename)s, eternus_pool: %(eternus_pool)s, Storage Configuration Service not found.' % {'volume': volume, volumename': volumename, eternus_pool': eternus_pool}", "line_number": 825, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "extend_volume, volumename: %(volumename)s, Return code: %(rc)lu, Error: %(errordesc)s, PoolType: %(pooltype)s.' % {'volumename': volumename, rc': rc, errordesc': errordesc, pooltype': POOL_TYPE_dic[pooltype]}", "line_number": 864, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_fc, getting host-affinity from aglist/vol_instance failed, affinitygroup: %(ag)s, ReferenceNames, cannot connect to ETERNUS.' % {'ag': aglist[0]}", "line_number": 963, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_fc, getting host-affinity instance failed, volmap: %(volmap)s, GetInstance, cannot connect to ETERNUS.' % {'volmap': volmap}", "line_number": 983, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_iscsi, vol_instance: %(vol_instance)s, ReferenceNames: CIM_ProtocolControllerForUnit, cannot connect to ETERNUS.' % {'vol_instance': vol_instance}", "line_number": 1012, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_iscsi, Associators: FUJITSU_SAPAvailableForElement, cannot connect to ETERNUS.'", "line_number": 1031, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_iscsi, affinitygroup: %(ag)s, ReferenceNames, cannot connect to ETERNUS.' % {'ag': ag}", "line_number": 1051, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_mapdata_iscsi, volmap: %(volmap)s, GetInstance, cannot connect to ETERNUS.' % {'volmap': volmap}", "line_number": 1073, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_drvcfg, filename: %(filename)s, tagname: %(tagname)s, data is None!! Please edit driver configuration file and correct.' % {'filename': filename, tagname': tagname}", "line_number": 1123, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_eternus_connection, filename: %(filename)s, ip: %(ip)s, port: %(port)s, user: %(user)s, passwd: ****, url: %(url)s, FAILED!!.' % {'filename': filename, ip': ip, port': port, user': user, url': url}", "line_number": 1155, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_create_volume_name, id_code is None.'", "line_number": 1167, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_pool, eternus_pool:%(eternus_pool)s, EnumerateInstances, cannot connect to ETERNUS.' % {'eternus_pool': eternus_pool}", "line_number": 1199, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_eternus_service, classname: %(classname)s, EnumerateInstanceNames, cannot connect to ETERNUS.' % {'classname': classname}", "line_number": 1238, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_exec_eternus_service, classname: %(classname)s, InvokeMethod, cannot connect to ETERNUS.' % {'classname': classname}", "line_number": 1272, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_lun, volumename: %(volumename)s, EnumerateInstanceNames, cannot connect to ETERNUS.' % {'volumename': volumename}", "line_number": 1437, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_copysession, ReferenceNames, vol_instance: %(vol_instance_path)s, Cannot connect to ETERNUS.' % {'vol_instance_path': vol_instance.path}", "line_number": 1480, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_wait_for_copy_complete, cpsession: %(cpsession)s, copysession state is BROKEN.' % {'cpsession': cpsession}", "line_number": 1518, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_delete_copysession, copy session type is undefined! copy session: %(cpsession)s, copy type: %(copytype)s.' % {'cpsession': cpsession, copytype': copytype}", "line_number": 1549, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_delete_copysession, Cannot find Replication Service'", "line_number": 1556, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_delete_copysession, copysession: %(cpsession)s, operation: %(operation)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'cpsession': cpsession, operation': operation, rc': rc, errordesc': errordesc}", "line_number": 1593, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_target_port, EnumerateInstances, cannot connect to ETERNUS.'", "line_number": 1614, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_target_port, protcol: %(protocol)s, target_port not found.' % {'protocol': self.protocol}", "line_number": 1647, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_map_lun, vol_instance.path:%(vol)s, volumename: %(volumename)s, volume_uid: %(uid)s, initiator: %(initiator)s, target: %(tgt)s, aglist: %(aglist)s, Storage Configuration Service not found.' % {'vol': vol_instance.path, volumename': volumename, uid': volume_uid, initiator': initiatorlist, tgt': targetlist, aglist': aglist}", "line_number": 1685, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_initiator_names, connector: %(connector)s, initiator not found.' % {'connector': connector}", "line_number": 1789, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_affinity_group, connector: %(connector)s, EnumerateInstanceNames, cannot connect to ETERNUS.' % {'connector': connector}", "line_number": 1815, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_affinity_group, connector: %(connector)s, AssocNames: FUJITSU_ProtocolControllerForUnit, cannot connect to ETERNUS.' % {'connector': connector}", "line_number": 1832, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_find_affinity_group, connector: %(connector)s, Associators: FUJITSU_AuthorizedTarget, cannot connect to ETERNUS.' % {'connector': connector}", "line_number": 1853, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_unmap_lun, vol_instance.path: %(volume)s, AssociatorNames: CIM_ProtocolControllerForUnit, cannot connect to ETERNUS.' % {'volume': vol_instance.path}", "line_number": 1913, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_unmap_lun, vol_instance.path: %(volume)s, volumename: %(volumename)s, volume_uid: %(uid)s, aglist: %(aglist)s, Controller Configuration Service not found.' % {'vol': vol_instance.path, volumename': [volumename], uid': [volume_uid], aglist': aglist}", "line_number": 1935, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_unmap_lun, volumename: %(volumename)s, volume_uid: %(volume_uid)s, AffinityGroup: %(ag)s, Return code: %(rc)lu, Error: %(errordesc)s.' % {'volumename': volumename, volume_uid': volume_uid, ag': ag, rc': rc, errordesc': errordesc}", "line_number": 1976, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_eternus_iscsi_properties, iscsiip: %(iscsiip)s, EnumerateInstanceNames, cannot connect to ETERNUS.' % {'iscsiip': iscsiip_list}", "line_number": 2002, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_eternus_iscsi_properties, iscsiip: %(iscsiip)s, GetInstance, cannot connect to ETERNUS.' % {'iscsiip': iscsiip_list}", "line_number": 2021, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_eternus_iscsi_properties, iscsiip: %(iscsiip)s, AssociatorNames: CIM_BindsTo, cannot connect to ETERNUS.' % {'iscsiip': ip_address}", "line_number": 2040, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "_get_eternus_iscsi_properties, iscsiip list: %(iscsiip_list)s, iqn not found.' % {'iscsiip_list': iscsiip_list}", "line_number": 2077, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/fujitsu/eternus_dx_common.py"}, {"msg": "At least one valid iSCSI IP address must be set.'", "line_number": 261, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_iscsi.py"}, {"msg": "%s is not set') % flag", "line_number": 329, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "%s is not set and is required for the replication device to be valid.') % flag", "line_number": 337, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Invalid hpe3parclient version found (%(found)s). Version %(minimum)s or greater required. Run pip install --upgrade python-3parclient to upgrade the hpe3parclient.' % {'found': client_version, minimum': MIN_CLIENT_VERSION}", "line_number": 352, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Failed to Login to 3PAR (%(url)s) because %(err)s) % {'url': self._client_conf['hpe3par_api_url'], 'err': ex}", "line_number": 365, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Failed to Login to 3PAR (%(url)s) because %(err)s) % {'url': remote_array['hpe3par_api_url'], 'err': ex}", "line_number": 394, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "You must install hpe3parclient before using 3PAR drivers. Run pip install python-3parclient to install the hpe3parclient.'", "line_number": 420, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "CPG (%s) doesn't exist on array) % cpg_name", "line_number": 498, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Failed to get domain because CPG (%s) doesn't exist on array.) % cpg_name", "line_number": 507, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Virtual Volume Set %s does not exist.') % volume_set_name", "line_number": 626, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error creating the cgsnapshot: %s'), six.text_type(ex", "line_number": 670, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Virtual volume '%s' doesn't exist on array.) % target_vol_name", "line_number": 731, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Volume type ID '%s' is invalid.) % volume['volume_type_id']", "line_number": 763, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Managing of snapshots to failed-over volumes is not allowed.", "line_number": 830, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Snapshot '%s' doesn't exist on array.) % target_snap_name", "line_number": 842, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "The provided snapshot '%s' is not a snapshot of the provided volume.) % target_snap_name", "line_number": 850, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "CPG (%s) doesn't exist on array % cpg_name", "line_number": 1319, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Flash Cache Policy requires WSAPI version '%(fcache_version)s version '%(version)s' is installed.) % {'fcache_version': FLASH_CACHE_API_VERSION, version': self.API_VERSION}", "line_number": 1584, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "VV Set %s does not exist.') % vvs_name", "line_number": 1614, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Must specify a valid persona %(valid)s, value '%(persona)s' is invalid.) % {'valid': self.valid_persona_values, persona': persona_value}", "line_number": 1667, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Must specify a valid provisioning type %(valid)s, value '%(prov)s' is invalid.) % {'valid': self.valid_prov_values, prov': prov_value}", "line_number": 1758, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Dedup is a valid provisioning type, but requires WSAPI version '%(dedup_version)s version '%(version)s' is installed.) % {'dedup_version': DEDUP_API_VERSION, version': self.API_VERSION}", "line_number": 1775, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "The volume is currently busy on the 3PAR and cannot be deleted at this time. You can try again later.", "line_number": 2144, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Volume has a temporary snapshot that can't be deleted at this time.", "line_number": 2165, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Volume has children and cannot be deleted!", "line_number": 2171, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "(You cannot reduce size of the volume.  It must be greater than or equal to the snapshot.", "line_number": 2204, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Snapshot has a temporary snapshot that can't be deleted at this time.", "line_number": 2522, "code": 500, "name": "SnapshotIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Snapshot has children and cannot be deleted!", "line_number": 2528, "code": 500, "name": "SnapshotIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Invalid host: %(reason)s", "line_number": 2707, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Invalid 3PAR Domain: %(err)s", "line_number": 2725, "code": 500, "name": "Invalid3PARDomain", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Issuing a fail-over failed because replication is not properly configured.", "line_number": 2936, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "A valid secondary target MUST be specified in order to failover.", "line_number": 2954, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "The host is not ready to be failed back. Please resynchronize the volumes and resume replication on the 3PAR backends.", "line_number": 3011, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "The replication mode was not configured correctly in the volume type extra_specs. If replication:mode is periodic, replication:sync_period must also be specified and be between 300 and 31622400 seconds.", "line_number": 3339, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error creating the remote copy group: %s.) % six.text_type(ex", "line_number": 3376, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error adding the volume to the remote copy group: %s.) % six.text_type(ex", "line_number": 3396, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error setting the sync period for the remote copy group: %s.) % six.text_type(ex", "line_number": 3410, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error starting remote copy: %s.) % six.text_type(ex", "line_number": 3419, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "There was an error setting up a remote copy group on the 3PAR arrays: ('%s'). The volume will not be recognized as replication type.) % six.text_type(ex", "line_number": 3429, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "The failed-over volume could not be deleted: %s) % six.text_type(ex", "line_number": 3489, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_3par_common.py"}, {"msg": "Invalid hpelefthandclient version found ( %(found)s). Version %(minimum)s or greater required. Run 'pip install --upgrade python-lefthandclient' to upgrade the hpelefthandclient. % {'found': hpelefthandclient.version, minimum': MIN_CLIENT_VERSION}", "line_number": 349, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "six.text_type(ex Error: %(error)s, {'name': volume_name, error': error}", "line_number": 539, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "Could not find the parent volume for Snapshot '%s' on array.) % target_snap_name", "line_number": 1272, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "Invalid HPELeftHand API version found: %(found)s. Version %(minimum)s or greater required for manage/unmanage support.' % {'found': self.api_version, minimum': MIN_API_VERSION}", "line_number": 1455, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "The host is not ready to be failed back. Please resynchronize the volumes and resume replication on the LeftHand backends.", "line_number": 1638, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "The replication sync period must be at least %s seconds.) % self.MIN_REP_SYNC_PERIOD", "line_number": 1809, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "The retention count must be %s or less.) % self.MAX_RETENTION_COUNT", "line_number": 1830, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "The remote retention count must be %s or less.) % self.MAX_REMOTE_RETENTION_COUNT", "line_number": 1851, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "There was an error setting up a remote schedule on the LeftHand arrays: ('%s'). The volume will not be recognized as replication type.) % six.text_type(ex", "line_number": 1924, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hpe/hpe_lefthand_iscsi.py"}, {"msg": "can't handle both name and index in req", "line_number": 118, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Exception: %s') % six.text_type(exc", "line_number": 144, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Volume by this name already exists'", "line_number": 168, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Volume to Initiator Group mapping already exists", "line_number": 174, "code": 500, "name": "XtremIOAlreadyMappedError", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "System is busy, retry operation.", "line_number": 176, "code": 500, "name": "XtremIOArrayBusy", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Exceeded the limit of snapshots per volume", "line_number": 178, "code": 500, "name": "XtremIOSnapshotsLimitExceeded", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Bad response from XMS, %s') % response.text", "line_number": 181, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "Invalid XtremIO version %(cur)s, version %(min)s or up is required') % {'min': self.MIN_XMS_VERSION, cur': ver}", "line_number": 404, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "can't find the volume to extend", "line_number": 627, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "XtremIO not initialized correctly, no clusters found", "line_number": 974, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "XtremIO not configured correctly, no iscsi portals found", "line_number": 1045, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/dell_emc/xtremio.py"}, {"msg": "The PS array has closed the connection.", "line_number": 164, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/ps.py"}, {"msg": "SSH Command failed after '%(total_attempts)r attempts : '%(command)s') % {'total_attempts': total_attempts - attempts, command': command}", "line_number": 246, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/ps.py"}, {"msg": "Reference must contain source-id or source-name.'", "line_number": 628, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/ps.py"}, {"msg": "Cannot specify both protection domain name and protection domain id.", "line_number": 202, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "REST server IP must by specified.", "line_number": 206, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "REST server username must by specified.", "line_number": 210, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "REST server password must by specified.", "line_number": 214, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Path to REST server's certificate must be specified.", "line_number": 222, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Cannot specify both storage pool name and storage pool id.", "line_number": 227, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Must specify storage pool name or id.", "line_number": 231, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Must specify storage pools. Option: sio_storage_pools.", "line_number": 236, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Max over subscription is configured to %(ratio)1f while ScaleIO support up to %(sio_ratio)s.) % {'sio_ratio': SIO_MAX_OVERSUBSCRIPTION_RATIO, ratio': self.configuration.max_over_subscription_ratio}", "line_number": 245, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Illegal provisioning type. The supported provisioning types are 'thick' or 'thin'.", "line_number": 282, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Must specify protection domain name or protection domain id.", "line_number": 368, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Domain with name %s wasn't found. % self.protection_domain_name", "line_number": 393, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error getting domain id from name %(name)s: %(id)s. % {'name': self.protection_domain_name, id': domain_id['message']}", "line_number": 399, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Pool with name %(pool_name)s wasn't found in domain %(domain_id)s. % {'pool_name': pool_name, domain_id': domain_id}", "line_number": 427, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error getting pool id from name %(pool_name)s: %(err_msg)s. % {'pool_name': pool_name, err_msg': pool_id['message']}", "line_number": 434, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error creating volume: %s.) % response['message']", "line_number": 470, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Cannot create volume of size %s: not multiple of 8GB.) % size", "line_number": 488, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Failed creating snapshot for volume %(volname)s: %(response)s.) % {'volname': vol_id, response': response['message']}", "line_number": 513, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error extending volume %(vol)s: %(err)s. % {'vol': vol_id, err': response['message']}", "line_number": 636, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error deleting volume %(vol)s: %(err)s.) % {'vol': vol_id, err': response['message']}", "line_number": 728, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "None numeric BWS QoS limitation", "line_number": 790, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "None numeric IOPS QoS limitation", "line_number": 811, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error getting domain id from name %(name)s: %(err)s. % {'name': self.protection_domain_name, err': domain_id['message']}", "line_number": 877, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Pool with name %(pool)s wasn't found in domain %(domain)s. % {'pool': pool_name, domain': domain_id}", "line_number": 903, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error getting pool id from name %(pool)s: %(err)s. % {'pool': pool_name, err': pool_id['message']}", "line_number": 910, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Error renaming volume %(vol)s: %(err)s.) % {'vol': vol_id, 'err': response['message']}", "line_number": 1146, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Manage existing volume failed due to volume type mismatch: %(reason)s", "line_number": 1234, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Failed creating snapshot for group: %(response)s.) % {'response': response['message']}", "line_number": 1315, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/scaleio/driver.py"}, {"msg": "Storage Configuration Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 117, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Controller Configuration Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 148, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Element Composition Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 177, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Storage Relocation Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 206, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Storage HardwareId mgmt Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 234, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Replication Service not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 261, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Tier Policy Service not found for %(storageSystemName)s. % {'storageSystemName': storageSystemInstanceName}", "line_number": 291, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "StorageSystem %(array)s is not found. % {'array': arrayStr}", "line_number": 1532, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Replication Service Capability not found on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 1747, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "No Port Group elements found in config file.", "line_number": 2058, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Multiple SerialNumbers found, when only one was expected for this operation. Please change your EMC config file.", "line_number": 2106, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Volume %(deviceID)s not found. % {'deviceID': deviceID}", "line_number": 2181, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Unable to get target endpoints for hardwareId %(hardwareIdInstance)s. % {'hardwareIdInstance': hardwareinstancename}", "line_number": 2496, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Failed to retrieve all necessary SRDF information. Error received: %(ke)s.) % {'ke': six.text_type(ke)}", "line_number": 2894, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/utils.py"}, {"msg": "Failed to get, create or add volume %(volumeName)s to masking view %(maskingViewName)s. The error message received was %(errorMessage)s. % {'maskingViewName': maskingViewName, volumeName': volumeName, errorMessage': errorMessage}", "line_number": 194, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Failed to create hardware id(s) on %(storageSystemName)s. % {'storageSystemName': storageSystemName}", "line_number": 900, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "FC is the protocol but wwpns are not supplied by OpenStack.", "line_number": 937, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Error finding %(name)s. % {'name': name}", "line_number": 943, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Cannot create or find an storage group with name %(sgGroupName)s. % {'sgGroupName': maskingViewDict['sgGroupName']}", "line_number": 1200, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Rollback for Volume: %(volumeName)s has failed. Please contact your system administrator to manually return your volume to the default storage group for fast policy/ slo. % {'volumeName': rollbackDict['volumeName']}", "line_number": 1377, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Failed to create storage group %(storageGroupName)s.) % {'storageGroupName': storageGroupName}", "line_number": 2300, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/masking.py"}, {"msg": "Unable to get storage volume from job.", "line_number": 202, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/provision_v3.py"}, {"msg": "Error CreateGroupReplica: source: %(source)s target: %(target)s. Return code: %(rc)lu. Error: %(error)s. % {'source': srcGroupInstanceName, target': tgtGroupInstanceName, rc': rc, error': errordesc}", "line_number": 800, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/provision_v3.py"}, {"msg": "Cannot find Controller Configuration Service for storage system %(storage_system)s. % {'storage_system': storage_system}", "line_number": 537, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Cannot find Volume: %(volumename)s. Extend operation.  Exiting.... % {'volumename': volumeName}", "line_number": 784, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Your original size: %(originalVolumeSize)s GB is greater than: %(newSize)s GB. Only Extend is supported. Exiting... % {'originalVolumeSize': originalVolumeSize, newSize': newSize}", "line_number": 810, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "The requested size : %(requestedSize)s is not the same as resulting size: %(resultSize)s. % {'requestedSize': newSizeBits, resultSize': extendedVolumeSize}", "line_number": 854, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to remove: %(volumename)s. from the default storage group for FAST policy %(fastPolicyName)s. % {'volumename': volumeName, fastPolicyName': sourceFastPolicyName}", "line_number": 1426, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Cannot connect to ECOM server.", "line_number": 1708, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Pool %(poolNameInStr)s is not found. % {'poolNameInStr': poolNameInStr}", "line_number": 1741, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Storage system not found for pool %(poolNameInStr)s. % {'poolNameInStr': poolNameInStr}", "line_number": 1748, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Error finding %s.) % name", "line_number": 1873, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Unable to get target endpoints for any hardwareIds.", "line_number": 2007, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Configuration file %(configurationFile)s does not exist. % {'configurationFile': configurationFile}", "line_number": 2084, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Unable to get configuration information necessary to create a volume: %(errorMessage)s. % {'errorMessage': sys.exc_info()[1]}", "line_number": 2168, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "You must supply an array in your EMC configuration file.", "line_number": 2189, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Cannot get necessary pool or storage system information.", "line_number": 2195, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Rolling back %(volumeName)s by deleting it. % {'volumeName': volumeName} self.conn, storageConfigService, volumeInstance.path, volumeName, extraSpecs", "line_number": 2338, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to unbind volume %(volume)s % {'volume': volumeInstanceName}", "line_number": 2417, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Clone feature is not licensed on %(storageSystem)s. % {'storageSystem': storageSystem}", "line_number": 2519, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Volume %(name)s not found on the array. Cannot determine if there are volumes mapped. % {'name': volumename}", "line_number": 2787, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to create consistency group: %(cgName)s. % {'cgName': cgName}", "line_number": 2864, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to delete consistency group: %(cgName)s. % {'cgName': six.text_type(group['id'])}", "line_number": 2923, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to create snapshot for cg: %(cgName)s. % {'cgName': cgsnapshot['consistencygroup_id']}", "line_number": 3067, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to delete snapshot for cg: %(cgId)s. % {'cgId': cgsnapshot['consistencygroup_id']}", "line_number": 3163, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Either SLO: %(slo)s or workload %(workload)s is invalid. Examine previous error statement for valid values. % {'slo': extraSpecs[SLO], workload': extraSpecs[WORKLOAD]}", "line_number": 3332, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Volume: %(volumeName)s is not a concatenated volume. You can only perform extend on concatenated volume. Exiting... % {'volumeName': volumeName}", "line_number": 3472, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Error Creating unbound volume on an Extend operation.", "line_number": 3504, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "On an Extend Operation, error adding volume to composite volume: %(volumename)s. % {'volumename': volumeName}", "line_number": 3518, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to delete volume %(volumeName)s.) % {'volumeName': volumeName}", "line_number": 3960, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Cannot find Volume: %(id)s. unmanage operation.  Exiting... % {'id': volumeId}", "line_number": 4729, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "ConsistencyGroup %(consistencygroup_id)s could not be found.", "line_number": 4764, "code": 404, "name": "ConsistencyGroupNotFound", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to update consistency group: %(cgName)s. % {'cgName': group['id']}", "line_number": 4787, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Failed to create CG %(cgName)s from source %(cgSnapshot)s. % {'cgName': group['id'], cgSnapshot': source_id}", "line_number": 4896, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Unable to get volume type ids.", "line_number": 5160, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "There are multiple storage systems associated with consistencygroup_id: %(groupid)s. % {'groupid': group.id}", "line_number": 5172, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "We cannot support multiple volume types if multi pool functionality is not enabled.", "line_number": 5203, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Replication is not configured on backend: %(backend)s.) % {'backend': self.configuration.safe_get( volume_backend_name')}", "line_number": 5481, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Extending a replicated volume is not permitted on this backend. Please contact your administrator.", "line_number": 5772, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Remote replication failed with exception: %(e)s % {'e': six.text_type(e)}", "line_number": 5840, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/common.py"}, {"msg": "Cannot get iSCSI ipaddresses or multipath flag. Exception is %(ex)s. % {'ex': ex}", "line_number": 207, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/iscsi.py"}, {"msg": "Cannot find device number for volume %(volumeName)s. % {'volumeName': volume['name']}", "line_number": 253, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vmax/iscsi.py"}, {"msg": "Failed to migrate volume between source vol %(src)s and dest vol %(dst)s.) % { src': src_id, 'dst': dst_id}", "line_number": 59, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/taskflows.py"}, {"msg": "Failed to migrate volume %(src)s.) % {'src': src_id}", "line_number": 240, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/taskflows.py"}, {"msg": "Failed to create consistency group %s because VNX consistency group cannot accept compressed LUNs as members. % group['id']", "line_number": 274, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/utils.py"}, {"msg": "[%(group)s] Invalid %(protocol)s ports %(port)s specified for io_port_list.') % { group': self.config.config_group, protocol': self.config.storage_protocol, port': ','.join(invalid_port_strs)}", "line_number": 191, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "All the specified storage pools to be managed do not exist. Please check your configuration. Non-existent pools: %s') % ','.join(nonexistent_pools", "line_number": 641, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "Replication is configured, but no MirrorView/S enabler installed on VNX.'", "line_number": 1173, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "VNX Cinder driver does not support multiple replication targets.'", "line_number": 1194, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "Failed to find available iSCSI targets for %s.' % storage_group.name", "line_number": 1422, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "Host %s has no FC initiators') % connector['host']", "line_number": 1477, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "Failed to find available FC targets for %s.' % storage_group.name", "line_number": 1513, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/adapter.py"}, {"msg": "Volume %(name)s was created in VNX, but in %(state)s state.' % {'name': lun.name, state': lun_state}", "line_number": 56, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/client.py"}, {"msg": "storops Python library is not installed.'", "line_number": 87, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/client.py"}, {"msg": "The value %(value)s for key %(key)s in extra specs is invalid.) % {'key': key, 'value': value}", "line_number": 168, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "Can not set tiering policy for a deduplicated volume. Set the tiering policy on the pool where the deduplicated volume locates.", "line_number": 213, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "Compression Enabler is not installed. Can not create compressed volume.", "line_number": 219, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "Deduplication Enabler is not installed. Can not create deduplicated volume.", "line_number": 225, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "ThinProvisioning Enabler is not installed. Can not create thin volume.", "line_number": 233, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "FAST VP Enabler is not installed. Can not set tiering policy for the volume.", "line_number": 239, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "backend_id or san_ip cannot be empty for replication_device.'", "line_number": 410, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dell_emc/vnx/common.py"}, {"msg": "No storage pools to be managed exist. Please check your configuration. The available storage pools on the system are %s.') % array_pools", "line_number": 106, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/utils.py"}, {"msg": "Host %s doesn't have iSCSI initiator.) % connector['host']", "line_number": 114, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/utils.py"}, {"msg": "Host %s doesn't have FC initiators.) % connector['host']", "line_number": 123, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/utils.py"}, {"msg": "Backend LUN not found for Volume: %(volume_name)s.') % {'volume_name': volume.name}", "line_number": 244, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/adapter.py"}, {"msg": "There is no accessible iSCSI targets on the system.", "line_number": 527, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/adapter.py"}, {"msg": "There is no accessible fibre channel targets on the system.", "line_number": 573, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/adapter.py"}, {"msg": "Python package storops is not installed which is required to run Unity driver.'", "line_number": 40, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell_emc/unity/client.py"}, {"msg": "Only volumes managed by Openstack can be unmanaged.'", "line_number": 188, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/reduxio/rdx_iscsi_driver.py"}, {"msg": "Reduxio API Connection Exception", "line_number": 157, "code": 500, "name": "RdxAPIConnectionException", "file_name": "cinder/cinder/volume/drivers/reduxio/rdx_cli_api.py"}, {"msg": "Reduxio API Command Exception", "line_number": 206, "code": 500, "name": "RdxAPICommandException", "file_name": "cinder/cinder/volume/drivers/reduxio/rdx_cli_api.py"}, {"msg": "%s not set.) % param", "line_number": 275, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/vmware/vmdk.py"}, {"msg": "Delete snapshot of volume not supported in state: %s.) % snapshot.volume.status", "line_number": 688, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/volume/drivers/vmware/vmdk.py"}, {"msg": "Exception in _select_ds_for_volume: %s.), excep", "line_number": 1055, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/vmware/vmdk.py"}, {"msg": "Volume cannot be restored since it contains snapshots.", "line_number": 1692, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/volume/drivers/vmware/vmdk.py"}, {"msg": "Clone type '%(clone_type)s' is invalid; valid values are: '%(full_clone)s' and '%(linked_clone)s'.) % {'clone_type': clone_type, full_clone': volumeops.FULL_CLONE_TYPE, linked_clone': volumeops.LINKED_CLONE_TYPE}", "line_number": 2005, "code": 400, "name": "Invalid", "file_name": "cinder/cinder/volume/drivers/vmware/vmdk.py"}, {"msg": "Failed to connect to %(vendor_name)s Array %(host)s: %(err)s) % {'vendor_name': self.vendor_name, host': self.config.san_ip, err': six.text_type(ex)}", "line_number": 105, "code": 500, "name": "DotHillConnectionError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_common.py"}, {"msg": "Failed to log on %s Array (invalid login?).) % self.vendor_name", "line_number": 110, "code": 500, "name": "DotHillAuthenticationError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_common.py"}, {"msg": "%s configuration option is not set.') % flag", "line_number": 160, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_common.py"}, {"msg": "Unable to get stats for backend_name: %s) % self.backend_name", "line_number": 311, "code": 400, "name": "Invalid", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_common.py"}, {"msg": "Connector does not provide: %s) % connector_element", "line_number": 320, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_common.py"}, {"msg": "No active iSCSI portals with supplied iSCSI IPs", "line_number": 135, "code": 500, "name": "DotHillNotTargetPortal", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_iscsi.py"}, {"msg": "Cannot parse session key: %s) % e.msg", "line_number": 62, "code": 500, "name": "DotHillConnectionError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "%(message)s", "line_number": 98, "code": 500, "name": "DotHillConnectionError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "Failed to obtain MC session key", "line_number": 118, "code": 500, "name": "DotHillConnectionError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "%(message)s", "line_number": 123, "code": 500, "name": "DotHillAuthenticationError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "%s (%s % (tree.findtext(.//PROPERTY[@name'response']), return_code", "line_number": 145, "code": 500, "name": "DotHillRequestError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "Exception handling URL %(url)s: %(msg)s) % { url': url, 'msg': e}", "line_number": 215, "code": 500, "name": "DotHillConnectionError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "%(message)s", "line_number": 366, "code": 500, "name": "DotHillRequestError", "file_name": "cinder/cinder/volume/drivers/dothill/dothill_client.py"}, {"msg": "Failed to find fileset for path %(path)s, command output: %(cmdout)s.') % {'path': path, cmdout': out}", "line_number": 208, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Invalid storage pool %s requested.  Retype failed.') % new_pool", "line_number": 227, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Could not find GPFS cluster id: %s.') % setup_exception", "line_number": 342, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Could not find GPFS file system device: %s.') % setup_exception", "line_number": 350, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Invalid storage pool %s specificed.') % self._storage_pool", "line_number": 358, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Option gpfs_mount_point_base is not set correctly.'", "line_number": 378, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Option gpfs_images_dir is not set correctly.'", "line_number": 384, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "gpfs_images_share_mode is set to copy_on_write, but %(vol)s and %(img)s belong to different file systems.') % {'vol': self.configuration.gpfs_mount_point_base, img': self.configuration.gpfs_images_dir}", "line_number": 395, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "gpfs_images_share_mode is set to copy_on_write, but %(vol)s and %(img)s belong to different filesets.') % {'vol': self.configuration.gpfs_mount_point_base, img': self.configuration.gpfs_images_dir}", "line_number": 405, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Downlevel GPFS Cluster Detected.  GPFS Clone feature not enabled in cluster daemon level %(cur)s - must be at least at level %(min)s.') % {'cur': _gpfs_cluster_release_level, min': GPFS_CLONE_MIN_RELEASE}", "line_number": 415, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "%s must be an absolute path.') % directory", "line_number": 425, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "%s is not a directory.') % directory", "line_number": 430, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "The GPFS filesystem %(fs)s is not at the required release level.  Current level is %(cur)s, must be at least %(min)s.') % {'fs': filesystem, cur': fslevel, min': GPFS_CLONE_MIN_RELEASE}", "line_number": 445, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "%s cannot be accessed. Verify that GPFS is active and file system is mounted.') % path", "line_number": 1118, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Failed to create consistency group: %(cgid)s. Error: %(excmsg)s.') % {'cgid': group['id'], 'excmsg': six.text_type(e)}", "line_number": 1134, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Failed to link fileset for the share %(cgname)s. Error: %(excmsg)s.') % {'cgname': cgname, 'excmsg': six.text_type(e)}", "line_number": 1144, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Failed to set permissions for the consistency group %(cgname)s. Error: %(excmsg)s.') % {'cgname': cgname, 'excmsg': six.text_type(e)}", "line_number": 1154, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Failed to unlink fileset for consistency group %(cgname)s. Error: %(excmsg)s.') % {'cgname': cgname, 'excmsg': six.text_type(e)}", "line_number": 1176, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "Failed to delete fileset for consistency group %(cgname)s. Error: %(excmsg)s.') % {'cgname': cgname, 'excmsg': six.text_type(e)}", "line_number": 1185, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/gpfs.py"}, {"msg": "%(prot)s' is invalid for flashsystem_connection_protocol in config file. valid value(s) are %(enabled)s. % {'prot': params['protocol'], enabled': self._protocol}", "line_number": 104, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "iscsi_ip_address must be set in config file when using protocol 'iSCSI'.", "line_number": 110, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "No node found in I/O group %(gid)s for volume %(vol)s.' % {'gid': IO_group, 'vol': vdisk_name}", "line_number": 206, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "No config node found.'", "line_number": 335, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "State of node is wrong. Current state is %s.' % state", "line_number": 352, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "No ip address found.'", "line_number": 362, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_iscsi.py"}, {"msg": "Illegal value '%(prot)s' specified for flashsystem_connection_protocol: valid value(s) are %(enabled)s. % {'prot': params['protocol'], enabled': self._protocol}", "line_number": 105, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_fc.py"}, {"msg": "_get_vdisk_map_properties: No node found in I/O group %(gid)s for volume %(vol)s.' % {'gid': IO_group, 'vol': vdisk_name}", "line_number": 229, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_fc.py"}, {"msg": "_get_vdisk_map_properties: Could not get FC connection information for the host-volume connection. Is the host configured properly for FC connections?'", "line_number": 245, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_fc.py"}, {"msg": "CLI Exception output:\\n command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s' % {'cmd': ssh_cmd, 'out': e.stdout, err': e.stderr}", "line_number": 120, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "_create_host: Can not translate host name. Host name is not unicode or string.'", "line_number": 189, "code": 500, "name": "NoValidBackend", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Could not get system name.'", "line_number": 481, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "open_access_enabled is not off.'", "line_number": 491, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Unable to parse attributes.'", "line_number": 500, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Array does not exist or is offline. Current status of array is %s.' % attributes['status']", "line_number": 507, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Did not find expected column in %(fun)s: %(hdr)s.' % {'fun': function, 'hdr': header}", "line_number": 624, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "flashsystem_multihostmap_enabled is set to False, not allow multi host mapping. CMMVC6071E The VDisk-to-host mapping was not created because the VDisk is already mapped to a host.'", "line_number": 759, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Unable to access the backend storage via the path %(path)s.') % {'path': host_device}", "line_number": 863, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "_update_volume_stats: Could not get storage pool data.'", "line_number": 944, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "( _('check_for_setup_error: Unable to determine system name.'", "line_number": 1003, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "check_for_setup_error: Unable to determine system id.'", "line_number": 1006, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "%s is not set.') % flag", "line_number": 1012, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "check_for_setup_error: Password or SSH private key is required for authentication: set either san_password or san_private_key option.'", "line_number": 1020, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "create_volume_from_snapshot: Volume size is different from snapshot based volume.'", "line_number": 1107, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "create_cloned_volume: Source and destination size differ.'", "line_number": 1135, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/flashsystem_common.py"}, {"msg": "Param [san_password] is invalid.'", "line_number": 126, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Param [ds8k_host_type] must be one of: %(values)s.) % {'values': VALID_HOST_TYPES[1:-1]}", "line_number": 158, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "8.0.1 does not support bulk deletion of volumes, if you want to use this version of driver, please upgrade the CCL, and make sure the REST version is not lower than %s. % VALID_REST_VERSION_5_8_MIN", "line_number": 169, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "REST version %(invalid)s is lower than %(valid)s, please upgrade it in DS8K. % {'invalid': self.backend['rest_version'], valid': (VALID_REST_VERSION_5_7_MIN if '5.7' in self.backend['rest_version'] else VALID_REST_VERSION_5_8_MIN)}", "line_number": 183, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Param [connection_type] is invalid.'", "line_number": 197, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Param [san_clustername] is invalid.'", "line_number": 204, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "For 3390 volume, capacity can be in the range 1-65520(849KiB to 55.68GiB) cylinders, now it is %(gb)d GiB, equals to %(cyl)d cylinders.) % {'gb': gb, 'cyl': cyl}", "line_number": 860, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Param [ds8k_devadd_unitadd_mapping] is not provided, please provide the mapping between IODevice address and unit address.'", "line_number": 891, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "LCU %s in param [ds8k_devadd_unitadd_mapping] is invalid, it should be within 00-FF.') % lcu", "line_number": 901, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Invaild LCUs which first digit is %s, they are for fb volume.') % ', '.join(intersection", "line_number": 912, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "can not create lcu %(lcu)s, Exception %(e)s') % {'lcu': lcu, 'e': six.text_type(e)}", "line_number": 926, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_helper.py"}, {"msg": "Param [connection_type] %s is invalid. % connection_type", "line_number": 330, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "Param [replication_device] is invalid, Driver support only one replication target.", "line_number": 340, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "No pools found - make sure san_clustername is defined in the config file and that the pools exist on the storage.'", "line_number": 369, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "Backend %s is not initialized.' % self.configuration.volume_backend_name", "line_number": 373, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "The volume %s has been failed over, it is not suggested to extend it.) % lun.ds_id", "line_number": 529, "code": 500, "name": "CinderException", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "_create_group_from_src supports a group snapshot source or a group source, other sources can not be used.", "line_number": 811, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "Invalid secondary_backend_id specified. Valid backend id is %s.') % backend_id", "line_number": 940, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "Unable to failover host to %(id)s. Exception= %(ex)s % {'id': secondary_id, 'ex': six.text_type(e)}", "line_number": 971, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_proxy.py"}, {"msg": "Can not connect to the primary backend, please make sure it is back.", "line_number": 541, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/ibm/ibm_storage/ds8k_replication.py"}, {"msg": "CLI Exception output:\\n command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s.') % {'cmd': ssh_cmd, out': e.stdout, err': e.stderr}", "line_number": 144, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Expected no output from CLI command %(cmd)s, got %(out)s.') % {'cmd': ' '.join(ssh_cmd), 'out': out}", "line_number": 159, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to parse CLI output:\\n command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s.') % {'cmd': ssh_cmd, out': out, err': err}", "line_number": 174, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Must pass wwpn or host to lsfabric.'", "line_number": 254, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "mkvdiskhostmap error:\\n command: %(cmd)s\\n lun: %(lun)s\\n result_lun: %(result_lun)s') % {'cmd': ssh_cmd, lun': lun, result_lun': result_lun}", "line_number": 280, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "CLI Exception output:\\n command: %(cmd)s\\n stdout: %(out)s\\n stderr: %(err)s.') % {'cmd': ssh_cmd, out': out, err': err}", "line_number": 431, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Could not find key in output of command %(cmd)s: %(out)s.' % {'out': out, 'cmd': cmd}", "line_number": 603, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to get code level (%s).') % level", "line_number": 646, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Expected integer for node_count, svcinfo lsiogrp returned: %(node)s.') % {'node': iogrp['node_count']}", "line_number": 670, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Expected integer for node_count, svcinfo lsiogrp returned: %(node)s') % {'node': iogrp['node_count']}", "line_number": 686, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to find host %s.') % host_name", "line_number": 792, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_host: Host name is not unicode or string.'", "line_number": 909, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_host: No initiators or wwpns supplied.'", "line_number": 920, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "CommandLineHelper._wait_for_condition: %s timeout.' % testmethod.__name__", "line_number": 1189, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to find a vdisk copy in the expected pool.'", "line_number": 1272, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unexecpted mapping status %(status)s for mapping %(id)s. Attributes: %(attr)s.' % {'status': mapping_attrs['status'], id': fc_map_id, attr': mapping_attrs}", "line_number": 1321, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Mapping %(id)s prepare failed to complete within the allotted %(to)d seconds timeout. Terminating.' % {'id': fc_map_id, to': timeout}", "line_number": 1330, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unexpected mapping status %(status)s for mapping %(id)s. Attributes: %(attr)s.') % {'status': mapping_attrs['status'], id': fc_consistgrp, attr': mapping_attrs}", "line_number": 1421, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_copy: Source vdisk %(src)s does not exist.') % {'src': source}", "line_number": 1507, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Vdisk %(name)s not involved in mapping %(src)s -> %(tgt)s.') % {'name': name, 'src': source, 'tgt': target}", "line_number": 1580, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to delete the volume for volume %(vol)s. Exception: %(err)s.'), {'vol': vol_name, 'err': e}", "line_number": 1675, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_copy: Source vdisk %(src)s (%(src_id)s) does not exist.') % {'src': src, 'src_id': src_id}", "line_number": 1722, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "add_vdisk_copy failed: A copy of volume %s exists. Adding another copy would exceed the limit of 2 copies.') % vdisk", "line_number": 1754, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "add_vdisk_copy started without a vdisk copy in the expected pool.'", "line_number": 1761, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Expected single vdisk returned from lsvdisk when filtering on vdisk_UID.  %(count)s were returned.') % {'count': len(vdisks)}", "line_number": 1866, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Did not find the expected key %(key)s in %(fun)s: %(raw)s.') % {'key': key, 'fun': self.ssh_cmd, raw': self.raw}", "line_number": 1920, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unexpected CLI response: header/row mismatch. header: %(header)s, row: %(row)s.' % {'header': hds, row': row}", "line_number": 1957, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed getting details for pool %s.') % pool", "line_number": 2155, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to determine system name.'", "line_number": 2164, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to determine system id.'", "line_number": 2167, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "do_setup: No configured nodes.'", "line_number": 2173, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Error: delete non-replicate volume in failover mode is not allowed.'", "line_number": 2393, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_snapshot: get source volume failed.'", "line_number": 2412, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_volume_from_snapshot: snapshot %(snapshot_name)s size is %(snapshot_size)dGB and doesn't fit in target volume %(volume_name)s of size %(volume_size)dGB.) % {'snapshot_name': snapshot['name'], snapshot_size': snapshot['volume_size'], volume_name': volume['name'], volume_size': volume['size']}", "line_number": 2432, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_cloned_volume: source volume %(src_vol)s size is %(src_size)dGB and doesn't fit in target volume %(tgt_vol)s of size %(tgt_size)dGB.) % {'src_vol': src_volume['name'], src_size': src_volume['size'], tgt_vol': tgt_volume['name'], tgt_size': tgt_volume['size']}", "line_number": 2482, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "_extend_volume_op: Extending a volume with snapshots is not supported.'", "line_number": 2534, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to extend a volume with remote copy %(volume)s. Exception: %(err)s.') % {'volume': volume['id'], err': e}", "line_number": 2563, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_cloned_volume: Source and destination size differ.'", "line_number": 2657, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Replication is not properly enabled on backend.", "line_number": 2707, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Invalid secondary id %s.) % secondary_id", "line_number": 2721, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to failback due to primary is not reachable.", "line_number": 2740, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "_wait_replica_vol_ready: no rc-releationship is established for volume:%(volume)s. Please re-establish the rc-relationship and synchronize the volumes on backend storage.'), {'volume': volume}", "line_number": 2891, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Wait synchronize failed. volume: %(volume)s'), {'volume': volume}", "line_number": 2906, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to failover due to replication target is not reachable. error=%(ex)s), {'error': ex}", "line_number": 2929, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Replication is not properly configured on backend.", "line_number": 3046, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Invalid replication type %s.) % replication_type", "line_number": 3065, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Invalid secondary id %s.) % self._active_backend_id", "line_number": 3123, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to retype: it is not allowed to change replication type and io group at the same time.'", "line_number": 3235, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to retype: it is not allowed to change %(old_rep_type)s volume to %(new_rep_type)s volume.') % {'old_rep_type': old_rep_type, new_rep_type': new_rep_type}", "line_number": 3243, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to retype: Current action needs volume-copy, it is not allowed when new type is replication. Volume = %s') % volume['id']", "line_number": 3249, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Unable to retype:  A copy of volume %s exists. Retyping would exceed the limit of 2 copies.'), volume['id']", "line_number": 3272, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the volume to be managed is not in a valid I/O group.", "line_number": 3353, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the aux cluster for volume %(volume)s is %(aux_id)s. The configured cluster id is %(cfg_id)s) % {'volume': vdisk['name'], aux_id': rel_info['aux_cluster_id'], cfg_id': aux_info['system_id']}", "line_number": 3370, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the replication type of the volume to be managed is mismatch with the provided replication type.", "line_number": 3376, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the volume to be managed is thin, but the volume type chosen is thick.", "line_number": 3388, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the volume to be managed is thick, but the volume type chosen is thin.", "line_number": 3394, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the volume to be managed is not compress, but the volume type chosen is compress.", "line_number": 3401, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the volume to be managed is compress, but the volume type chosen is not compress.", "line_number": 3408, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to I/O group mismatch. The I/O group of the volume to be managed is %(vdisk_iogrp)s. I/O group of the chosen type is %(opt_iogrp)s.) % {'vdisk_iogrp': vdisk['IO_group_name'], opt_iogrp': opts['iogrp']}", "line_number": 3419, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed to manage existing volume due to the pool of the volume to be managed does not match the backend pool. Pool of the volume to be managed is %(vdisk_pool)s. Pool of the backend is %(backend_pool)s.) % {'vdisk_pool': vdisk['mdisk_grp_name'], backend_pool': self._get_backend_pools()}", "line_number": 3430, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "create_consistencygroup_from_src must be creating from a CG snapshot, or a source CG.", "line_number": 3550, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "get_pool: Failed to get attributes for volume %s') % volume['name']", "line_number": 3603, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Failed getting details for pool %s.') % pool", "line_number": 3687, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_common.py"}, {"msg": "Connector doesn't have required information: %(missing)s", "line_number": 109, "code": 500, "name": "InvalidConnectorException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_fc.py"}, {"msg": "initialize_connection: Failed to get attributes for volume %s.') % volume_name", "line_number": 148, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_fc.py"}, {"msg": "initialize_connection: No node found in I/O group %(gid)s for volume %(vol)s.') % {'gid': IO_group, 'vol': volume_name}", "line_number": 178, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_fc.py"}, {"msg": "terminate_connection: Failed to get host name from connector.'", "line_number": 279, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_fc.py"}, {"msg": "Unable to create replica clone for volume %s.'), vdisk", "line_number": 126, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "Unable to promote replica to primary for volume %s. No secondary copy available.'), volume['id']", "line_number": 139, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "Unable to set up mirror mode replication for %(vol)s. Exception: %(err)s.) % {'vol': vref['id'], err': e.message}", "line_number": 256, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "Unable to fail-over the volume %(id)s to the secondary back-end, error: %(error)s') % {id: vref['id'], error: e}", "line_number": 285, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "Unable to fail-back the volume:%(vol)s to the master back-end, error:%(error)s') % {vol: volume['name'], error: e}", "line_number": 301, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "Unable to establish the partnership with the Storwize cluster %s.'), remote_name", "line_number": 406, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/replication.py"}, {"msg": "_get_single_iscsi_data: Failed to get attributes for volume %s.') % volume_name", "line_number": 187, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_iscsi.py"}, {"msg": "_get_single_iscsi_data: Did not find expected column name in %(volume)s: %(key)s  %(error)s.'), {'volume': volume_name, 'key': e.args[0], error': e}", "line_number": 198, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_iscsi.py"}, {"msg": "_get_single_iscsi_data: No node found in I/O group %(gid)s for volume %(vol)s.') % { gid': IO_group, 'vol': volume_name}", "line_number": 218, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_iscsi.py"}, {"msg": "_get_multi_iscsi_data: Failed to get port ip because of exception: %s.') % ex", "line_number": 264, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_iscsi.py"}, {"msg": "_get_multi_iscsi_data: Failed to find valid port for volume %s.') % volume.name", "line_number": 291, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/ibm/storwize_svc/storwize_svc_iscsi.py"}, {"msg": "Configuration value %s is not set.') % flag", "line_number": 79, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/netapp/utils.py"}, {"msg": "Unsupported Data ONTAP version. Data ONTAP version 7.3.1 and above is supported.", "line_number": 89, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_7mode.py"}, {"msg": "Data ONTAP API version could not be determined.", "line_number": 92, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_7mode.py"}, {"msg": "NetApp Cinder Driver exception.", "line_number": 164, "code": 500, "name": "NetAppDriverException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/block_base.py"}, {"msg": "Pool is not available in the volume host field.", "line_number": 224, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/block_base.py"}, {"msg": "Object is not a NetApp LUN.", "line_number": 480, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/block_base.py"}, {"msg": "Invalid QoS specification detected while getting QoS policy for volume %s') % volume['id']", "line_number": 428, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/block_cmode.py"}, {"msg": "API version could not be determined.", "line_number": 119, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/block_7mode.py"}, {"msg": "Failed to extend volume %(name)s, Error msg: %(msg)s.) % {'name': volume['name'], msg': six.text_type(err)}", "line_number": 783, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_base.py"}, {"msg": "Failed to set QoS for existing volume %(name)s, Error msg: %(msg)s.) % {'name': volume['name'], msg': six.text_type(err)}", "line_number": 798, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_base.py"}, {"msg": "Failed to manage existing volume %(name)s, because rename operation failed: Error msg: %(msg)s.), {'name': existing_vol_ref['source-name'], msg': err}", "line_number": 1001, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_base.py"}, {"msg": "Failed to set QoS for existing volume %(name)s, Error msg: %(msg)s.) % {'name': existing_vol_ref['source-name'], msg': six.text_type(err)}", "line_number": 1009, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_base.py"}, {"msg": "Failed to manage existing volume %(name)s, because of error in getting volume size.), {'name': existing_vol_ref['source-name']}", "line_number": 1040, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/nfs_base.py"}, {"msg": "SnapMirror relationship is not quiesced.", "line_number": 321, "code": 500, "name": "NetAppDriverException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/utils/data_motion.py"}, {"msg": "Cannot failover to the same host as the primary.", "line_number": 610, "code": 400, "name": "InvalidReplicationTarget", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/utils/data_motion.py"}, {"msg": "Could not complete failover: %s) % e", "line_number": 636, "code": 500, "name": "UnableToFailOver", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/utils/data_motion.py"}, {"msg": "User not permitted to query Data ONTAP volumes.'", "line_number": 82, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/utils/capabilities.py"}, {"msg": "Failed to set CHAP authentication for target IQN %(iqn)s. Details: %(ex)s') % { iqn': iqn, ex': e,", "line_number": 271, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/client/client_cmode.py"}, {"msg": "snapshot_info.get_child_content('name' snapshot-instance-uuid' name': snapshot_name, instance_id': snapshot_id, volume_name': snapshot_volume, snapshot-info': { name': snapshot_name, volume': volume_name, }, snapshot-info': { name': None, volume': None, busy': None, snapshot-owners-list': { snapshot-owner': None, } }, snapshot_name, volume_name snapshot_info.get_child_content('busy')), Code: %(code)s. Reason: %(reason)s' name': snapshot_name, code': error_code, reason': error_reason, snapshot_name, volume_name):", "line_number": 1777, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/client/client_cmode.py"}, {"msg": "s.get_child_content('name')) and ( snapshot is not None): msg = _('Could not find unique snapshot %(snap)s on volume %(vol)s.' msg_args = {'snap': snapshot_name, 'vol': volume_name}", "line_number": 565, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/volume/drivers/netapp/dataontap/client/client_7mode.py"}, {"msg": "No valid backend was found. %(reason)s", "line_number": 262, "code": 500, "name": "NoValidBackend", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/library.py"}, {"msg": "Maximum number of snapshots allowed (%(allowed)d) exceeded", "line_number": 905, "code": 413, "name": "SnapshotLimitExceeded", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/library.py"}, {"msg": "cgsnapshot['consistencygroup_id'] es_cg['id'] if snap['id'] in es_snap_ids: seq_num = snap['pitSequenceNumber'] break", "line_number": 1839, "code": 404, "name": "CgSnapshotNotFound", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/library.py"}, {"msg": "cg['name']: return cg", "line_number": 1961, "code": 404, "name": "ConsistencyGroupNotFound", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/library.py"}, {"msg": "One of the required inputs from host, port or scheme was not found.'", "line_number": 62, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/client.py"}, {"msg": "vol.get(self.ID)):", "line_number": 463, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/volume/drivers/netapp/eseries/client.py"}, {"msg": "Could not find the IP address of the REST server.", "line_number": 133, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Could not find DISCO wsdl file.", "line_number": 138, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while creating volume [status] %(stat)s - [result] %(res)s.) % {'stat': six.text_type(status), 'res': result}", "line_number": 158, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while deleting volume [status] %(stat)s - [result] %(res)s.) % {'stat': six.text_type(status), 'res': result}", "line_number": 178, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while creating snapshot [status] %(stat)s - [result] %(res)s.) % {'stat': six.text_type(status), 'res': result}", "line_number": 205, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while deleting snapshot [status] %(stat)s - [result] %(res)s) % {'stat': six.text_type(status), 'res': result}", "line_number": 240, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error[%(stat)s - %(res)s] while restoring snapshot [%(snap_id)s] into volume [%(vol)s].) % {'stat': six.text_type(status), 'res': result, snap_id': snap_id, 'vol': vol_name}", "line_number": 265, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error[status] %(stat)s - [result] %(res)s] while getting volume id.) % {'stat': six.text_type(status), 'res': result}", "line_number": 286, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error[%(stat)s - %(res)s] while getting volume id.), {'stat': six.text_type(status), 'res': result}", "line_number": 336, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while extending volume [status] %(stat)s - [result] %(res)s.), {'stat': six.text_type(status), 'res': result}", "line_number": 388, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while getting disco information [%s].) % six.text_type(status", "line_number": 431, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "No source-id/source-name in existing_ref", "line_number": 460, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while getting volume details, [status] %(stat)s - [volume id] %(vol_id)s) % {'stat': six.text_type(src_vol['status']), vol_id': vol_id}", "line_number": 471, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while getting volume details with the name %(name)s: [status] %(stat)s) % {'name': vol_name, stat': src_vol['status']}", "line_number": 483, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Error while getting %(op)s details, returned code: %(status)s.) % {'op': operation, 'status': six.text_type(status)} LOG.error(msg", "line_number": 558, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Timeout while calling %s ) % operation", "line_number": 570, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Unknown operation %s.), operation", "line_number": 584, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Call returned a None object", "line_number": 591, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/disco/disco.py"}, {"msg": "Remote pool cannot be found.", "line_number": 45, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "Create hypermetro error. %s.') % err", "line_number": 71, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "Can't get volume id. Volume name: %s.) % volume_name", "line_number": 122, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "Can not add FC port to host.'", "line_number": 148, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "Map info is None due to array version not supporting hypermetro.'", "line_number": 166, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "The domain_name config in cinder.conf is wrong.", "line_number": 280, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "The CG does not exist on array.", "line_number": 333, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/hypermetro.py"}, {"msg": "Password has expired or has been reset, please change the password.", "line_number": 142, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Failed to login with all rest URLs.", "line_number": 148, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "%(err)s\\nresult: %(res)s.') % {'err': err_str, res': result}", "line_number": 198, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "%s data is not in result.') % msg", "line_number": 204, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Can not get pool info. pool: %s') % pool_name", "line_number": 284, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Can't find lun info on the array. volume: %(id)s, lun name: %(name)s.) % {'id': volume.id, 'name': volume_name}", "line_number": 335, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Failed to create hostgroup: %(name)s. Check if it exists on the array.' % {'name': hostgroup_name}", "line_number": 573, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Failed to create host: %(name)s. Please check if it exists on the array.'), {'name': host_name}", "line_number": 688, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Initiator %(ini)s has been added to another host %(host)s.) % {ini: ininame, host: item['PARENTNAME']}", "line_number": 801, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "Get iSCSI port info error, please check the target IP configured in huawei conf file.'", "line_number": 1168, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "get_iscsi_params: No valid port in portgroup. portgroup_id: %(id)s, please check it on storage.' % {'id': portgroup_id}", "line_number": 1310, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "get_iscsi_params: Failed to get target IP for initiator %(ini)s, please check config file.' % {'ini': initiator}", "line_number": 1351, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "msg Can't find valid IP from rest, please check it on storage.", "line_number": 1368, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "check_hypermetro_exist error.", "line_number": 1975, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "License is unavailable.'", "line_number": 2110, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/rest_client.py"}, {"msg": "wait_for_condition: %s timed out.' % func.__name__", "line_number": 63, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_utils.py"}, {"msg": "RestURL is not configured.", "line_number": 95, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "UserName is not configured.", "line_number": 106, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "UserPassword is not configured.", "line_number": 116, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "SAN product is not configured.", "line_number": 126, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "SAN protocol is not configured.", "line_number": 136, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "Invalid lun type %s is configured.) % lun_type", "line_number": 154, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "Invalid prefetch type '%s' is configured. PrefetchType must be in 0,1,2,3.) % prefetch_type", "line_number": 197, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "Storage pool is not configured.'", "line_number": 222, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_conf.py"}, {"msg": "No FC port connected to fabric.", "line_number": 125, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/fc_zone_helper.py"}, {"msg": "No initiator connected to fabric.", "line_number": 128, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/fc_zone_helper.py"}, {"msg": "No FC port can be used for LUN %s.) % lun_id", "line_number": 219, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/fc_zone_helper.py"}, {"msg": "Create replication pair failed. Error: %s.') % err", "line_number": 114, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/replication.py"}, {"msg": "Split replication failed.'", "line_number": 205, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/replication.py"}, {"msg": "We should not do switch over on primary array.'", "line_number": 243, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/replication.py"}, {"msg": "Wait synchronize failed. Running status: %s.') % info.get(constants.REPLICA_RUNNING_STATUS_KEY", "line_number": 271, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/replication.py"}, {"msg": "Get remote device info failed.'", "line_number": 483, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/replication.py"}, {"msg": "QoS config is wrong. %s must > 0.') % k", "line_number": 55, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/smartx.py"}, {"msg": "Illegal value specified for IOTYPE: 0, 1, or 2.'", "line_number": 60, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/smartx.py"}, {"msg": "QoS policy must specify for IOTYPE: 0, 1, or 2, QoS policy: %(qos_policy)s ') % {'qos_policy': qos}", "line_number": 70, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/smartx.py"}, {"msg": "QoS policy must specify for IOTYPE and another qos_specs, QoS policy: %(qos_policy)s.' % {'qos_policy': qos}", "line_number": 78, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/smartx.py"}, {"msg": "QoS policy upper_limit and lower_limit conflict, QoS policy: %(qos_policy)s.' % {'qos_policy': qos}", "line_number": 87, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/smartx.py"}, {"msg": "Configuration is not found.'", "line_number": 92, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Get active client failed.'", "line_number": 135, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't support qos on the array", "line_number": 364, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Create volume error. Because %s.') % six.text_type(err", "line_number": 377, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Hypermetro and Replication can not be used in the same volume_type.", "line_number": 423, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Lun migration error.", "line_number": 515, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Cannot find migration task.", "line_number": 520, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "create_volume_from_snapshot: Snapshot %(name)s does not exist.' % {'name': snapshotname}", "line_number": 736, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Volume %s does not exist on the array. % volume.id LOG.warning(msg", "line_number": 821, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't extend replication volume, volume: %(id)s) % {id: volume.id}", "line_number": 850, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "New size should be bigger than the real size from backend storage. realsize: %(oldsize)s, newsize: %(newsize)s.), {'oldsize': old_size, newsize': new_size}", "line_number": 871, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't get volume id from snapshot, snapshot: %(id)s % {id: snapshot.id}", "line_number": 889, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't support cache on the array, cache name is: %(name)s.) % {'name': new_cache_name}", "line_number": 1070, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't support partition on the array, partition name is: %(name)s.) % {'name': new_partition_name}", "line_number": 1079, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't support tier on the array.", "line_number": 1086, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't support qos on the array.", "line_number": 1093, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't find cache name on the array, cache name is: %(name)s.) % {'name': new_cache_name}", "line_number": 1108, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't find partition name on the array, partition name is: %(name)s.) % {'name': new_partition_name}", "line_number": 1121, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "An error occurred during the LUNcopy operation. LUNcopy name: %(luncopyname)s. LUNcopy status: %(luncopystatus)s. LUNcopy state: %(luncopystate)s.' % {'luncopyname': luncopy_id, luncopystatus': luncopy_info['status'], luncopystate': luncopy_info['state']},", "line_number": 1298, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Failed to get SplitMirror.", "line_number": 1355, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Failed to get target LUN of SplitMirror.", "line_number": 1362, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Failed to get migration task.", "line_number": 1382, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't import LUN %(lun_id)s to Cinder. LUN type mismatched.) % lun_id", "line_number": 1451, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't get volume id from snapshot, snapshot: %(id)s) % {id: snapshot.id}", "line_number": 1675, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Invalid secondary id %s.) % secondary_id", "line_number": 1829, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "build_ini_targ_map fails. %s') % err", "line_number": 2144, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Can't find the same host id from arrays.", "line_number": 2250, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/huawei/huawei_driver.py"}, {"msg": "Flexvisor failed to add volume %(id)s to group %(cgid)s.') % {'id': volume['id'], cgid': cgId}", "line_number": 811, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to remove volume %(id)s from group %(cgid)s.') % {'id': volume['id'], cgid': cgId}", "line_number": 834, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to get snapshot id of volume %(id)s from group %(vgid)s.') % {'id': volumeID, vgid': vgID}", "line_number": 851, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor could not find volume %(id)s snapshot in the group %(vgid)s snapshot %(vgsid)s.') % {'id': volumeID, 'vgid': vgID, vgsid': vgsnapshotID}", "line_number": 857, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Failed to create consistency group %(id)s:%(ret)s.') % {'id': group['id'], ret': ret}", "line_number": 884, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Failed to create consistency group %(id)s due to %(reason)s.') % {'id': group['id'], reason': six.text_type(e)}", "line_number": 891, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Failed to delete consistency group %(id)s due to %(reason)s.') % {'id': group['id'], reason': six.text_type(e)}", "line_number": 908, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Failed to create cg snapshot %(id)s due to %(reason)s.') % {'id': cgsnapshot['id'], reason': six.text_type(e)}", "line_number": 944, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Failed to delete cgsnapshot %(id)s due to %(reason)s.') % {'id': cgsnapshot['id'], reason': six.text_type(e)}", "line_number": 970, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Fexvisor failed to join the volume %(vol)s in the group %(group)s due to %(ret)s.) % {vol: vid, group: cgid, ret: six.text_type(e)}", "line_number": 1005, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Fexvisor failed to remove the volume %(vol)s in the group %(group)s due to %(ret)s.) % {vol: vid, group: cgid, ret: six.text_type(e)}", "line_number": 1017, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Pool is not available in the volume host fields.", "line_number": 1027, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create volume %(volume)s: %(status)s.') % {'volume': volume['id'], status': ret}", "line_number": 1048, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create volume %(id)s in the group %(vgid)s.') % { id': volume['id'], vgid': volume['consistencygroup_id']}", "line_number": 1074, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor unable to find the source volume %(id)s info.) % {'id': src_volumeID}", "line_number": 1091, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create volume from snapshot (failed to get event) %(id)s.') % {'id': snapshot['id']}", "line_number": 1136, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to spawn volume from snapshot %(id)s:%(status)s.') % {'id': snapshot['id'], status': ret}", "line_number": 1177, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to spawn volume from snapshot (failed to get event) %(id)s.') % {'id': snapshot['id']}", "line_number": 1182, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to clone volume %(id)s: %(status)s.') % {'id': src_vref['id'], status': ret}", "line_number": 1223, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor volume %(id)s failed to join group %(vgid)s.') % {'id': volume['id'], vgid': volume['consistencygroup_id']}", "line_number": 1247, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed deleting volume %(id)s: %(status)s.') % {'id': volume['id'], 'status': ret}", "line_number": 1279, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to extend volume (failed to get event) %(id)s.') % {'id': volume['id']}", "line_number": 1312, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create snapshot for volume %(id)s: %(status)s.') % {'id': snapshot['volume_id'], 'status': ret}", "line_number": 1341, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create snapshot for volume (failed to get event) %(id)s.') % {'id': snapshot['volume_id']}", "line_number": 1346, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to create snapshot for volume %(id)s: %(status)s.') % {'id': snapshot['volume_id'], status': ret}", "line_number": 1351, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to delete snapshot %(id)s: %(status)s.') % {'id': snapshot['id'], status': ret}", "line_number": 1368, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to delete snapshot (failed to get event) %(id)s.') % {'id': snapshot['id']}", "line_number": 1372, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to delete snapshot %(id)s: %(status)s.') % {'id': snapshot['id'], 'status': ret}", "line_number": 1379, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to get pool info %(id)s: %(status)s.') % {'id': poolid, 'status': ret}", "line_number": 1487, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dplcommon.py"}, {"msg": "Flexvisor failed to assign volume %(id)s: %(status)s.') % {'id': volumeid, status': status}", "line_number": 167, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor failed to assign volume %(id)s due to unable to query status by event id.') % {'id': volumeid}", "line_number": 173, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor assign volume failed:%(id)s: %(status)s.') % {'id': volumeid, 'status': ret}", "line_number": 177, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor failed to unassign volume %(id)s: %(status)s.') % {'id': volumeid, status': status}", "line_number": 197, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor failed to unassign volume (get event) %(id)s.') % {'id': volumeid}", "line_number": 201, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor unassign volume failed:%(id)s: %(status)s.') % {'id': volumeid, 'status': ret}", "line_number": 205, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Backend storage did not configure fiber channel target.'", "line_number": 252, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Invalid wwpns format %(wwpns)s') % \\ {'wwpns': connector['wwpns']}", "line_number": 267, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Invalid connection initialization response of volume %(name)s: %(output)s') % {'name': volume['name'], output': output}", "line_number": 319, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Invalid connection initialization response of volume %(name)s') % {'name': volume['name']}", "line_number": 335, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Faield to unassign %(volume)s') % (volume['id']", "line_number": 392, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_fc.py"}, {"msg": "Flexvisor failed to assign volume %(id)s: %(status)s.') % {'id': volume['id'], status': status}", "line_number": 62, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor failed to assign volume %(id)s due to unable to query status by event id.') % {'id': volume['id']}", "line_number": 68, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor assign volume failed.:%(id)s: %(status)s.') % {'id': volume['id'], 'status': ret}", "line_number": 72, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor failed to assign volume %(volume)s iqn %(iqn)s.') % {'volume': volume['id'], iqn': connector['initiator']}", "line_number": 110, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor failed to unassign volume %(id)s: %(status)s.') % {'id': volume['id'], status': status}", "line_number": 130, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor failed to unassign volume (get event) %(id)s.') % {'id': volume['id']}", "line_number": 134, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Flexvisor failed to unassign volume:%(id)s: %(status)s.') % {'id': volume['id'], 'status': ret}", "line_number": 141, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/prophetstor/dpl_iscsi.py"}, {"msg": "Async error: Unable to retrieve %(obj)s method %(method)s result' % {'obj': objectTypeName, 'method': methodname}", "line_number": 202, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "REST Async Error: Command not accepted.'", "line_number": 223, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Retryable Dell Exception encountered", "line_number": 236, "code": 500, "name": "DellDriverRetryableException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Unable to locate specified replay profiles %s ') % replay_profile_string", "line_number": 978, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Profile %s not found.') % name", "line_number": 1026, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Unable to complete failover of %s.' % name", "line_number": 1225, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Multiple copies of volume %s found.') % name", "line_number": 1268, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Error deleting volume %(ssn)s: %(volume)s') % { ssn': self.ssn, volume': provider_id}", "line_number": 1307, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Volume is attached to a server.  (%s)') % existing", "line_number": 2826, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Unable to manage volume %s') % existing", "line_number": 2833, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Unable to rename volume %(existing)s to %(newname)s') % { existing': scvolume['name'], newname': newname}", "line_number": 2886, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_api.py"}, {"msg": "Dell Cinder driver configuration error replication not supported with direct connect.'", "line_number": 133, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Dell Cinder driver configuration error replication_device %s not found') % replssn", "line_number": 148, "code": 400, "name": "InvalidHost", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Replication setup failure: replication:livevolume has been enabled but more than one replication target has been specified for this backend.'", "line_number": 212, "code": 500, "name": "ReplicationError", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Replication %(name)s to %(ssn)s failed.') % { name': volume['id'], ssn': targetdeviceid}", "line_number": 263, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "volume.get('_name_id' rspecs = self._get_replication_specs( self._get_volume_extra_specs(volume if rspecs['enabled']: if rspecs['live']: self._delete_live_volume(api, volume else: self._delete_replications(api, volume deleted = api.delete_volume(volume_name, provider_id with excutils.save_and_reraise_exception(): LOG.error('Failed to delete volume %s', volume_name", "line_number": 448, "code": 500, "name": "VolumeIsBusy", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Failed to create snapshot %s') % snapshot_id", "line_number": 472, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Failed to create volume %s') % volume_name", "line_number": 548, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Failed to delete snapshot %s') % snapshot_id", "line_number": 629, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to find volume %s') % volume_name", "line_number": 659, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to extend volume %s') % volume_name", "line_number": 683, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to create consistency group %s') % gid", "line_number": 801, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to update consistency group %s') % gid", "line_number": 868, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to snap Consistency Group %s') % cgid", "line_number": 904, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to delete Consistency Group snapshot %s' % snapshotid", "line_number": 929, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "Unable to retype %(specname)s, expected to receive current and requested %(spectype)s values. Value received: %(spec)s') % {'specname': specname, spectype': spectype, spec': spec}", "line_number": 1044, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "_get_unmanaged_replay: Cannot find volume id %s' % volume_name", "line_number": 1691, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "manage_existing_snapshot: Error managing existing replay %(ss)s on volume %(vol)s') % {'ss': screplay.get('description'), vol': volume_name}", "line_number": 1741, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "unmanage_snapshot: Cannot find volume id %s' % volume_name", "line_number": 1791, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "unmanage_snapshot: Cannot find snapshot named %s' % snapshot_id", "line_number": 1799, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "The Dell SC array does not support thawing a failed over replication. Please migrate volumes to an operational back-end or resolve primary system issues and fail back to reenable full functionality.'", "line_number": 1821, "code": 400, "name": "Invalid", "file_name": "cinder/cinder/volume/drivers/dell/dell_storagecenter_common.py"}, {"msg": "_call failed.'", "line_number": 132, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Controller IP is missing for ZTE driver.", "line_number": 189, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "User Name is missing for ZTE driver.", "line_number": 194, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "User Password is missing for ZTE driver.", "line_number": 199, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "No pool available.'", "line_number": 236, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "No pool available.'", "line_number": 282, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Delete volume failed. Clone name: %(name)s. Return code: %(ret)s.') % {'name': cloned_name, ret': ret['returncode']}", "line_number": 303, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Delete volume failed. Volume name: %(name)s. Return code: %(ret)s.') % {'name': volume_name, ret': ret['returncode']}", "line_number": 324, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_delete_cvol: Failed to delete clone vol. cloned name: %(name)s with Return code: %(ret)s.') % {'name': cloned_name, 'ret': ret['returncode']} if issnapshot: else:", "line_number": 351, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Failed to create snap.snap name: %(snapname)s, srvol name :%(srv)s with Return code: %(ret)s. ') % {'snapname': snapshot_name, srv': src_vol, ret': ret['returncode']}", "line_number": 392, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "self._translate_volume_name(snapshot['name'] volume_name, volume_size, zte_pub.ZTE_SNAPSHOT_MODE_RW zte_pub.ZTE_ERR_VAS_OBJECT_NOT_EXIST, zte_pub.ZTE_SUCCESS]: err_msg = (_('_delete_snapshot:Failed to delete snap. snap name: %(snapname)s with Return code: %(ret)s.') % {'snapname': snapshot_name, ret': ret['returncode']} if ret['returncode'] == zte_pub.ZTE_ERR_SNAP_EXIST_CLONE:", "line_number": 417, "code": 500, "name": "SnapshotIsBusy", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_extend_volume:Failed to extend vol.vol name: %(name)s with Return code: %(ret)s.') % {'name': volume_name, 'ret': ret['returncode']}", "line_number": 437, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_cloned_volume: Failed to clone vol. vol name: %(name)s with Return code: %(ret)s. ') % {'name': src_name, ret': ret['returncode']}", "line_number": 465, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Cloned volume size invalid. Clone size: %(cloned_size)s. Src volume size: %(volume_size)s.') % {'cloned_size': volume['size'], volume_size': src_vref['size']}", "line_number": 477, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "( _('Cloned volume size invalid. Clone size: %(cloned_size)s. Src volume size: %(volume_size)s.') % {'cloned_size': volume['size'], volume_size': snapshot['volume_size']}", "line_number": 507, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_get_lunid_from_vol:Get lunid from vol fail. Group name:%(name)s vol:%(vol)s with Return code: %(ret)s.') % {'name': map_group_name, vol': volume_name, ret': ret['returncode']}", "line_number": 584, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_get_group_lunnum:Get group info fail. Group name:%(name)s with Return code: %(ret)s.') % {'name': map_group_name, 'ret': ret['returncode']}", "line_number": 598, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_delete_group:Del group fail. Group name:%(name)s with Return code: %(ret)s.') % {'name': map_group_name, 'ret': ret['returncode']}", "line_number": 611, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "( _( _map_add_lun:fail to add vol to grp. group name:%(name)s lunid:%(lun)s vol:%(vol)s with Return code: %(ret)s') % {'name': map_group_name, lun': 0, vol': volume_name, ret': ret['returncode']}", "line_number": 634, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_get_sysinfo:get sys info failed. Return code: %(ret)s.'), {'ret': ret['returncode']}", "line_number": 651, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "get_Net_Cfg failed. Return code: %(ret)s.') % {'ret': ret['returncode']}", "line_number": 703, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Failed to get target ip or iqn for initiator %(ini)s, please check config file.') % {'ini': initiator_name}", "line_number": 741, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Can not get target ip address. '", "line_number": 780, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_get_target_ip_ctrl:get iscsi port list fail. with Return code: %(ret)s.') % {'ret': ret['returncode']}", "line_number": 809, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "( _('create host failed. Host name:%(name)s with Return code: %(ret)s.') % {'name': host_name, 'ret': ret['returncode']}", "line_number": 860, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_create_group:add port failed. Port name: %(name)s  with Return code: %(ret)s.') % {'name': initiator_name, ret': ret['returncode']}", "line_number": 877, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_create_group:add host to group failed. group name:%(name)s init name :%(init)s with Return code: %(ret)s.') % {'name': map_group_name, init': host_name, ret': ret['returncode']}", "line_number": 893, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "create group failed. Group name:%(name)s with Return code: %(ret)s.') % {'name': map_group_name, ret': ret['returncode']}", "line_number": 899, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_map_lun:delete lunid from group failed. group name:%(name)s lunid : %(lun)s with Return code: %(ret)s.') % {'name': map_group_name, 'lun': lunid, ret': ret['returncode']}", "line_number": 917, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_map_delete_host:get map group info failed. group name:%(name)s with Return code: %(ret)s.') % {'name': map_group_name, 'ret': ret['returncode']}", "line_number": 932, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "delete host from group failed. '", "line_number": 949, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_map_delete_host:get host info failed. host name:%(name)s with Return code: %(ret)s.') % {'name': initiator_name, ret': ret['returncode']}", "line_number": 959, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "delete port from host failed. host name:%(name)s, port name:%(port)s with Return code: %(ret)s.') % {'name': initiator_name, port': port_name, ret': ret['returncode']}", "line_number": 978, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "_map_delete_host: delete host failed. host name:%(name)s with Return code: %(ret)s') % {'name': initiator_name, ret': ret['returncode']}", "line_number": 990, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/zte/zte_ks.py"}, {"msg": "Bad response from Datera API", "line_number": 149, "code": 500, "name": "DateraAPIException", "file_name": "cinder/cinder/volume/drivers/datera/datera_common.py"}, {"msg": "Kaminario retryable exception: %(reason)s", "line_number": 87, "code": 500, "name": "KaminarioRetryableException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "Unable to import 'krest' python module.", "line_number": 142, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "K2 rest api version should be >= %s.) % K2_MIN_VERSION", "line_number": 163, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "K2 rest api version search failed.", "line_number": 168, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "replication_device %s is not set.') % attr", "line_number": 183, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "Unable to find K2peer in source K2:", "line_number": 247, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "Snapshot: %s search failed in K2.) % snap_name", "line_number": 581, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "K2 driver does not support clone of a attached volume. To get this done, create a snapshot from the attached volume and then create a volume from the snapshot.", "line_number": 630, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "Unable to find volume: %s from K2.) % vol_name", "line_number": 898, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_common.py"}, {"msg": "No wwpns found in host connector.", "line_number": 63, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_fc.py"}, {"msg": "Unable to get FC target wwpns from K2.", "line_number": 126, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_fc.py"}, {"msg": "Unable to get ISCSI IP address from K2.", "line_number": 106, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_iscsi.py"}, {"msg": "Unable to get target iqn from K2.", "line_number": 117, "code": 500, "name": "KaminarioCinderDriverException", "file_name": "cinder/cinder/volume/drivers/kaminario/kaminario_iscsi.py"}, {"msg": "VSP error occurred. %(message)s", "line_number": 172, "code": 500, "name": "VSPError", "file_name": "cinder/cinder/volume/drivers/hitachi/vsp_common.py"}, {"msg": "utils.extract_host(volume.host, level'pool' svc = self.config['services'][label] LOG.debug(_get_service: %(lbl)s->%(svc)s, {'lbl': label, 'svc': svc['export']['fs']} service = (svc['hdp'], svc['export']['path'], svc['export']['fs'] LOG.info(Available services: %(svc)s, {'svc': self.config['services'].keys()} LOG.error(No configuration found for service: %(lbl)s, {'lbl': label}", "line_number": 146, "code": 404, "name": "ParameterNotFound", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Invalid volume type: %(reason)s", "line_number": 295, "code": 400, "name": "InvalidVolumeType", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Section: %(svc_name)s') % {'svc_name': svc_name}", "line_number": 398, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing volume %(name)s, because rename operation failed: Error msg: %(msg)s.) % {'name': existing_vol_ref['source-name'], msg': six.text_type(err)}", "line_number": 596, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing volume %(volume)s because the chosen volume type %(vol_type)s does not have a service_label configured in its extra-specs and there is no pool configured with hnas_svcX_volume_type as default' in cinder.conf.) % {'volume': volume.id, vol_type': getattr(volume.volume_type, 'id', None)}", "line_number": 624, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing volume because the pool of the volume type chosen (%(pool)s) does not match the NFS share passed in the volume reference (%(share)s). % {'share': nfs_share, 'pool': pool}", "line_number": 633, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing volume because the pool of the volume type chosen (%(pool)s) does not match the pool of the host %(pool_host)s) % {'pool': pool_from_vol_type, pool_host': pool_from_host}", "line_number": 642, "code": 500, "name": "ManageExistingVolumeTypeMismatch", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing volume/snapshot %(name)s, because of error in getting its size.), {'name': existing_ref['source-name']}", "line_number": 710, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "Failed to manage existing snapshot %(name)s, because rename operation failed: Error msg: %(msg)s.) % {'name': existing_ref['source-name'], msg': six.text_type(err)}", "line_number": 789, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_nfs.py"}, {"msg": "The function on the storage is not supported.", "line_number": 531, "code": 500, "name": "VSPNotSupported", "file_name": "cinder/cinder/volume/drivers/hitachi/vsp_horcm.py"}, {"msg": "Device or resource is busy.", "line_number": 664, "code": 500, "name": "VSPBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/vsp_horcm.py"}, {"msg": "basic_lib.output_err( 600, cmd=cmds, ret=ret, out=stdout, err=stderr", "line_number": 108, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(648, resource'LDEV'", "line_number": 191, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(648, resource'GID'", "line_number": 267, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "Storage resource could not be found.", "line_number": 412, "code": 404, "name": "HBSDNotFound", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(648, resource'LUN (HLUN)'", "line_number": 513, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(659, gidinvalid_hgs_str", "line_number": 566, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(642, userauth_username", "line_number": 631, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(643, userauth_username", "line_number": 651, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(651", "line_number": 812, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(650, resource'IQN'", "line_number": 849, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(641", "line_number": 939, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(640, pool_idpool_id", "line_number": 970, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(615, copy_methodmethod, pvolpvol", "line_number": 1009, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err( 637, method='_wait_for_pair_status', timeout=timeout", "line_number": 1036, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(700, paramparam", "line_number": 1115, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(648, resourceparam", "line_number": 1119, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(702, ldevldev", "line_number": 1135, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(703, ldevldev", "line_number": 1147, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(704, ldevldev", "line_number": 1152, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_snm2.py"}, {"msg": "basic_lib.output_err(601, param'hitachi_horcm_numbers'", "line_number": 166, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err(601, paramparam", "line_number": 180, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err(601, param'hitachi_thin_pool_id'", "line_number": 183, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 601, param='hitachi_horcm_resource_lock_timeout'", "line_number": 189, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 637, method='_wait_for_delete_lun', timeout=LUN_DELETE_WAITTIME", "line_number": 596, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err(653, ldevldev", "line_number": 666, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 637, method='_wait_for_snap_status', timuout=timeout", "line_number": 887, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 615, copy_method=basic_lib.THIN, pvol=ldev", "line_number": 915, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 632, file=filename, ret=ex.exit_code, err=ex.stderr", "line_number": 976, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 637, method='_wait_for_pair_status', timout=timeout", "line_number": 1268, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err( 615, copy_method=basic_lib.FULL, pvol=pvol", "line_number": 1295, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "basic_lib.output_err(705, ldevldev", "line_number": 1485, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_horcm.py"}, {"msg": "The config parameter hnas_username is not set in the cinder.conf.", "line_number": 103, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "Credentials configuration parameters missing: you need to set hnas_password or hnas_ssh_private_key in the cinder.conf.", "line_number": 112, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "The config parameter hnas_mgmt_ip0 is not set in the cinder.conf.", "line_number": 118, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "The config parameter hnas_svc%(idx)s_hdp is not set in the cinder.conf. Note that you need to have at least one pool configured.) % {'idx': idx}", "line_number": 126, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "The config parameter hnas_svc%(idx)s_pool_name is not set in the cinder.conf. Note that you need to have at least one pool configured.) % {'idx': idx}", "line_number": 135, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "Can't find HNAS configurations on cinder.conf neither on the path %(xml)s.) % {'xml': xml_config_file}", "line_number": 186, "code": 404, "name": "ConfigNotFound", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "Error parsing config file: %(xml_config_file)s) % {'xml_config_file': xml_config_file}", "line_number": 200, "code": 404, "name": "ConfigNotFound", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "Missing authentication option (passw or private key file).", "line_number": 220, "code": 404, "name": "ConfigNotFound", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_utils.py"}, {"msg": "HBSD error occurs.", "line_number": 78, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_iscsi.py"}, {"msg": "basic_lib.output_err(660, descself.desc", "line_number": 107, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(602, meta'copy_method'", "line_number": 189, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(604", "line_number": 276, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(605", "line_number": 280, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(601, param'hitachi_pool_id'", "line_number": 284, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(601, param='hitachi_default_copy_method'", "line_number": 297, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(616, pvolpvol, svol=''.join(svol_list", "line_number": 374, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(660, descdesc", "line_number": 384, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(616, pvolpvol, svolldev", "line_number": 392, "code": 500, "name": "HBSDBusy", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(636", "line_number": 507, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(654, statusvolume['status']", "line_number": 581, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(624, type'volume', idsrc_ref['id']", "line_number": 588, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(624, type'volume', idsrc_vref['id']", "line_number": 638, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(617, type'volume', volume_id=volume['id']", "line_number": 649, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(624, type'snapshot', idsnapshot['id']", "line_number": 669, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(655, statussnapshot['status']", "line_number": 676, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(617, type'snapshot', volume_id=volume['id']", "line_number": 683, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(618, volume_idvolume['id']", "line_number": 706, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "basic_lib.output_err(701", "line_number": 782, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_common.py"}, {"msg": "%(message)s", "line_number": 87, "code": 500, "name": "HNASConnError", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_backend.py"}, {"msg": "FS label: %(fs_label)s') % {'fs_label': fs_label}", "line_number": 262, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/volume/drivers/hitachi/hnas_backend.py"}, {"msg": "basic_lib.output_err(601, paramsix.text_type(ex", "line_number": 82, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_fc.py"}, {"msg": "basic_lib.output_err(650, resource'HBA'", "line_number": 201, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_fc.py"}, {"msg": "basic_lib.output_err(619, volume_idvolume['id']", "line_number": 418, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_fc.py"}, {"msg": "basic_lib.output_err(649", "line_number": 457, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_fc.py"}, {"msg": "basic_lib.output_err(660, descdesc", "line_number": 506, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_fc.py"}, {"msg": "output_err(633, filefile", "line_number": 179, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_basiclib.py"}, {"msg": "output_err( 631, file=filename, ret=ex.exit_code, err=ex.stderr", "line_number": 190, "code": 500, "name": "HBSDError", "file_name": "cinder/cinder/volume/drivers/hitachi/hbsd_basiclib.py"}, {"msg": "scaleio_verify_server_certificate is True but scaleio_server_certificate_path is not provided in cinder configuration", "line_number": 87, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/scaleio.py"}, {"msg": "Client with ip %s wasn't found ) % sdc_ip", "line_number": 286, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/scaleio.py"}, {"msg": "Error getting sdc id from ip %(sdc_ip)s: %(sdc_id_message)s) % {'sdc_ip': sdc_ip, sdc_id_message': sdc_id[ message']}", "line_number": 293, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/scaleio.py"}, {"msg": "coprhd_hostname is not set in cinder configuration", "line_number": 184, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_port is not set in cinder configuration", "line_number": 188, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_username is not set in cinder configuration", "line_number": 192, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_password is not set in cinder configuration", "line_number": 196, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_tenant is not set in cinder configuration", "line_number": 200, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_project is not set in cinder configuration", "line_number": 204, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "coprhd_varray is not set in cinder configuration", "line_number": 208, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/coprhd/common.py"}, {"msg": "Failed to connect to array'", "line_number": 122, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "vmemclient python library not found'", "line_number": 138, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "CONCERTO version is not supported'", "line_number": 144, "code": 500, "name": "ViolinInvalidBackendConfig", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "No suitable storage pool found'", "line_number": 175, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Dedup luns cannot be extended'", "line_number": 247, "code": 500, "name": "VolumeDriverException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Backend service retry timeout hit: %(timeout)s sec", "line_number": 478, "code": 500, "name": "ViolinRequestRetryTimeout", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Failed to ensure snapshot resource area, could not locate volume for id %s) % volume_id", "line_number": 581, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Failed to create snapshot resource area on volume %(vol)s: %(res)s.) % {'vol': volume_id, 'res': res['msg']}", "line_number": 640, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Failed to create snapshot policy on volume %(vol)s: %(res)s.) % {'vol': volume_id, 'res': res['msg']}", "line_number": 668, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Cannot delete LUN %s while snapshots exist.) % volume_id", "line_number": 683, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Unable to delete snapshot policy on volume %s.) % volume_id", "line_number": 699, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Backend reports: item already exists", "line_number": 850, "code": 500, "name": "ViolinBackendErrExists", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Backend does not have a suitable storage pool.", "line_number": 929, "code": 404, "name": "ViolinResourceNotFound", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Backend reports: %(message)s", "line_number": 1059, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Lun copy currently only supported for thick luns'", "line_number": 1090, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_common.py"}, {"msg": "Volume backend config is invalid: %(reason)s", "line_number": 95, "code": 500, "name": "ViolinInvalidBackendConfig", "file_name": "cinder/cinder/volume/drivers/violin/v7000_fcp.py"}, {"msg": "No iSCSI IPs configured on SAN gateway'", "line_number": 97, "code": 500, "name": "ViolinInvalidBackendConfig", "file_name": "cinder/cinder/volume/drivers/violin/v7000_iscsi.py"}, {"msg": "Failed to create iscsi client", "line_number": 164, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_iscsi.py"}, {"msg": "Failed to create iscsi target", "line_number": 174, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_iscsi.py"}, {"msg": "LUN unexport failed", "line_number": 281, "code": 500, "name": "ViolinBackendErr", "file_name": "cinder/cinder/volume/drivers/violin/v7000_iscsi.py"}, {"msg": "User does not have admin privileges", "line_number": 176, "code": 403, "name": "AdminRequired", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "None, backend_match_levelNone, **filters): Get a service that matches the criteria. A possible filter is is_up=True and it will filter nodes that are down. :param service_id: Id of the service. :param filters: Filters for the query in the form of key/value. :param backend_match_level: 'pool', 'backend', or 'host' for host and cluster filters (as defined in _filter_host method :raise ServiceNotFound: If service doesn't exist.  query = _service_query(context, backend_match_level=backend_match_level, id=service_id, **filters service = None if not query else query.first( if not service: serv_id = service_id or filters.get('topic') or filters.get('binary' host=filters.get('host' return service Get all services that match the criteria. A possible filter is is_up=True and it will filter nodes that are down. :param filters: Filters for the query in the form of key/value. :param backend_match_level: 'pool', 'backend', or 'host' for host and cluster filters (as defined in _filter_host method  query = _service_query(context, backend_match_level=backend_match_level, **filters return [] if not query else query.all( service_ref = models.Service( service_ref.update(values if not CONF.enable_new_services: service_ref.disabled = True session = get_session( with session.begin(): service_ref.save(session return service_ref if 'disabled' in values: values = values.copy( values['modified_at'] = values.get('modified_at', timeutils.utcnow( values['updated_at'] = values.get('updated_at', literal_column('updated_at' query = _service_query(context, id=service_id result = query.update(values if not result:", "line_number": 567, "code": 404, "name": "ServiceNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id or six.text_type(filters", "line_number": 652, "code": 404, "name": "ClusterNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id", "line_number": 710, "code": 404, "name": "ClusterNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id", "line_number": 728, "code": 400, "name": "ClusterHasHosts", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "project_id).\\", "line_number": 815, "code": 404, "name": "ProjectQuotaNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "class_name).\\", "line_number": 920, "code": 404, "name": "QuotaClassNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "project_id).\\", "line_number": 1034, "code": 404, "name": "QuotaUsageNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "volume_id).\\ deleted_at': now, updated_at': literal_column('updated_at')} **filters): partial_rename, filters session=session attach_status': fields.VolumeAttachStatus.DETACHED, detach_time': now, deleted': True, deleted_at': now, updated_at': literal_column('updated_at'), session=session context, volume_id, session=session not (volume_ref.status == 'uploading')) or volume_ref.migration_status in ('success', 'error')): volume_updates['status'] = 'available fields.VolumeAttachStatus.DETACHED fields.VolumeAttachStatus.ATTACHED joined_load=True): volume in the current project or all projects the other models, which join the volume model in the database. Currently, the False value for this parameter is specially for the case of updating database during volume migration project_only=project_only project_only=project_only).\\ project_only=project_only).\\ joined_load=joined_load", "line_number": 1773, "code": 404, "name": "VolumeNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Volume attachment could not be found with filter: %(filter)s .", "line_number": 1812, "code": 404, "name": "VolumeAttachmentNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Attachment %(attachment_id)s has no key %(specs_key)s.", "line_number": 1970, "code": 404, "name": "AttachmentSpecsNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Unknown sort direction, must be 'desc' or 'asc'.", "line_number": 2366, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Sort direction array size exceeds sort key array size.", "line_number": 2377, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "snapshot_id).\\ deleted_at': utcnow, updated_at': literal_column('updated_at')} project_only=True).\\", "line_number": 2857, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "group_snapshot_id).\\ limit=None, sort_keys=None, sort_dirs=None, offset=None): next page of results to return paired with corresponding item in sort_dirs paired with corresponding item in sort_keys sort_keys, sort_dirs, filters, offset, models.Snapshot session=None): func.count(models.Snapshot.id), func.sum(models.Snapshot.volume_size), read_deleted=no, session=session).\\ project_id=None): models.Snapshot.deleted_at > begin", "line_number": 3124, "code": 404, "name": "SnapshotNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "str(uuid.uuid4( _volume_type_get_by_name(context, values['name'], session pass _volume_type_get(context, values['id'], session", "line_number": 3243, "code": 500, "name": "VolumeTypeExists", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "six.text_type(uuid.uuid4( _group_type_get_by_name(context, values['name'], session pass _group_type_get(context, values['id'], session", "line_number": 3285, "code": 500, "name": "GroupTypeExists", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id", "line_number": 3589, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id).\\ expected_fields=None): expected_fields", "line_number": 3628, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id).\\", "line_number": 3702, "code": 404, "name": "VolumeTypeNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id).\\", "line_number": 3719, "code": 404, "name": "GroupTypeNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "name).\\", "line_number": 3732, "code": 404, "name": "VolumeTypeNotFoundByName", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "name).\\", "line_number": 3745, "code": 404, "name": "GroupTypeNotFoundByName", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id).count( session=session).filter(", "line_number": 3902, "code": 500, "name": "VolumeTypeInUse", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "id).all(", "line_number": 3933, "code": 500, "name": "GroupTypeInUse", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Volume type access not found for %(volume_type_id)s / %(project_id)s combination.", "line_number": 4076, "code": 404, "name": "VolumeTypeAccessNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Group type access not found for %(group_type_id)s / %(project_id)s combination.", "line_number": 4090, "code": 404, "name": "GroupTypeAccessNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Group Type %(group_type_id)s has no specs with key %(group_specs_key)s.", "line_number": 4208, "code": 404, "name": "GroupTypeSpecsNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "specs_root.value read_deleted=read_deleted, session=session). \\", "line_number": 4309, "code": 404, "name": "QoSSpecsNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Volume type encryption for type %(type_id)s does not exist.", "line_number": 4590, "code": 404, "name": "VolumeTypeEncryptionNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "volume_type_id).update(values", "line_number": 4622, "code": 404, "name": "VolumeTypeEncryptionNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "volume_id).\\", "line_number": 4696, "code": 404, "name": "GlanceMetadataNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "snapshot_id).\\", "line_number": 4718, "code": 404, "name": "GlanceMetadataNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Transfer %(transfer_id)s: Volume id %(volume_id)s expected in available state.' % {'transfer_id': transfer_id, 'volume_id': volume_id}", "line_number": 5096, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Transfer %(transfer_id)s: Volume id %(volume_id)s expected in awaiting-transfer state.' % {'transfer_id': transfer_id, 'volume_id': volume_id}", "line_number": 5148, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "None, cg_idNone): cg_model = models.ConsistencyGroup values = values.copy( if not values.get('id'): values['id'] = str(uuid.uuid4( session = get_session( with session.begin(): if cg_snap_id: conditions = [cg_model.id == models.Cgsnapshot.consistencygroup_id, models.Cgsnapshot.id == cg_snap_id] elif cg_id: conditions = [cg_model.id == cg_id] else: conditions = None if conditions: # We don't want duplicated field values names = ['volume_type_id', 'availability_zone', 'host', cluster_name'] for name in names: values.pop(name, None fields = [getattr(cg_model, name) for name in names] fields.extend(bindparam(k, v) for k, v in values.items( sel = session.query(*fields).filter(*conditions names.extend(values.keys( insert_stmt = cg_model.__table__.insert().from_select(names, sel result = session.execute(insert_stmt # If we couldn't insert the row because of the conditions raise # the right exception if not result.rowcount: if cg_id: consistencygroup_id=cg_id", "line_number": 5318, "code": 404, "name": "CgSnapshotNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "cg_creating_from_src must be called with cg_id or cgsnapshot_id parameter.'", "line_number": 5451, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Group %(group_id)s could not be found.", "line_number": 5641, "code": 404, "name": "GroupNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "GroupSnapshot %(group_snapshot_id)s could not be found.", "line_number": 5643, "code": 404, "name": "GroupSnapshotNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Group volume type mapping for %(group_id)s / %(volume_type_id)s combination already exists.", "line_number": 5679, "code": 500, "name": "GroupVolumeTypeMappingExists", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "group_id,", "line_number": 5704, "code": 404, "name": "GroupNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "group_creating_from_src must be called with group_id or group_snapshot_id parameter.'", "line_number": 5760, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Source CG cannot be empty or in 'creating' or updating' state. No cgsnapshot will be created.", "line_number": 5871, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Source group cannot be empty or in 'creating' or updating' state. No group snapshot will be created.", "line_number": 6017, "code": 400, "name": "InvalidGroup", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Worker with %s could not be found.", "line_number": 6454, "code": 404, "name": "WorkerNotFound", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "Programming error in Cinder: %(reason)s", "line_number": 6652, "code": 500, "name": "ProgrammingError", "file_name": "cinder/cinder/db/sqlalchemy/api.py"}, {"msg": "WARNING_MSG % { count': count, table': table.name,", "line_number": 38, "code": 400, "name": "ValidationError", "file_name": "cinder/cinder/db/sqlalchemy/migrate_repo/versions/097_enforce_ocata_online_migrations.py"}, {"msg": "WARNING_MSG % { count': count, table': 'messages',", "line_number": 50, "code": 400, "name": "ValidationError", "file_name": "cinder/cinder/db/sqlalchemy/migrate_repo/versions/097_enforce_ocata_online_migrations.py"}, {"msg": "Backup status must be available or error'", "line_number": 99, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "force delete'", "line_number": 103, "code": 405, "name": "NotSupportedOperation", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Incremental backups exist for this backup.'", "line_number": 110, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "all_tenants must be a boolean, got '%s'.) % all_tenants", "line_number": 127, "code": 400, "name": "InvalidParameterValue", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Volume %(vol1)s does not match with snapshot.volume_id %(vol2)s.' % {'vol1': volume_id, vol2': snapshot.volume_id}", "line_number": 217, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Volume to be backed up must be available or in-use, but the current status is %s.' % volume['status']", "line_number": 222, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Backing up an in-use volume must use the force flag.'", "line_number": 226, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Snapshot to be backed up must be available, but the current status is %s.' % snapshot['status']", "line_number": 231, "code": 400, "name": "InvalidSnapshot", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "No backups available to do an incremental backup.'", "line_number": 280, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "The parent backup must be available for incremental backup.'", "line_number": 288, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Backup status must be available'", "line_number": 342, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Backup to be restored has invalid size'", "line_number": 347, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Volume to be restored to must be available'", "line_number": 373, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "volume size %(volume_size)d is too small to restore backup of size %(size)d.') % {'volume_size': volume['size'], 'size': size}", "line_number": 381, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Backup status must be available and not %s.') % backup['status']", "line_number": 440, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Provided backup record is missing an id'", "line_number": 482, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Backup already exists in database.'", "line_number": 503, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/api.py"}, {"msg": "Failed to identify volume backend.", "line_number": 108, "code": 404, "name": "BackupFailedToGetVolumeBackend", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Create backup aborted, expected volume status %(expected_status)s but got %(actual_status)s.') % { expected_status': expected_status, actual_status': actual_status,", "line_number": 380, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Create backup aborted, expected backup status %(expected_status)s but got %(actual_status)s.') % { expected_status': expected_status, actual_status': actual_status,", "line_number": 392, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Restore backup aborted, expected volume status %(expected_status)s but got %(actual_status)s.') % {'expected_status': expected_status, actual_status': actual_status}", "line_number": 477, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Restore backup aborted: expected backup status %(expected_status)s but got %(actual_status)s.') % {'expected_status': expected_status, actual_status': actual_status}", "line_number": 488, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Restore backup aborted, the backup service currently configured [%(configured_service)s] is not the backup service that was used to create this backup [%(backup_service)s].') % { configured_service': configured_service, backup_service': backup_service,", "line_number": 512, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Delete_backup aborted, expected backup status %(expected_status)s but got %(actual_status)s.') \\ % {'expected_status': expected_status, actual_status': actual_status}", "line_number": 572, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Delete backup aborted, the backup service currently configured [%(configured_service)s] is not the backup service that was used to create this backup [%(backup_service)s].')\\ % {'configured_service': configured_service, backup_service': backup_service}", "line_number": 585, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Export backup aborted, expected backup status %(expected_status)s but got %(actual_status)s.') % {'expected_status': expected_status, actual_status': actual_status}", "line_number": 656, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Export record aborted, the backup service currently configured [%(configured_service)s] is not the backup service that was used to create this backup [%(backup_service)s].') % {'configured_service': configured_service, backup_service': backup_service}", "line_number": 669, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "six.text_type(err", "line_number": 679, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Driver successfully decoded imported backup data, but there are missing fields (%s).') % , '.join(missing_opts", "line_number": 753, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Trying to import backup metadata from id %(meta_id)s into backup %(id)s.') % {'meta_id': backup_id, 'id': backup.id}", "line_number": 762, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Reset backup status aborted, the backup service currently configured [%(configured_service)s] is not the backup service that was used to create this backup [%(backup_service)s].') % \\ {'configured_service': configured_service, backup_service': backup_service_name}", "line_number": 826, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "Unsupported backup verify driver", "line_number": 847, "code": 500, "name": "BackupVerifyUnsupportedDriver", "file_name": "cinder/cinder/backup/manager.py"}, {"msg": "volume size %d is invalid.') % volume['size']", "line_number": 281, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "Chunk size is not multiple of block size for creating hash.'", "line_number": 430, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "Hash block size has changed since the last backup. New hash block size: %(new)s. Old hash block size: %(old)s. Do a full backup.' % {'old': parent_backup_shafile['chunk_size'], new': self.sha_block_size_bytes}", "line_number": 448, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "Volume size increased since the last backup. Do a full backup.'", "line_number": 454, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "restore_backup aborted, actual object list does not match object list stored in metadata.'", "line_number": 601, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "No support to restore backup version %s' % metadata_version", "line_number": 672, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/chunkeddriver.py"}, {"msg": "Backup operation of an encrypted volume failed.", "line_number": 227, "code": 500, "name": "EncryptedBackupOperationFailed", "file_name": "cinder/cinder/backup/driver.py"}, {"msg": "Unsupported backup metadata version requested", "line_number": 336, "code": 500, "name": "BackupMetadataUnsupportedVersion", "file_name": "cinder/cinder/backup/driver.py"}, {"msg": "Could not find config at %(path)s", "line_number": 68, "code": 404, "name": "ConfigNotFound", "file_name": "cinder/cinder/backup/drivers/nfs.py"}, {"msg": "Unset gcs options: %s') % unset_options", "line_number": 164, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/backup/drivers/google.py"}, {"msg": "MD5 of object: %(object_name)s before: %(md5)s and after: %(etag)s is not same.') % { object_name': self.object_name, md5': md5, 'etag': etag, }", "line_number": 289, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/google.py"}, {"msg": "Backup driver reported an error: %(message)s", "line_number": 162, "code": 500, "name": "BackupDriverException", "file_name": "cinder/cinder/backup/drivers/swift.py"}, {"msg": "error writing object to swift, MD5 of object in swift %(etag)s is not the same as MD5 of object sent to swift %(md5)s'), {'etag': etag, 'md5': md5}", "line_number": 283, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/swift.py"}, {"msg": "%(op)s: backup %(bck_id)s, volume %(vol_id)s failed. Backup object has unexpected mode. Image or file backups supported, actual mode is %(vol_mode)s.' % {'op': operation, bck_id': backup_id, vol_id': volume_id, vol_mode': backup_mode}", "line_number": 88, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed to create device hardlink from %(vpath)s to %(bpath)s.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': vol_id, vpath': volume_path, bpath': backup_path, out': exc.stdout, err': exc.stderr}", "line_number": 124, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed. %(path)s is unexpected file type. Block or regular files supported, actual file mode is %(vol_mode)s.' % {'vol_id': volume_id, path': volume_path, vol_mode': volume_mode}", "line_number": 220, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed. Cannot obtain real path to volume at %(path)s.' % {'vol_id': volume_id, path': volume_file}", "line_number": 228, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed. %(path)s is not a file.' % {'vol_id': volume_id, path': volume_path}", "line_number": 235, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed to obtain backup success notification from server.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': vol_id, out': out, err': err}", "line_number": 307, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "restore: %(vol_id)s failed.\\n stdout: %(out)s\\n stderr: %(err)s.' % {'vol_id': vol_id, out': out, err': err}", "line_number": 347, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "Volume metadata backup requested but this driver does not yet support this feature.", "line_number": 366, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed to run dsmc on %(bpath)s.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': backup.volume_id, bpath': backup_path, out': exc.stdout, err': exc.stderr}", "line_number": 397, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "backup: %(vol_id)s failed to run dsmc due to invalid arguments on %(bpath)s.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': backup.volume_id, bpath': backup_path, out': exc.stdout, err': exc.stderr}", "line_number": 408, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "restore: %(vol_id)s failed to run dsmc on %(bpath)s.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': volume_id, bpath': restore_path, out': exc.stdout, err': exc.stderr}", "line_number": 457, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "restore: %(vol_id)s failed to run dsmc due to invalid arguments on %(bpath)s.\\n stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': volume_id, bpath': restore_path, out': exc.stdout, err': exc.stderr}", "line_number": 468, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "delete: %(vol_id)s failed to run dsmc with stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': backup.volume_id, out': exc.stdout, err': exc.stderr}", "line_number": 510, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "delete: %(vol_id)s failed to run dsmc due to invalid arguments with stdout: %(out)s\\n stderr: %(err)s' % {'vol_id': backup.volume_id, out': exc.stdout, err': exc.stderr}", "line_number": 519, "code": 400, "name": "InvalidBackup", "file_name": "cinder/cinder/backup/drivers/tsm.py"}, {"msg": "Invalid Ceph args provided for backup rbd operation", "line_number": 207, "code": 500, "name": "BackupInvalidCephArgs", "file_name": "cinder/cinder/backup/drivers/ceph.py"}, {"msg": "Scheduler Host Filter %(filter_name)s could not be found.", "line_number": 414, "code": 404, "name": "SchedulerHostFilterNotFound", "file_name": "cinder/cinder/scheduler/host_manager.py"}, {"msg": "Scheduler Host Weigher %(weigher_name)s could not be found.", "line_number": 442, "code": 404, "name": "SchedulerHostWeigherNotFound", "file_name": "cinder/cinder/scheduler/host_manager.py"}, {"msg": "scheduler_hints.get(HINT_KEYWORD, None return True", "line_number": 84, "code": 400, "name": "InvalidUUID", "file_name": "cinder/cinder/scheduler/filters/instance_locality_filter.py"}, {"msg": "_ssl  (url.scheme  'https' version=None): self.client = self._create_static_client(context, netloc, use_ssl, version self.client = None self.netloc, self.use_ssl, self.version self.api_servers = get_api_servers(context self.netloc, self.use_ssl, version glanceclient.exc.InvalidEndpoint, glanceclient.exc.CommunicationError client = self.client or self._create_onetime_client(context, version try: controller = getattr(client, kwargs.pop('controller', 'images' return getattr(controller, method)(*args, **kwargs except retry_excs as e: netloc = self.netloc extra = retrying error_msg = _(Error contacting glance server %(netloc)s' for '%(method)s', %(extra)s. if attempt == num_attempts: extra = 'done trying LOG.exception(error_msg, {'netloc': netloc, method': method, extra': extra}", "line_number": 209, "code": 500, "name": "GlanceConnectionFailed", "file_name": "cinder/cinder/image/glance.py"}, {"msg": "Image quota exceeded", "line_number": 216, "code": 413, "name": "ImageLimitExceeded", "file_name": "cinder/cinder/image/glance.py"}, {"msg": "qemu-img %(minimum_version)s or later is required by this volume driver. Current qemu-img version: %(current_version)s') % {'minimum_version': minimum_version, current_version': current_version}", "line_number": 114, "code": 500, "name": "VolumeBackendAPIException", "file_name": "cinder/cinder/image/image_utils.py"}, {"msg": "Availability zone '%s' is invalid.) % availability_zone", "line_number": 116, "code": 400, "name": "InvalidInput", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "No host to create consistency group %s.) % group.id", "line_number": 213, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cgsnahost is empty. No consistency group will be created.", "line_number": 233, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Maximum number of volumes allowed (%(allowed)d) exceeded for quota '%(name)s'.", "line_number": 242, "code": 413, "name": "VolumeLimitExceeded", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Source CG is empty. No consistency group will be created.", "line_number": 311, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot delete consistency group %(id)s. %(reason)s, and it cannot be the source for an ongoing CG or CG Snapshot creation.' % {'id': group.id, 'reason': reason}", "line_number": 487, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot update consistency group %(group_id)s because no valid name, description, add_volumes, or remove_volumes were provided.) % {'group_id': group.id}", "line_number": 499, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot update consistency group %s, status must be available, and it cannot be the source for an ongoing CG or CG Snapshot creation.) % group.id", "line_number": 572, "code": 400, "name": "InvalidConsistencyGroup", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot remove volume %(volume_id)s from consistency group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': volume['id'], group_id': group.id, status': volume['status'], valid': VALID_REMOVE_VOL_FROM_CG_STATUS}", "line_number": 622, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot remove volume %(volume_id)s from consistency group %(group_id)s because it is not in the group.) % {'volume_id': rem_vol, group_id': group.id}", "line_number": 635, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because volume cannot be found.) % {'volume_id': add_vol, group_id': group.id}", "line_number": 657, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because it is already in consistency group %(orig_group)s.) % {'volume_id': add_vol_ref['id'], group_id': group.id, orig_group': orig_group}", "line_number": 670, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because it has no volume type.) % {'volume_id': add_vol_ref['id'], group_id': group.id}", "line_number": 679, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because volume type %(volume_type)s is not supported by the group.) % {'volume_id': add_vol_ref['id'], group_id': group.id, volume_type': add_vol_type_id}", "line_number": 688, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because volume is in an invalid state: %(status)s. Valid states are: %(valid)s.) % {'volume_id': add_vol_ref['id'], group_id': group.id, status': add_vol_ref['status'], valid': VALID_ADD_VOL_TO_CG_STATUS}", "line_number": 699, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Cannot add volume %(volume_id)s to consistency group %(group_id)s because volume does not exist.) % {'volume_id': add_vol_ref['id'], group_id': group.id}", "line_number": 720, "code": 400, "name": "InvalidVolume", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "CgSnapshot status must be available or error, and no CG can be currently using it as source for its creation.'", "line_number": 797, "code": 400, "name": "InvalidCgSnapshot", "file_name": "cinder/cinder/consistencygroup/api.py"}, {"msg": "Error while requesting %(service)s API.", "code": 500, "name": "APIException"}, {"msg": "Maximum number of backups allowed (%(allowed)d) exceeded", "code": 413, "name": "BackupLimitExceeded"}, {"msg": "Backup %(backup_id)s could not be found.", "code": 404, "name": "BackupNotFound"}, {"msg": "Bad HTTP response status %(status)s", "code": 500, "name": "BadHTTPResponseStatus"}, {"msg": "Brocade Fibre Channel Zoning CLI error: %(reason)s", "code": 500, "name": "BrocadeZoningCliException"}, {"msg": "Unrecoverable Error: Versioned Objects in DB are capped to unknown version %(version)s. Most likely your environment contains only new services and you're trying to start an older one. Use `cinder-manage service list` to check that and upgrade this service.", "code": 500, "name": "CappedVersionUnknown"}, {"msg": "CgSnapshot %(cgsnapshot_id)s could not be found.", "code": 404, "name": "CgSnapshotNotFound"}, {"msg": "Cisco Fibre Channel Zoning CLI error: %(reason)s", "code": 500, "name": "CiscoZoningCliException"}, {"msg": "%(type)s with id %(id)s is already being cleaned up or another host has taken over it.", "code": 400, "name": "CleanableInUse"}, {"msg": "Cluster %(name)s already exists.", "code": 500, "name": "ClusterExists"}, {"msg": "Cluster %(id)s still has hosts.", "code": 400, "name": "ClusterHasHosts"}, {"msg": "Cluster %(id)s could not be found.", "code": 404, "name": "ClusterNotFound"}, {"msg": "Dell driver failure: %(reason)s", "code": 500, "name": "DellDriverUnknownSpec"}, {"msg": "Backend doesn't exist (%(backend)s)", "code": 500, "name": "DotHillInvalidBackend"}, {"msg": "Not enough space on backend (%(backend)s)", "code": 500, "name": "DotHillNotEnoughSpace"}, {"msg": "Detected more than one volume with name %(vol_name)s", "code": 500, "name": "DuplicateSfVolumeNames"}, {"msg": "EMC VNX Cinder Driver SPUnavailableException: %(cmd)s (Return Code: %(rc)s) (Output: %(out)s).", "code": 500, "name": "EMCSPUnavailableException"}, {"msg": "EMC VNX Cinder Driver CLI exception: %(cmd)s (Return Code: %(rc)s) (Output: %(out)s).", "code": 500, "name": "EMCVnxCLICmdError"}, {"msg": "Failed to export for volume: %(reason)s", "code": 400, "name": "ExportFailure"}, {"msg": "Operation failed with status=%(status)s. Full dump: %(data)s", "code": 500, "name": "FailedCmdWithDump"}, {"msg": "File %(file_path)s could not be found.", "code": 404, "name": "FileNotFound"}, {"msg": "Google Cloud Storage api failure: %(reason)s", "code": 500, "name": "GCSApiFailure"}, {"msg": "Google Cloud Storage connection failure: %(reason)s", "code": 500, "name": "GCSConnectionFailure"}, {"msg": "Google Cloud Storage oauth2 failure: %(reason)s", "code": 500, "name": "GCSOAuth2Failure"}, {"msg": "Connection to glance failed: %(reason)s", "code": 500, "name": "GlanceConnectionFailed"}, {"msg": "Glance metadata cannot be updated, key %(key)s exists for volume id %(volume_id)s", "code": 400, "name": "GlanceMetadataExists"}, {"msg": "Glance metadata for volume/snapshot %(id)s cannot be found.", "code": 404, "name": "GlanceMetadataNotFound"}, {"msg": "Maximum number of groups allowed (%(allowed)d) exceeded", "code": 413, "name": "GroupLimitExceeded"}, {"msg": "Group type access for %(group_type_id)s / %(project_id)s combination already exists.", "code": 500, "name": "GroupTypeAccessExists"}, {"msg": "Cannot create group_type with name %(name)s and specs %(group_specs)s", "code": 500, "name": "GroupTypeCreateFailed"}, {"msg": "Group type encryption for type %(type_id)s already exists.", "code": 400, "name": "GroupTypeEncryptionExists"}, {"msg": "Group type encryption for type %(type_id)s does not exist.", "code": 404, "name": "GroupTypeEncryptionNotFound"}, {"msg": "Group Type %(id)s already exists.", "code": 500, "name": "GroupTypeExists"}, {"msg": "Group Type %(group_type_id)s deletion is not allowed with groups present with the type.", "code": 500, "name": "GroupTypeInUse"}, {"msg": "Group type %(group_type_id)s could not be found.", "code": 404, "name": "GroupTypeNotFound"}, {"msg": "Group type with name %(group_type_name)s could not be found.", "code": 404, "name": "GroupTypeNotFoundByName"}, {"msg": "Cannot update group_type %(id)s", "code": 500, "name": "GroupTypeUpdateFailed"}, {"msg": "Device or resource is busy.", "code": 500, "name": "HBSDBusy"}, {"msg": "HBSD error occurs.", "code": 500, "name": "HBSDCmdError"}, {"msg": "Volume %(volume_name)s is busy.", "code": 500, "name": "HBSDVolumeIsBusy"}, {"msg": "Host %(host)s could not be found.", "code": 404, "name": "HostNotFound"}, {"msg": "Failed to create iscsi target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetCreateFailed"}, {"msg": "Failed to detach iSCSI target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetDetachFailed"}, {"msg": "No target id found for volume %(volume_id)s.", "code": 404, "name": "ISCSITargetNotFoundForVolume"}, {"msg": "Failed to remove iscsi target for volume %(volume_id)s.", "code": 500, "name": "ISCSITargetRemoveFailed"}, {"msg": "Not authorized for image %(image_id)s.", "code": 500, "name": "ImageNotAuthorized"}, {"msg": "Image %(image_id)s could not be found.", "code": 404, "name": "ImageNotFound"}, {"msg": "API Version String %(version)s is of invalid format. Must be of format MajorNum.MinorNum.", "code": 400, "name": "InvalidAPIVersionString"}, {"msg": "Invalid attachment: %(reason)s", "code": 400, "name": "InvalidAttachment"}, {"msg": "Invalid auth key: %(reason)s", "code": 400, "name": "InvalidAuthKey"}, {"msg": "Invalid backup: %(reason)s", "code": 400, "name": "InvalidBackup"}, {"msg": "Invalid CgSnapshot: %(reason)s", "code": 400, "name": "InvalidCgSnapshot"}, {"msg": "Invalid ConsistencyGroup: %(reason)s", "code": 400, "name": "InvalidConsistencyGroup"}, {"msg": "Invalid content type %(content_type)s.", "code": 400, "name": "InvalidContentType"}, {"msg": "Invalid Group: %(reason)s", "code": 400, "name": "InvalidGroup"}, {"msg": "Invalid GroupSnapshot: %(reason)s", "code": 400, "name": "InvalidGroupSnapshot"}, {"msg": "Invalid GroupSnapshot Status: %(reason)s", "code": 400, "name": "InvalidGroupSnapshotStatus"}, {"msg": "Invalid Group Status: %(reason)s", "code": 400, "name": "InvalidGroupStatus"}, {"msg": "Invalid group type: %(reason)s", "code": 400, "name": "InvalidGroupType"}, {"msg": "Invalid image href %(image_href)s.", "code": 400, "name": "InvalidImageRef"}, {"msg": "The type of metadata: %(metadata_type)s for volume/snapshot %(id)s is invalid.", "code": 400, "name": "InvalidMetadataType"}, {"msg": "Project quotas are not properly setup for nested quotas: %(reason)s.", "code": 500, "name": "InvalidNestedQuotaSetup"}, {"msg": "Invalid qos specs: %(reason)s", "code": 400, "name": "InvalidQoSSpecs"}, {"msg": "Change would make usage less than 0 for the following resources: %(unders)s", "code": 400, "name": "InvalidQuotaValue"}, {"msg": "Invalid reservation expiration %(expire)s.", "code": 400, "name": "InvalidReservationExpiration"}, {"msg": "Expected a uuid but received %(uuid)s.", "code": 400, "name": "InvalidUUID"}, {"msg": "Invalid attaching mode '%(mode)s' for volume %(volume_id)s.", "code": 400, "name": "InvalidVolumeAttachMode"}, {"msg": "Invalid metadata: %(reason)s", "code": 400, "name": "InvalidVolumeMetadata"}, {"msg": "Invalid metadata size: %(reason)s", "code": 400, "name": "InvalidVolumeMetadataSize"}, {"msg": "Lock acquisition failed.", "code": 500, "name": "LockingFailed"}, {"msg": "Malformed message body: %(reason)s", "code": 500, "name": "MalformedRequestBody"}, {"msg": "Message %(message_id)s could not be found.", "code": 404, "name": "MessageNotFound"}, {"msg": "Failed to create metadata for volume: %(reason)s", "code": 400, "name": "MetadataCreateFailure"}, {"msg": "Failed to update metadata for volume: %(reason)s", "code": 400, "name": "MetadataUpdateFailure"}, {"msg": "Missing required element '%(element)s' in request body.", "code": 400, "name": "MissingRequired"}, {"msg": "An unknown exception occurred.", "code": 500, "name": "NoMoreTargets"}, {"msg": "Quota exceeded for resources: %(overs)s", "code": 500, "name": "OverQuota"}, {"msg": "Could not find parameter %(param)s", "code": 404, "name": "ParameterNotFound"}, {"msg": "Policy doesn't allow %(action)s to be performed.", "code": 403, "name": "PolicyNotAuthorized"}, {"msg": "Quota for project %(project_id)s could not be found.", "code": 404, "name": "ProjectQuotaNotFound"}, {"msg": "Failed to associate qos_specs: %(specs_id)s with type %(type_id)s.", "code": 500, "name": "QoSSpecsAssociateFailed"}, {"msg": "Failed to create qos_specs: %(name)s with specs %(qos_specs)s.", "code": 500, "name": "QoSSpecsCreateFailed"}, {"msg": "Failed to disassociate qos_specs: %(specs_id)s with type %(type_id)s.", "code": 500, "name": "QoSSpecsDisassociateFailed"}, {"msg": "QoS Specs %(specs_id)s already exists.", "code": 500, "name": "QoSSpecsExists"}, {"msg": "QoS Specs %(specs_id)s is still associated with entities.", "code": 500, "name": "QoSSpecsInUse"}, {"msg": "No such QoS spec %(specs_id)s.", "code": 404, "name": "QoSSpecsNotFound"}, {"msg": "Failed to update qos_specs: %(specs_id)s with specs %(qos_specs)s.", "code": 500, "name": "QoSSpecsUpdateFailed"}, {"msg": "Quota class %(class_name)s could not be found.", "code": 404, "name": "QuotaClassNotFound"}, {"msg": "Quota exceeded: code=%(code)s", "code": 413, "name": "QuotaError"}, {"msg": "Quota could not be found", "code": 404, "name": "QuotaNotFound"}, {"msg": "Unknown quota resources %(unknown)s.", "code": 404, "name": "QuotaResourceUnknown"}, {"msg": "Quota usage for project %(project_id)s could not be found.", "code": 404, "name": "QuotaUsageNotFound"}, {"msg": "Timeout while requesting capabilities from backend %(service)s.", "code": 502, "name": "RPCTimeout"}, {"msg": "No mounted shares found", "code": 500, "name": "RemoteFSNoSharesMounted"}, {"msg": "There is no share which can host %(volume_size)sG", "code": 500, "name": "RemoteFSNoSuitableShareFound"}, {"msg": "Failed to remove export for volume %(volume)s: %(reason)s", "code": 500, "name": "RemoveExportException"}, {"msg": "Volume %(volume_id)s replication error: %(reason)s", "code": 500, "name": "ReplicationError"}, {"msg": "Volume replication for %(volume_id)s could not be found.", "code": 404, "name": "ReplicationNotFound"}, {"msg": "Quota reservation %(uuid)s could not be found.", "code": 404, "name": "ReservationNotFound"}, {"msg": "SSH command injection detected: %(command)s", "code": 500, "name": "SSHInjectionThreat"}, {"msg": "Instance %(uuid)s could not be found.", "code": 404, "name": "ServerNotFound"}, {"msg": "An error has occurred in SheepdogDriver. (Reason: %(reason)s)", "code": 500, "name": "SheepdogError"}, {"msg": "deleting snapshot %(snapshot_name)s that has dependent volumes", "code": 500, "name": "SnapshotIsBusy"}, {"msg": "The snapshot is unavailable: %(data)s", "code": 500, "name": "SnapshotUnavailable"}, {"msg": "Error in SolidFire API response: data=%(data)s", "code": 500, "name": "SolidFireAPIDataException"}, {"msg": "Retryable SolidFire Exception encountered", "code": 500, "name": "SolidFireRetryableException"}, {"msg": "Connection to swift failed: %(reason)s", "code": 500, "name": "SwiftConnectionFailed"}, {"msg": "HTTP exit code: [%(code)s]", "code": 500, "name": "SynoAPIHTTPError"}, {"msg": "Synology driver authentication failed: %(reason)s.", "code": 500, "name": "SynoAuthError"}, {"msg": "LUN not found by UUID: %(uuid)s.", "code": 500, "name": "SynoLUNNotExist"}, {"msg": "Transfer %(transfer_id)s could not be found.", "code": 404, "name": "TransferNotFound"}, {"msg": "Cannot perform %(action)s during system upgrade.", "code": 400, "name": "UnavailableDuringUpgrade"}, {"msg": "Unexpected over quota on %(name)s.", "code": 413, "name": "UnexpectedOverQuota"}, {"msg": "Unknown or unsupported command %(cmd)s", "code": 500, "name": "UnknownCmd"}, {"msg": "%(detail)s", "code": 400, "name": "ValidationError"}, {"msg": "Backend reports: item not found", "code": 404, "name": "ViolinBackendErrNotFound"}, {"msg": "Backend reports: %(message)s", "code": 404, "name": "ViolinResourceNotFound"}, {"msg": "Volume %(volume_id)s has no administration metadata with key %(metadata_key)s.", "code": 404, "name": "VolumeAdminMetadataNotFound"}, {"msg": "Volume %(volume_id)s is still attached, detach volume first.", "code": 400, "name": "VolumeAttached"}, {"msg": "Requested backup exceeds allowed Backup gigabytes quota. Requested %(requested)sG, quota is %(quota)sG and %(consumed)sG has been consumed.", "code": 413, "name": "VolumeBackupSizeExceedsAvailableQuota"}, {"msg": "Volume device not found at %(device)s.", "code": 500, "name": "VolumeDeviceNotFound"}, {"msg": "Failed to create Volume Group: %(vg_name)s", "code": 500, "name": "VolumeGroupCreationFailed"}, {"msg": "Unable to find Volume Group: %(vg_name)s", "code": 500, "name": "VolumeGroupNotFound"}, {"msg": "deleting volume %(volume_name)s that has snapshot", "code": 500, "name": "VolumeIsBusy"}, {"msg": "Volume migration failed: %(reason)s", "code": 500, "name": "VolumeMigrationFailed"}, {"msg": "Volume %(name)s was not deactivated in time.", "code": 500, "name": "VolumeNotDeactivated"}, {"msg": "Volume type access for %(volume_type_id)s / %(project_id)s combination already exists.", "code": 500, "name": "VolumeTypeAccessExists"}, {"msg": "Cannot create volume_type with name %(name)s and specs %(extra_specs)s", "code": 500, "name": "VolumeTypeCreateFailed"}, {"msg": "Volume type encryption for type %(type_id)s already exists.", "code": 400, "name": "VolumeTypeEncryptionExists"}, {"msg": "Volume Type %(id)s already exists.", "code": 500, "name": "VolumeTypeExists"}, {"msg": "Volume Type %(volume_type_id)s deletion is not allowed with volumes present with the type.", "code": 500, "name": "VolumeTypeInUse"}, {"msg": "Volume type with name %(volume_type_name)s could not be found.", "code": 404, "name": "VolumeTypeNotFoundByName"}, {"msg": "Cannot update volume_type %(id)s", "code": 500, "name": "VolumeTypeUpdateFailed"}, {"msg": "The WebDAV request failed. Reason: %(msg)s, Return code/reason: %(code)s, Source Volume: %(src)s, Destination Volume: %(dst)s, Method: %(method)s.", "code": 500, "name": "WebDAVClientError"}, {"msg": "Worker for %(type)s %(id)s already exists.", "code": 500, "name": "WorkerExists"}, {"msg": "Failed to retrieve attachments for volume %(name)s", "code": 404, "name": "ZadaraAttachmentsNotFound"}, {"msg": "Unable to create server object for initiator %(name)s", "code": 500, "name": "ZadaraServerCreateFailure"}, {"msg": "Unable to find server object for initiator %(name)s", "code": 404, "name": "ZadaraServerNotFound"}, {"msg": "%(reason)s", "code": 500, "name": "ZadaraVolumeNotFound"}, {"msg": "Fibre Channel connection control failure: %(reason)s", "code": 500, "name": "ZoneManagerException"}]}
